
LoRa_Driver_APP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007508  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a4  080076a8  080076a8  000176a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b4c  08007b4c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007b4c  08007b4c  00017b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b54  08007b54  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b54  08007b54  00017b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b58  08007b58  00017b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08007b5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000474  200001d4  08007d30  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000648  08007d30  00020648  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a692  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cbb  00000000  00000000  0002a8d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007e0  00000000  00000000  0002c598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005f4  00000000  00000000  0002cd78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016691  00000000  00000000  0002d36c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000abf8  00000000  00000000  000439fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087203  00000000  00000000  0004e5f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002fec  00000000  00000000  000d57f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000d87e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007690 	.word	0x08007690

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08007690 	.word	0x08007690

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b970 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	460d      	mov	r5, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460f      	mov	r7, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4694      	mov	ip, r2
 8000bfc:	d965      	bls.n	8000cca <__udivmoddi4+0xe2>
 8000bfe:	fab2 f382 	clz	r3, r2
 8000c02:	b143      	cbz	r3, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c08:	f1c3 0220 	rsb	r2, r3, #32
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c12:	4317      	orrs	r7, r2
 8000c14:	409c      	lsls	r4, r3
 8000c16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1a:	fa1f f58c 	uxth.w	r5, ip
 8000c1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c22:	0c22      	lsrs	r2, r4, #16
 8000c24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	fb01 f005 	mul.w	r0, r1, r5
 8000c30:	4290      	cmp	r0, r2
 8000c32:	d90a      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c34:	eb1c 0202 	adds.w	r2, ip, r2
 8000c38:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c3c:	f080 811c 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c40:	4290      	cmp	r0, r2
 8000c42:	f240 8119 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4462      	add	r2, ip
 8000c4a:	1a12      	subs	r2, r2, r0
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5a:	fb00 f505 	mul.w	r5, r0, r5
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x90>
 8000c62:	eb1c 0404 	adds.w	r4, ip, r4
 8000c66:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x294>
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x294>
 8000c74:	4464      	add	r4, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11e      	cbz	r6, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0xbc>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80ed 	beq.w	8000e72 <__udivmoddi4+0x28a>
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	fab3 f183 	clz	r1, r3
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d149      	bne.n	8000d40 <__udivmoddi4+0x158>
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	d302      	bcc.n	8000cb6 <__udivmoddi4+0xce>
 8000cb0:	4282      	cmp	r2, r0
 8000cb2:	f200 80f8 	bhi.w	8000ea6 <__udivmoddi4+0x2be>
 8000cb6:	1a84      	subs	r4, r0, r2
 8000cb8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4617      	mov	r7, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d0e2      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc8:	e7df      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cca:	b902      	cbnz	r2, 8000cce <__udivmoddi4+0xe6>
 8000ccc:	deff      	udf	#255	; 0xff
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8090 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f fe8c 	uxth.w	lr, ip
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf2:	fb0e f005 	mul.w	r0, lr, r5
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4290      	cmp	r0, r2
 8000d06:	f200 80cb 	bhi.w	8000ea0 <__udivmoddi4+0x2b8>
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	1a12      	subs	r2, r2, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d14:	fb07 2210 	mls	r2, r7, r0, r2
 8000d18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x14e>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x14c>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	f200 80bb 	bhi.w	8000eaa <__udivmoddi4+0x2c2>
 8000d34:	4610      	mov	r0, r2
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3e:	e79f      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d40:	f1c1 0720 	rsb	r7, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d52:	fa20 f307 	lsr.w	r3, r0, r7
 8000d56:	40fd      	lsrs	r5, r7
 8000d58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d62:	fa1f fe8c 	uxth.w	lr, ip
 8000d66:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6a:	0c1c      	lsrs	r4, r3, #16
 8000d6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d70:	fb08 f50e 	mul.w	r5, r8, lr
 8000d74:	42a5      	cmp	r5, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d88:	f080 8088 	bcs.w	8000e9c <__udivmoddi4+0x2b4>
 8000d8c:	42a5      	cmp	r5, r4
 8000d8e:	f240 8085 	bls.w	8000e9c <__udivmoddi4+0x2b4>
 8000d92:	f1a8 0802 	sub.w	r8, r8, #2
 8000d96:	4464      	add	r4, ip
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	b29d      	uxth	r5, r3
 8000d9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da0:	fb09 4413 	mls	r4, r9, r3, r4
 8000da4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000db8:	d26c      	bcs.n	8000e94 <__udivmoddi4+0x2ac>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	d96a      	bls.n	8000e94 <__udivmoddi4+0x2ac>
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dc6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	46c8      	mov	r8, r9
 8000dd2:	46ae      	mov	lr, r5
 8000dd4:	d356      	bcc.n	8000e84 <__udivmoddi4+0x29c>
 8000dd6:	d053      	beq.n	8000e80 <__udivmoddi4+0x298>
 8000dd8:	b156      	cbz	r6, 8000df0 <__udivmoddi4+0x208>
 8000dda:	ebb0 0208 	subs.w	r2, r0, r8
 8000dde:	eb64 040e 	sbc.w	r4, r4, lr
 8000de2:	fa04 f707 	lsl.w	r7, r4, r7
 8000de6:	40ca      	lsrs	r2, r1
 8000de8:	40cc      	lsrs	r4, r1
 8000dea:	4317      	orrs	r7, r2
 8000dec:	e9c6 7400 	strd	r7, r4, [r6]
 8000df0:	4618      	mov	r0, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	f1c3 0120 	rsb	r1, r3, #32
 8000dfc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e00:	fa20 f201 	lsr.w	r2, r0, r1
 8000e04:	fa25 f101 	lsr.w	r1, r5, r1
 8000e08:	409d      	lsls	r5, r3
 8000e0a:	432a      	orrs	r2, r5
 8000e0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e18:	fb07 1510 	mls	r5, r7, r0, r1
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e22:	fb00 f50e 	mul.w	r5, r0, lr
 8000e26:	428d      	cmp	r5, r1
 8000e28:	fa04 f403 	lsl.w	r4, r4, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x258>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e36:	d22f      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e38:	428d      	cmp	r5, r1
 8000e3a:	d92d      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1b49      	subs	r1, r1, r5
 8000e42:	b292      	uxth	r2, r2
 8000e44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e48:	fb07 1115 	mls	r1, r7, r5, r1
 8000e4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e50:	fb05 f10e 	mul.w	r1, r5, lr
 8000e54:	4291      	cmp	r1, r2
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x282>
 8000e58:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e60:	d216      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000e62:	4291      	cmp	r1, r2
 8000e64:	d914      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e66:	3d02      	subs	r5, #2
 8000e68:	4462      	add	r2, ip
 8000e6a:	1a52      	subs	r2, r2, r1
 8000e6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e70:	e738      	b.n	8000ce4 <__udivmoddi4+0xfc>
 8000e72:	4631      	mov	r1, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e708      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000e78:	4639      	mov	r1, r7
 8000e7a:	e6e6      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x90>
 8000e80:	4548      	cmp	r0, r9
 8000e82:	d2a9      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e84:	ebb9 0802 	subs.w	r8, r9, r2
 8000e88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	e7a3      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e90:	4645      	mov	r5, r8
 8000e92:	e7ea      	b.n	8000e6a <__udivmoddi4+0x282>
 8000e94:	462b      	mov	r3, r5
 8000e96:	e794      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e98:	4640      	mov	r0, r8
 8000e9a:	e7d1      	b.n	8000e40 <__udivmoddi4+0x258>
 8000e9c:	46d0      	mov	r8, sl
 8000e9e:	e77b      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000ea0:	3d02      	subs	r5, #2
 8000ea2:	4462      	add	r2, ip
 8000ea4:	e732      	b.n	8000d0c <__udivmoddi4+0x124>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e70a      	b.n	8000cc0 <__udivmoddi4+0xd8>
 8000eaa:	4464      	add	r4, ip
 8000eac:	3802      	subs	r0, #2
 8000eae:	e742      	b.n	8000d36 <__udivmoddi4+0x14e>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <SubSys_WirelessCom_Telemetry_Transfer_From_To>:
  * 																 	  @arg 1 : Sat_Payload
  * 																  	  @arg 2 : Ground_Sation
  * @param SubSys_WirelessCom_APP_HandleTypeDef *dev_WirelessComApp , created object for wireless communication
  * @retval NONE
  */
void SubSys_WirelessCom_Telemetry_Transfer_From_To(MissionUnit From_X, MissionUnit To_Y, SubSys_WirelessCom_APP_HandleTypeDef *dev_WirelessComApp){
 8000eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000eb8:	b0d9      	sub	sp, #356	; 0x164
 8000eba:	af2e      	add	r7, sp, #184	; 0xb8
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8000ec2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6

	/*! Use it when working on Sat_Carrier flight software*/
	if(From_X == Sat_Carrier && To_Y == Sat_Payload){
 8000ecc:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	f040 809f 	bne.w	8001014 <SubSys_WirelessCom_Telemetry_Transfer_From_To+0x160>
 8000ed6:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	f040 809a 	bne.w	8001014 <SubSys_WirelessCom_Telemetry_Transfer_From_To+0x160>

		/*! Create message packet for Carrier and send to the Payload*/
		SubSys_WirelessCom_Telemetry_Create_Packet_For(Sat_Carrier, dev_WirelessComApp);
 8000ee0:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8000ee4:	2000      	movs	r0, #0
 8000ee6:	f000 fa53 	bl	8001390 <SubSys_WirelessCom_Telemetry_Create_Packet_For>

				/* 13 pairs of '<>' and 59Byte data are 75 byte as total budget*/
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Tx,
 8000eea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000eee:	33c8      	adds	r3, #200	; 0xc8
 8000ef0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
																		"<%x><%x><%x><%.2f><%.2f><%.1f><%.1f><%.2f><%.4f><%c><%.4f><%c><%.1f>",
																		dev_WirelessComApp->Target_ADDH,
 8000ef4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000ef8:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Tx,
 8000efc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
																		dev_WirelessComApp->Target_ADDL,
 8000f00:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000f04:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Tx,
 8000f08:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
																		dev_WirelessComApp->Target_Ch,
 8000f0c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000f10:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Tx,
 8000f14:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

																		dev_WirelessComApp->Variable.Carr_Pressure,
 8000f18:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000f1c:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Tx,
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff fb19 	bl	8000558 <__aeabi_f2d>
 8000f26:	e9c7 0122 	strd	r0, r1, [r7, #136]	; 0x88
																		dev_WirelessComApp->Variable.Carr_Temperature,
 8000f2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000f2e:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Tx,
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff fb10 	bl	8000558 <__aeabi_f2d>
 8000f38:	e9c7 0120 	strd	r0, r1, [r7, #128]	; 0x80
																		dev_WirelessComApp->Variable.Carr_VertHeight,
 8000f3c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000f40:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Tx,
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff fb07 	bl	8000558 <__aeabi_f2d>
 8000f4a:	e9c7 011e 	strd	r0, r1, [r7, #120]	; 0x78
																		dev_WirelessComApp->Variable.Carr_VertSpeed,
 8000f4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000f52:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Tx,
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fafe 	bl	8000558 <__aeabi_f2d>
 8000f5c:	e9c7 011c 	strd	r0, r1, [r7, #112]	; 0x70

																		dev_WirelessComApp->Variable.Carr_BatteryVoltage,
 8000f60:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000f64:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Tx,
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff faf5 	bl	8000558 <__aeabi_f2d>
 8000f6e:	4682      	mov	sl, r0
 8000f70:	468b      	mov	fp, r1

																		dev_WirelessComApp->Variable.Carr_GPS_Latitude,
 8000f72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000f76:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Tx,
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff faec 	bl	8000558 <__aeabi_f2d>
 8000f80:	4680      	mov	r8, r0
 8000f82:	4689      	mov	r9, r1
																		dev_WirelessComApp->Variable.Carr_GPS_CompassWay_Latitude,
 8000f84:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000f88:	f893 31b1 	ldrb.w	r3, [r3, #433]	; 0x1b1
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Tx,
 8000f8c:	66bb      	str	r3, [r7, #104]	; 0x68
																		dev_WirelessComApp->Variable.Carr_GPS_Longitude,
 8000f8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000f92:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Tx,
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff fade 	bl	8000558 <__aeabi_f2d>
 8000f9c:	4604      	mov	r4, r0
 8000f9e:	460d      	mov	r5, r1
																		dev_WirelessComApp->Variable.Carr_GPS_CompassWay_Longtitude,
 8000fa0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000fa4:	f893 31b0 	ldrb.w	r3, [r3, #432]	; 0x1b0
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Tx,
 8000fa8:	461e      	mov	r6, r3
																		dev_WirelessComApp->Variable.Carr_GPS_Altitude);
 8000faa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000fae:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Tx,
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff fad0 	bl	8000558 <__aeabi_f2d>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	460b      	mov	r3, r1
 8000fbc:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8000fc0:	9612      	str	r6, [sp, #72]	; 0x48
 8000fc2:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
 8000fc6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8000fc8:	910e      	str	r1, [sp, #56]	; 0x38
 8000fca:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8000fce:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8000fd2:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 8000fd6:	ed8d 7b08 	vstr	d7, [sp, #32]
 8000fda:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8000fde:	ed8d 7b06 	vstr	d7, [sp, #24]
 8000fe2:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 8000fe6:	ed8d 7b04 	vstr	d7, [sp, #16]
 8000fea:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 8000fee:	ed8d 7b02 	vstr	d7, [sp, #8]
 8000ff2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8000ff6:	9100      	str	r1, [sp, #0]
 8000ff8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000ffc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001000:	49ae      	ldr	r1, [pc, #696]	; (80012bc <SubSys_WirelessCom_Telemetry_Transfer_From_To+0x408>)
 8001002:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8001006:	f004 f9e9 	bl	80053dc <siprintf>
 800100a:	4603      	mov	r3, r0
 800100c:	b29a      	uxth	r2, r3
 800100e:	4bac      	ldr	r3, [pc, #688]	; (80012c0 <SubSys_WirelessCom_Telemetry_Transfer_From_To+0x40c>)
 8001010:	801a      	strh	r2, [r3, #0]
	if(From_X == Sat_Carrier && To_Y == Sat_Payload){
 8001012:	e1b3      	b.n	800137c <SubSys_WirelessCom_Telemetry_Transfer_From_To+0x4c8>
				// SEND THE ALL DATA AS USING UART , DMA INTERRUPT (WILL BE ADDED)

	}

	/*! Use it when working on Sat_Payload flight software*/
	else if(From_X == Sat_Payload && To_Y == Sat_Carrier){
 8001014:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8001018:	2b01      	cmp	r3, #1
 800101a:	d104      	bne.n	8001026 <SubSys_WirelessCom_Telemetry_Transfer_From_To+0x172>
 800101c:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 8001020:	2b00      	cmp	r3, #0
 8001022:	f000 81ab 	beq.w	800137c <SubSys_WirelessCom_Telemetry_Transfer_From_To+0x4c8>
		// Will be add code blocks when will be using feedbacks
	}

	/*! Use it when working on Sat_Payload flight software*/
	else if(From_X == Sat_Payload && To_Y == GroundStation){
 8001026:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800102a:	2b01      	cmp	r3, #1
 800102c:	f040 814c 	bne.w	80012c8 <SubSys_WirelessCom_Telemetry_Transfer_From_To+0x414>
 8001030:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 8001034:	2b02      	cmp	r3, #2
 8001036:	f040 8147 	bne.w	80012c8 <SubSys_WirelessCom_Telemetry_Transfer_From_To+0x414>

		/*! Create message packet for Payload and send to the Ground Station*/
		SubSys_WirelessCom_Telemetry_Create_Packet_For(Sat_Payload, dev_WirelessComApp);
 800103a:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800103e:	2001      	movs	r0, #1
 8001040:	f000 f9a6 	bl	8001390 <SubSys_WirelessCom_Telemetry_Create_Packet_For>

				/*! 32 pairs of '<>' and 125Byte data are 189 byte as total budget*/
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Tx,
 8001044:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001048:	33c8      	adds	r3, #200	; 0xc8
 800104a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
																	"<%x><%x><%x><%u><%u><%.2f><%.2f><%.1f><%.1f><%.2f><%.4f><%c><%.4f><%c><%.1f><%.2f><%.2f><%.2f><%u><%u><%u><%u><%u><%u><%u><%u><%c><%c><%c><%c><%.1f><%.1f>",
																	dev_WirelessComApp->Target_ADDH,
 800104e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001052:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Tx,
 8001056:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
																	dev_WirelessComApp->Target_ADDL,
 800105a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800105e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Tx,
 8001062:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
																	dev_WirelessComApp->Target_Ch,
 8001066:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800106a:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Tx,
 800106e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001072:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001076:	f8d3 11f8 	ldr.w	r1, [r3, #504]	; 0x1f8
 800107a:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800107e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001082:	f8d3 41fc 	ldr.w	r4, [r3, #508]	; 0x1fc
 8001086:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80

																	dev_WirelessComApp->Variable.TeamID,
																	dev_WirelessComApp->Variable.PacketNum,

																	dev_WirelessComApp->Variable.PayLoad_Pressure,
 800108a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800108e:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Tx,
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff fa60 	bl	8000558 <__aeabi_f2d>
 8001098:	e9c7 011e 	strd	r0, r1, [r7, #120]	; 0x78
																	dev_WirelessComApp->Variable.PayLoad_Temperature,
 800109c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80010a0:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Tx,
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff fa57 	bl	8000558 <__aeabi_f2d>
 80010aa:	e9c7 011c 	strd	r0, r1, [r7, #112]	; 0x70
																	dev_WirelessComApp->Variable.PayLoad_VertHeight,
 80010ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80010b2:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Tx,
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff fa4e 	bl	8000558 <__aeabi_f2d>
 80010bc:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
																	dev_WirelessComApp->Variable.PayLoad_VertSpeed,
 80010c0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80010c4:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Tx,
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff fa45 	bl	8000558 <__aeabi_f2d>
 80010ce:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60


																	dev_WirelessComApp->Variable.Payload_BatteryVoltage,
 80010d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80010d6:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Tx,
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff fa3c 	bl	8000558 <__aeabi_f2d>
 80010e0:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58

																	dev_WirelessComApp->Variable.PayLoad_GPS_Latitude,
 80010e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80010e8:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Tx,
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff fa33 	bl	8000558 <__aeabi_f2d>
 80010f2:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
																	dev_WirelessComApp->Variable.Payload_GPS_CompassWay_Latitude,
 80010f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80010fa:	f893 31d1 	ldrb.w	r3, [r3, #465]	; 0x1d1
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Tx,
 80010fe:	64fb      	str	r3, [r7, #76]	; 0x4c
																	dev_WirelessComApp->Variable.PayLoad_GPS_Longitude,
 8001100:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001104:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Tx,
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff fa25 	bl	8000558 <__aeabi_f2d>
 800110e:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
																	dev_WirelessComApp->Variable.Payload_GPS_CompassWay_Longtitude,
 8001112:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001116:	f893 31d0 	ldrb.w	r3, [r3, #464]	; 0x1d0
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Tx,
 800111a:	64bb      	str	r3, [r7, #72]	; 0x48
																	dev_WirelessComApp->Variable.PayLoad_GPS_Altitude,
 800111c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001120:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Tx,
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff fa17 	bl	8000558 <__aeabi_f2d>
 800112a:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38

																	dev_WirelessComApp->Variable.PayLoad_Roll,
 800112e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001132:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Tx,
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff fa0e 	bl	8000558 <__aeabi_f2d>
 800113c:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
																	dev_WirelessComApp->Variable.PayLoad_Pitch,
 8001140:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001144:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Tx,
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff fa05 	bl	8000558 <__aeabi_f2d>
 800114e:	4682      	mov	sl, r0
 8001150:	468b      	mov	fp, r1
																	dev_WirelessComApp->Variable.PayLoad_Yaw,
 8001152:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001156:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Tx,
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff f9fc 	bl	8000558 <__aeabi_f2d>
 8001160:	4680      	mov	r8, r0
 8001162:	4689      	mov	r9, r1

																	dev_WirelessComApp->Variable.Payload_Second,
 8001164:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001168:	f8b3 31e4 	ldrh.w	r3, [r3, #484]	; 0x1e4
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Tx,
 800116c:	62fb      	str	r3, [r7, #44]	; 0x2c
																	dev_WirelessComApp->Variable.Payload_Minute,
 800116e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001172:	f8b3 31e6 	ldrh.w	r3, [r3, #486]	; 0x1e6
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Tx,
 8001176:	62bb      	str	r3, [r7, #40]	; 0x28
																	dev_WirelessComApp->Variable.Payload_Hour,
 8001178:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800117c:	f8b3 31e8 	ldrh.w	r3, [r3, #488]	; 0x1e8
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Tx,
 8001180:	627b      	str	r3, [r7, #36]	; 0x24
																	dev_WirelessComApp->Variable.Payload_Day,
 8001182:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001186:	f8b3 31ea 	ldrh.w	r3, [r3, #490]	; 0x1ea
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Tx,
 800118a:	623b      	str	r3, [r7, #32]
																	dev_WirelessComApp->Variable.Payload_Month,
 800118c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001190:	f8b3 31ec 	ldrh.w	r3, [r3, #492]	; 0x1ec
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Tx,
 8001194:	61fb      	str	r3, [r7, #28]
																	dev_WirelessComApp->Variable.Payload_Year,
 8001196:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800119a:	f8b3 31ee 	ldrh.w	r3, [r3, #494]	; 0x1ee
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Tx,
 800119e:	61bb      	str	r3, [r7, #24]

																	dev_WirelessComApp->Variable.ErrorCode,
 80011a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80011a4:	f893 31f1 	ldrb.w	r3, [r3, #497]	; 0x1f1
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Tx,
 80011a8:	617b      	str	r3, [r7, #20]
																	dev_WirelessComApp->Variable.SatelliteStat,
 80011aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80011ae:	f893 31f0 	ldrb.w	r3, [r3, #496]	; 0x1f0
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Tx,
 80011b2:	613b      	str	r3, [r7, #16]

																	dev_WirelessComApp->Variable.Payload_Filter_NLNL[0],
 80011b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80011b8:	f893 31f2 	ldrb.w	r3, [r3, #498]	; 0x1f2
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Tx,
 80011bc:	60fb      	str	r3, [r7, #12]
																	dev_WirelessComApp->Variable.Payload_Filter_NLNL[1],
 80011be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80011c2:	f893 31f3 	ldrb.w	r3, [r3, #499]	; 0x1f3
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Tx,
 80011c6:	60bb      	str	r3, [r7, #8]
																	dev_WirelessComApp->Variable.Payload_Filter_NLNL[2],
 80011c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80011cc:	f893 31f4 	ldrb.w	r3, [r3, #500]	; 0x1f4
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Tx,
 80011d0:	607b      	str	r3, [r7, #4]
																	dev_WirelessComApp->Variable.Payload_Filter_NLNL[3],
 80011d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80011d6:	f893 31f5 	ldrb.w	r3, [r3, #501]	; 0x1f5
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Tx,
 80011da:	461e      	mov	r6, r3
																	dev_WirelessComApp->Variable.Station_IOTdata,
 80011dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80011e0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Tx,
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff f9b7 	bl	8000558 <__aeabi_f2d>
 80011ea:	4604      	mov	r4, r0
 80011ec:	460d      	mov	r5, r1
																	dev_WirelessComApp->Variable.VertHeight_Diff);
 80011ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80011f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Tx,
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff f9ae 	bl	8000558 <__aeabi_f2d>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
 8001200:	e9cd 232c 	strd	r2, r3, [sp, #176]	; 0xb0
 8001204:	e9cd 452a 	strd	r4, r5, [sp, #168]	; 0xa8
 8001208:	9629      	str	r6, [sp, #164]	; 0xa4
 800120a:	687d      	ldr	r5, [r7, #4]
 800120c:	9528      	str	r5, [sp, #160]	; 0xa0
 800120e:	68bd      	ldr	r5, [r7, #8]
 8001210:	9527      	str	r5, [sp, #156]	; 0x9c
 8001212:	68fd      	ldr	r5, [r7, #12]
 8001214:	9526      	str	r5, [sp, #152]	; 0x98
 8001216:	693d      	ldr	r5, [r7, #16]
 8001218:	9525      	str	r5, [sp, #148]	; 0x94
 800121a:	697d      	ldr	r5, [r7, #20]
 800121c:	9524      	str	r5, [sp, #144]	; 0x90
 800121e:	69bd      	ldr	r5, [r7, #24]
 8001220:	9523      	str	r5, [sp, #140]	; 0x8c
 8001222:	69fd      	ldr	r5, [r7, #28]
 8001224:	9522      	str	r5, [sp, #136]	; 0x88
 8001226:	6a3d      	ldr	r5, [r7, #32]
 8001228:	9521      	str	r5, [sp, #132]	; 0x84
 800122a:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 800122c:	9520      	str	r5, [sp, #128]	; 0x80
 800122e:	6abd      	ldr	r5, [r7, #40]	; 0x28
 8001230:	951f      	str	r5, [sp, #124]	; 0x7c
 8001232:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8001234:	951e      	str	r5, [sp, #120]	; 0x78
 8001236:	e9cd 891c 	strd	r8, r9, [sp, #112]	; 0x70
 800123a:	e9cd ab1a 	strd	sl, fp, [sp, #104]	; 0x68
 800123e:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8001242:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 8001246:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 800124a:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 800124e:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 8001250:	9514      	str	r5, [sp, #80]	; 0x50
 8001252:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8001256:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 800125a:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 800125c:	9510      	str	r5, [sp, #64]	; 0x40
 800125e:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8001262:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8001266:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 800126a:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800126e:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 8001272:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8001276:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 800127a:	ed8d 7b08 	vstr	d7, [sp, #32]
 800127e:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 8001282:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001286:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 800128a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800128e:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 8001292:	9402      	str	r4, [sp, #8]
 8001294:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8001298:	9101      	str	r1, [sp, #4]
 800129a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800129e:	9100      	str	r1, [sp, #0]
 80012a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80012a4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80012a8:	4906      	ldr	r1, [pc, #24]	; (80012c4 <SubSys_WirelessCom_Telemetry_Transfer_From_To+0x410>)
 80012aa:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80012ae:	f004 f895 	bl	80053dc <siprintf>
 80012b2:	4603      	mov	r3, r0
 80012b4:	b29a      	uxth	r2, r3
 80012b6:	4b02      	ldr	r3, [pc, #8]	; (80012c0 <SubSys_WirelessCom_Telemetry_Transfer_From_To+0x40c>)
 80012b8:	801a      	strh	r2, [r3, #0]
	else if(From_X == Sat_Payload && To_Y == GroundStation){
 80012ba:	e05f      	b.n	800137c <SubSys_WirelessCom_Telemetry_Transfer_From_To+0x4c8>
 80012bc:	080076a8 	.word	0x080076a8
 80012c0:	200001f0 	.word	0x200001f0
 80012c4:	080076f0 	.word	0x080076f0
				// SEND THE ALL DATA AS USING UART , DMA INTERRUPT (WILL BE ADDED)
	}

	/*! Use it when working on Sat_Station flight software*/
	else if(From_X == GroundStation && To_Y == Sat_Payload){
 80012c8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d155      	bne.n	800137c <SubSys_WirelessCom_Telemetry_Transfer_From_To+0x4c8>
 80012d0:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d151      	bne.n	800137c <SubSys_WirelessCom_Telemetry_Transfer_From_To+0x4c8>

		/*! Create message packet for Ground Sation and send to the Payload*/
		SubSys_WirelessCom_Telemetry_Create_Packet_For(GroundStation, dev_WirelessComApp);
 80012d8:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80012dc:	2002      	movs	r0, #2
 80012de:	f000 f857 	bl	8001390 <SubSys_WirelessCom_Telemetry_Create_Packet_For>

				/*! 9 pairs of '<>' and 9Byte data are 27 byte as total budget*/
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Tx,
 80012e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80012e6:	f103 04c8 	add.w	r4, r3, #200	; 0xc8
																		"<%x><%x><%x><%.1f><%u><%c><%c><%c><%c>",
																		dev_WirelessComApp->Target_ADDH,
 80012ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80012ee:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Tx,
 80012f2:	4698      	mov	r8, r3
																		dev_WirelessComApp->Target_ADDL,
 80012f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80012f8:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Tx,
 80012fc:	4699      	mov	r9, r3
																		dev_WirelessComApp->Target_Ch,
 80012fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001302:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Tx,
 8001306:	461d      	mov	r5, r3

																		dev_WirelessComApp->Variable.Station_IOTdata,
 8001308:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800130c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Tx,
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff f921 	bl	8000558 <__aeabi_f2d>
 8001316:	4602      	mov	r2, r0
 8001318:	460b      	mov	r3, r1
																		dev_WirelessComApp->Variable.Satellite_ManuelSep,
 800131a:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800131e:	f891 1208 	ldrb.w	r1, [r1, #520]	; 0x208
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Tx,
 8001322:	4608      	mov	r0, r1
																		dev_WirelessComApp->Variable.Ground_Filter_NLNL[0],
 8001324:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8001328:	f891 1209 	ldrb.w	r1, [r1, #521]	; 0x209
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Tx,
 800132c:	460e      	mov	r6, r1
																		dev_WirelessComApp->Variable.Ground_Filter_NLNL[1],
 800132e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8001332:	f891 120a 	ldrb.w	r1, [r1, #522]	; 0x20a
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Tx,
 8001336:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
																		dev_WirelessComApp->Variable.Ground_Filter_NLNL[2],
 800133a:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800133e:	f891 120b 	ldrb.w	r1, [r1, #523]	; 0x20b
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Tx,
 8001342:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
																		dev_WirelessComApp->Variable.Ground_Filter_NLNL[3]);
 8001346:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800134a:	f891 120c 	ldrb.w	r1, [r1, #524]	; 0x20c
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Tx,
 800134e:	9108      	str	r1, [sp, #32]
 8001350:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8001354:	9107      	str	r1, [sp, #28]
 8001356:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800135a:	9106      	str	r1, [sp, #24]
 800135c:	9605      	str	r6, [sp, #20]
 800135e:	9004      	str	r0, [sp, #16]
 8001360:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001364:	9500      	str	r5, [sp, #0]
 8001366:	464b      	mov	r3, r9
 8001368:	4642      	mov	r2, r8
 800136a:	4907      	ldr	r1, [pc, #28]	; (8001388 <SubSys_WirelessCom_Telemetry_Transfer_From_To+0x4d4>)
 800136c:	4620      	mov	r0, r4
 800136e:	f004 f835 	bl	80053dc <siprintf>
 8001372:	4603      	mov	r3, r0
 8001374:	b29a      	uxth	r2, r3
 8001376:	4b05      	ldr	r3, [pc, #20]	; (800138c <SubSys_WirelessCom_Telemetry_Transfer_From_To+0x4d8>)
 8001378:	801a      	strh	r2, [r3, #0]
				// SEND THE ALL DATA AS USING UART , DMA INTERRUPT (WILL BE ADDED)

	}

}
 800137a:	e7ff      	b.n	800137c <SubSys_WirelessCom_Telemetry_Transfer_From_To+0x4c8>
 800137c:	bf00      	nop
 800137e:	37ac      	adds	r7, #172	; 0xac
 8001380:	46bd      	mov	sp, r7
 8001382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001386:	bf00      	nop
 8001388:	0800778c 	.word	0x0800778c
 800138c:	200001f0 	.word	0x200001f0

08001390 <SubSys_WirelessCom_Telemetry_Create_Packet_For>:
 * 																	   @arg 1 : Sat_Payload
 * 																	   @arg 2 : Ground_Sation
 * @param  : SubSys_WirelessCom_APP_HandleTypeDef *dev_WirelessComApp , created object for wireless communication
 * @retval NONE
 */
void SubSys_WirelessCom_Telemetry_Create_Packet_For(MissionUnit x,SubSys_WirelessCom_APP_HandleTypeDef *dev_WirelessComApp){
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	6039      	str	r1, [r7, #0]
 800139a:	71fb      	strb	r3, [r7, #7]
	switch(x){
 800139c:	79fb      	ldrb	r3, [r7, #7]
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d033      	beq.n	800140a <SubSys_WirelessCom_Telemetry_Create_Packet_For+0x7a>
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	dc44      	bgt.n	8001430 <SubSys_WirelessCom_Telemetry_Create_Packet_For+0xa0>
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d002      	beq.n	80013b0 <SubSys_WirelessCom_Telemetry_Create_Packet_For+0x20>
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d01a      	beq.n	80013e4 <SubSys_WirelessCom_Telemetry_Create_Packet_For+0x54>
		dev_WirelessComApp->Variable.Station_IOTdata;
		dev_WirelessComApp->Variable.Satellite_ManuelSep;

		break;
	}
}
 80013ae:	e03f      	b.n	8001430 <SubSys_WirelessCom_Telemetry_Create_Packet_For+0xa0>
		dev_WirelessComApp->Buffer.Tx[0] = dev_WirelessComApp->Target_ADDH;
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	f893 221c 	ldrb.w	r2, [r3, #540]	; 0x21c
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
		dev_WirelessComApp->Buffer.Tx[1] = dev_WirelessComApp->Target_ADDL;
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	f893 221d 	ldrb.w	r2, [r3, #541]	; 0x21d
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
		dev_WirelessComApp->Buffer.Tx[2] = dev_WirelessComApp->Target_Ch;
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	f893 221e 	ldrb.w	r2, [r3, #542]	; 0x21e
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
		dev_WirelessComApp->Variable.PacketNum++;
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 80013da:	1c5a      	adds	r2, r3, #1
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
		break;
 80013e2:	e025      	b.n	8001430 <SubSys_WirelessCom_Telemetry_Create_Packet_For+0xa0>
		dev_WirelessComApp->Buffer.Tx[0] = dev_WirelessComApp->Target_ADDH;
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	f893 221c 	ldrb.w	r2, [r3, #540]	; 0x21c
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
		dev_WirelessComApp->Buffer.Tx[1] = dev_WirelessComApp->Target_ADDL;
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	f893 221d 	ldrb.w	r2, [r3, #541]	; 0x21d
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
		dev_WirelessComApp->Buffer.Tx[2] = dev_WirelessComApp->Target_Ch;
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	f893 221e 	ldrb.w	r2, [r3, #542]	; 0x21e
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
		break;
 8001408:	e012      	b.n	8001430 <SubSys_WirelessCom_Telemetry_Create_Packet_For+0xa0>
		dev_WirelessComApp->Buffer.Tx[0] = dev_WirelessComApp->Target_ADDH;
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	f893 221c 	ldrb.w	r2, [r3, #540]	; 0x21c
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
		dev_WirelessComApp->Buffer.Tx[1] = dev_WirelessComApp->Target_ADDL;
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	f893 221d 	ldrb.w	r2, [r3, #541]	; 0x21d
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
		dev_WirelessComApp->Buffer.Tx[2] = dev_WirelessComApp->Target_Ch;
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	f893 221e 	ldrb.w	r2, [r3, #542]	; 0x21e
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
		break;
 800142e:	bf00      	nop
}
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <SubSys_WirelessCom_Config_Init>:


/******************************************************************************
         				#### WIRELESSCOM  FUNCTIONS ####
******************************************************************************/
void SubSys_WirelessCom_Config_Init(SubSys_WirelesscomConfig_HandleTypeDef    *dev){
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]

	/*----------------Implement selected mode -------------------*/
	SubSys_WirelessCom_Config_WORK_MODE(dev);
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f000 f94d 	bl	80016e4 <SubSys_WirelessCom_Config_WORK_MODE>

	/*----------------Select your special parameters-------------------*/
	dev->param.SerialPortRate 		= UART_Rate_is_9600;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2203      	movs	r2, #3
 800144e:	731a      	strb	r2, [r3, #12]
	dev->param.ParityBit 			= p8N1;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2200      	movs	r2, #0
 8001454:	735a      	strb	r2, [r3, #13]
	dev->param.AirDataRate    		= Air_Data_Rate_2d_4k;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	739a      	strb	r2, [r3, #14]

	dev->param.SubPacket 			= bytes_200;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2200      	movs	r2, #0
 8001460:	73da      	strb	r2, [r3, #15]
	dev->param.AmbientNoise_SW 		= EnableFea;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2201      	movs	r2, #1
 8001466:	741a      	strb	r2, [r3, #16]
	dev->param.TX_Power 			= dBm30;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2200      	movs	r2, #0
 800146c:	745a      	strb	r2, [r3, #17]

	dev->param.dev_Channel 			= 0x12;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2212      	movs	r2, #18
 8001472:	749a      	strb	r2, [r3, #18]

	dev->param.RSSIByte_SW 			= EnableFea ;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2201      	movs	r2, #1
 8001478:	74da      	strb	r2, [r3, #19]
	dev->param.TransmissionMethod 	= Fixed_t ;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2201      	movs	r2, #1
 800147e:	751a      	strb	r2, [r3, #20]
	dev->param.LBT_SW 				= DisableFea;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	755a      	strb	r2, [r3, #21]
	dev->param.WorCycle 			= ms500;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2200      	movs	r2, #0
 800148a:	759a      	strb	r2, [r3, #22]


	/*----------------Save parameters into the "dev" object-------------------*/
	dev->ADDH = 0x19;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2219      	movs	r2, #25
 8001490:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	dev->ADDL = 0x23;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2223      	movs	r2, #35	; 0x23
 8001498:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

	dev->REG0 = ((dev->param.SerialPortRate << 5) | (dev->param.ParityBit  << 3) | (dev->param.AirDataRate  << 0));
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	7b1b      	ldrb	r3, [r3, #12]
 80014a0:	015b      	lsls	r3, r3, #5
 80014a2:	b25a      	sxtb	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	7b5b      	ldrb	r3, [r3, #13]
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	b25b      	sxtb	r3, r3
 80014ac:	4313      	orrs	r3, r2
 80014ae:	b25a      	sxtb	r2, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	7b9b      	ldrb	r3, [r3, #14]
 80014b4:	b25b      	sxtb	r3, r3
 80014b6:	4313      	orrs	r3, r2
 80014b8:	b25b      	sxtb	r3, r3
 80014ba:	b2da      	uxtb	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	771a      	strb	r2, [r3, #28]
	dev->REG1 = ((dev->param.SubPacket << 6) | (dev->param.AmbientNoise_SW  << 5) | (dev->param.TX_Power  << 0));
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	7bdb      	ldrb	r3, [r3, #15]
 80014c4:	019b      	lsls	r3, r3, #6
 80014c6:	b25a      	sxtb	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	7c1b      	ldrb	r3, [r3, #16]
 80014cc:	015b      	lsls	r3, r3, #5
 80014ce:	b25b      	sxtb	r3, r3
 80014d0:	4313      	orrs	r3, r2
 80014d2:	b25a      	sxtb	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	7c5b      	ldrb	r3, [r3, #17]
 80014d8:	b25b      	sxtb	r3, r3
 80014da:	4313      	orrs	r3, r2
 80014dc:	b25b      	sxtb	r3, r3
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	775a      	strb	r2, [r3, #29]
	dev->REG2 = (dev->param.dev_Channel << 0);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	7c9a      	ldrb	r2, [r3, #18]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	779a      	strb	r2, [r3, #30]
	dev->REG3 = ((dev->param.RSSIByte_SW << 7) | (dev->param.TransmissionMethod << 6) | (dev->param.LBT_SW << 4) | (dev->param.WorCycle << 0));
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	7cdb      	ldrb	r3, [r3, #19]
 80014f0:	01db      	lsls	r3, r3, #7
 80014f2:	b25a      	sxtb	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	7d1b      	ldrb	r3, [r3, #20]
 80014f8:	019b      	lsls	r3, r3, #6
 80014fa:	b25b      	sxtb	r3, r3
 80014fc:	4313      	orrs	r3, r2
 80014fe:	b25a      	sxtb	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	7d5b      	ldrb	r3, [r3, #21]
 8001504:	011b      	lsls	r3, r3, #4
 8001506:	b25b      	sxtb	r3, r3
 8001508:	4313      	orrs	r3, r2
 800150a:	b25a      	sxtb	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	7d9b      	ldrb	r3, [r3, #22]
 8001510:	b25b      	sxtb	r3, r3
 8001512:	4313      	orrs	r3, r2
 8001514:	b25b      	sxtb	r3, r3
 8001516:	b2da      	uxtb	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	77da      	strb	r2, [r3, #31]
	dev->REG_CRYPT_H = 0;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	f883 2020 	strb.w	r2, [r3, #32]
	dev->REG_CRYPT_L = 0;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/*! Sets the selected parameter and sends it to the wireless communication device */
	SubSys_WirelessCom_Config_SET_REG(dev);
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f000 f807 	bl	8001540 <SubSys_WirelessCom_Config_SET_REG>

	/*! Read configuration register's value and checks with the correct value */
	 SubSys_WirelessCom_Config_READ_REG(dev);
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f000 f872 	bl	800161c <SubSys_WirelessCom_Config_READ_REG>

}
 8001538:	bf00      	nop
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <SubSys_WirelessCom_Config_SET_REG>:


void SubSys_WirelessCom_Config_SET_REG(SubSys_WirelesscomConfig_HandleTypeDef   *dev){
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]

	uint16_t cnt = 0;
 8001548:	2300      	movs	r3, #0
 800154a:	81fb      	strh	r3, [r7, #14]

		/*! Save register variables into the ParamsLoraToBeSend array for sending lora chip at once*/
		ParamsLoraToBeSend[cnt] = writeCmnd; 					cnt++;		/* Command name */
 800154c:	89fb      	ldrh	r3, [r7, #14]
 800154e:	4a32      	ldr	r2, [pc, #200]	; (8001618 <SubSys_WirelessCom_Config_SET_REG+0xd8>)
 8001550:	21c0      	movs	r1, #192	; 0xc0
 8001552:	54d1      	strb	r1, [r2, r3]
 8001554:	89fb      	ldrh	r3, [r7, #14]
 8001556:	3301      	adds	r3, #1
 8001558:	81fb      	strh	r3, [r7, #14]
		ParamsLoraToBeSend[cnt] = REG_BaseAddress; 				cnt++;		/* Starting addres */
 800155a:	89fb      	ldrh	r3, [r7, #14]
 800155c:	4a2e      	ldr	r2, [pc, #184]	; (8001618 <SubSys_WirelessCom_Config_SET_REG+0xd8>)
 800155e:	2100      	movs	r1, #0
 8001560:	54d1      	strb	r1, [r2, r3]
 8001562:	89fb      	ldrh	r3, [r7, #14]
 8001564:	3301      	adds	r3, #1
 8001566:	81fb      	strh	r3, [r7, #14]
		ParamsLoraToBeSend[cnt] = 0x08;							cnt++; 		/* Size of written bytes */
 8001568:	89fb      	ldrh	r3, [r7, #14]
 800156a:	4a2b      	ldr	r2, [pc, #172]	; (8001618 <SubSys_WirelessCom_Config_SET_REG+0xd8>)
 800156c:	2108      	movs	r1, #8
 800156e:	54d1      	strb	r1, [r2, r3]
 8001570:	89fb      	ldrh	r3, [r7, #14]
 8001572:	3301      	adds	r3, #1
 8001574:	81fb      	strh	r3, [r7, #14]
		ParamsLoraToBeSend[cnt] = dev->ADDH; 					cnt++; 		/* Addres High byte*/
 8001576:	89fb      	ldrh	r3, [r7, #14]
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	f892 1022 	ldrb.w	r1, [r2, #34]	; 0x22
 800157e:	4a26      	ldr	r2, [pc, #152]	; (8001618 <SubSys_WirelessCom_Config_SET_REG+0xd8>)
 8001580:	54d1      	strb	r1, [r2, r3]
 8001582:	89fb      	ldrh	r3, [r7, #14]
 8001584:	3301      	adds	r3, #1
 8001586:	81fb      	strh	r3, [r7, #14]
		ParamsLoraToBeSend[cnt] = dev->ADDL; 					cnt++;		/* Addres Low byte */
 8001588:	89fb      	ldrh	r3, [r7, #14]
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	f892 1023 	ldrb.w	r1, [r2, #35]	; 0x23
 8001590:	4a21      	ldr	r2, [pc, #132]	; (8001618 <SubSys_WirelessCom_Config_SET_REG+0xd8>)
 8001592:	54d1      	strb	r1, [r2, r3]
 8001594:	89fb      	ldrh	r3, [r7, #14]
 8001596:	3301      	adds	r3, #1
 8001598:	81fb      	strh	r3, [r7, #14]
		ParamsLoraToBeSend[cnt] = dev->REG0; 					cnt++;		/* Parameter register values*/
 800159a:	89fb      	ldrh	r3, [r7, #14]
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	7f11      	ldrb	r1, [r2, #28]
 80015a0:	4a1d      	ldr	r2, [pc, #116]	; (8001618 <SubSys_WirelessCom_Config_SET_REG+0xd8>)
 80015a2:	54d1      	strb	r1, [r2, r3]
 80015a4:	89fb      	ldrh	r3, [r7, #14]
 80015a6:	3301      	adds	r3, #1
 80015a8:	81fb      	strh	r3, [r7, #14]
		ParamsLoraToBeSend[cnt] = dev->REG1; 					cnt++;
 80015aa:	89fb      	ldrh	r3, [r7, #14]
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	7f51      	ldrb	r1, [r2, #29]
 80015b0:	4a19      	ldr	r2, [pc, #100]	; (8001618 <SubSys_WirelessCom_Config_SET_REG+0xd8>)
 80015b2:	54d1      	strb	r1, [r2, r3]
 80015b4:	89fb      	ldrh	r3, [r7, #14]
 80015b6:	3301      	adds	r3, #1
 80015b8:	81fb      	strh	r3, [r7, #14]
		ParamsLoraToBeSend[cnt] = dev->REG2; 					cnt++;
 80015ba:	89fb      	ldrh	r3, [r7, #14]
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	7f91      	ldrb	r1, [r2, #30]
 80015c0:	4a15      	ldr	r2, [pc, #84]	; (8001618 <SubSys_WirelessCom_Config_SET_REG+0xd8>)
 80015c2:	54d1      	strb	r1, [r2, r3]
 80015c4:	89fb      	ldrh	r3, [r7, #14]
 80015c6:	3301      	adds	r3, #1
 80015c8:	81fb      	strh	r3, [r7, #14]
		ParamsLoraToBeSend[cnt] = dev->REG3; 					cnt++;
 80015ca:	89fb      	ldrh	r3, [r7, #14]
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	7fd1      	ldrb	r1, [r2, #31]
 80015d0:	4a11      	ldr	r2, [pc, #68]	; (8001618 <SubSys_WirelessCom_Config_SET_REG+0xd8>)
 80015d2:	54d1      	strb	r1, [r2, r3]
 80015d4:	89fb      	ldrh	r3, [r7, #14]
 80015d6:	3301      	adds	r3, #1
 80015d8:	81fb      	strh	r3, [r7, #14]
		ParamsLoraToBeSend[cnt] = dev->REG_CRYPT_H; 			cnt++;
 80015da:	89fb      	ldrh	r3, [r7, #14]
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	f892 1020 	ldrb.w	r1, [r2, #32]
 80015e2:	4a0d      	ldr	r2, [pc, #52]	; (8001618 <SubSys_WirelessCom_Config_SET_REG+0xd8>)
 80015e4:	54d1      	strb	r1, [r2, r3]
 80015e6:	89fb      	ldrh	r3, [r7, #14]
 80015e8:	3301      	adds	r3, #1
 80015ea:	81fb      	strh	r3, [r7, #14]
		ParamsLoraToBeSend[cnt] = dev->REG_CRYPT_L; 			cnt++;
 80015ec:	89fb      	ldrh	r3, [r7, #14]
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	f892 1021 	ldrb.w	r1, [r2, #33]	; 0x21
 80015f4:	4a08      	ldr	r2, [pc, #32]	; (8001618 <SubSys_WirelessCom_Config_SET_REG+0xd8>)
 80015f6:	54d1      	strb	r1, [r2, r3]
 80015f8:	89fb      	ldrh	r3, [r7, #14]
 80015fa:	3301      	adds	r3, #1
 80015fc:	81fb      	strh	r3, [r7, #14]

	/*! Write all the array's values into the LoRa's registers */
	HAL_UART_Transmit(dev->interface.huart, ParamsLoraToBeSend, sizeof(ParamsLoraToBeSend), 1000);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6818      	ldr	r0, [r3, #0]
 8001602:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001606:	220b      	movs	r2, #11
 8001608:	4903      	ldr	r1, [pc, #12]	; (8001618 <SubSys_WirelessCom_Config_SET_REG+0xd8>)
 800160a:	f001 ffde 	bl	80035ca <HAL_UART_Transmit>

}
 800160e:	bf00      	nop
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	200001f4 	.word	0x200001f4

0800161c <SubSys_WirelessCom_Config_READ_REG>:


void SubSys_WirelessCom_Config_READ_REG(SubSys_WirelesscomConfig_HandleTypeDef    *dev){
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]

	uint16_t cnt = 0;
 8001624:	2300      	movs	r3, #0
 8001626:	827b      	strh	r3, [r7, #18]

	uint8_t ParamLoraforRead[3]={0};
 8001628:	4b2b      	ldr	r3, [pc, #172]	; (80016d8 <SubSys_WirelessCom_Config_READ_REG+0xbc>)
 800162a:	881b      	ldrh	r3, [r3, #0]
 800162c:	81bb      	strh	r3, [r7, #12]
 800162e:	2300      	movs	r3, #0
 8001630:	73bb      	strb	r3, [r7, #14]

	ParamLoraforRead[cnt] = readCmnd; 					cnt++;				/* Command name */
 8001632:	8a7b      	ldrh	r3, [r7, #18]
 8001634:	3318      	adds	r3, #24
 8001636:	443b      	add	r3, r7
 8001638:	22c1      	movs	r2, #193	; 0xc1
 800163a:	f803 2c0c 	strb.w	r2, [r3, #-12]
 800163e:	8a7b      	ldrh	r3, [r7, #18]
 8001640:	3301      	adds	r3, #1
 8001642:	827b      	strh	r3, [r7, #18]
	ParamLoraforRead[cnt] = REG_BaseAddress; 			cnt++;				/* Starting addres */
 8001644:	8a7b      	ldrh	r3, [r7, #18]
 8001646:	3318      	adds	r3, #24
 8001648:	443b      	add	r3, r7
 800164a:	2200      	movs	r2, #0
 800164c:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8001650:	8a7b      	ldrh	r3, [r7, #18]
 8001652:	3301      	adds	r3, #1
 8001654:	827b      	strh	r3, [r7, #18]
	ParamLoraforRead[cnt] = sizeof(ParamsLoraToBeGet); 	cnt++; 				/* Size of written bytes */
 8001656:	8a7b      	ldrh	r3, [r7, #18]
 8001658:	3318      	adds	r3, #24
 800165a:	443b      	add	r3, r7
 800165c:	220b      	movs	r2, #11
 800165e:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8001662:	8a7b      	ldrh	r3, [r7, #18]
 8001664:	3301      	adds	r3, #1
 8001666:	827b      	strh	r3, [r7, #18]
	HAL_Delay(10);
 8001668:	200a      	movs	r0, #10
 800166a:	f000 fc33 	bl	8001ed4 <HAL_Delay>
	/*! Send read command to get values from LoRa's chip */
	HAL_UART_Transmit(dev->interface.huart, ParamLoraforRead, 3, 1000);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6818      	ldr	r0, [r3, #0]
 8001672:	f107 010c 	add.w	r1, r7, #12
 8001676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800167a:	2203      	movs	r2, #3
 800167c:	f001 ffa5 	bl	80035ca <HAL_UART_Transmit>

	HAL_UARTEx_ReceiveToIdle_DMA(dev->interface.huart, ParamsLoraToBeGet, sizeof(ParamsLoraToBeGet));
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	220b      	movs	r2, #11
 8001686:	4915      	ldr	r1, [pc, #84]	; (80016dc <SubSys_WirelessCom_Config_READ_REG+0xc0>)
 8001688:	4618      	mov	r0, r3
 800168a:	f002 f830 	bl	80036ee <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(dev->interface.hdma_usart_rx, DMA_IT_HT);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f022 0208 	bic.w	r2, r2, #8
 80016a0:	601a      	str	r2, [r3, #0]


	for(int i = 3 ; i < sizeof(ParamsLoraToBeGet) ; i++)
 80016a2:	2303      	movs	r3, #3
 80016a4:	617b      	str	r3, [r7, #20]
 80016a6:	e00e      	b.n	80016c6 <SubSys_WirelessCom_Config_READ_REG+0xaa>
	{

		if(ParamsLoraToBeSend[i] != ParamsLoraToBeGet[i])
 80016a8:	4a0d      	ldr	r2, [pc, #52]	; (80016e0 <SubSys_WirelessCom_Config_READ_REG+0xc4>)
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	4413      	add	r3, r2
 80016ae:	781a      	ldrb	r2, [r3, #0]
 80016b0:	490a      	ldr	r1, [pc, #40]	; (80016dc <SubSys_WirelessCom_Config_READ_REG+0xc0>)
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	440b      	add	r3, r1
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d000      	beq.n	80016be <SubSys_WirelessCom_Config_READ_REG+0xa2>
		{
			/*Stop the algorithm until solving the problem*/
			while(1);
 80016bc:	e7fe      	b.n	80016bc <SubSys_WirelessCom_Config_READ_REG+0xa0>
		}
		else
		{
			continue;
 80016be:	bf00      	nop
	for(int i = 3 ; i < sizeof(ParamsLoraToBeGet) ; i++)
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	3301      	adds	r3, #1
 80016c4:	617b      	str	r3, [r7, #20]
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	2b0a      	cmp	r3, #10
 80016ca:	d9ed      	bls.n	80016a8 <SubSys_WirelessCom_Config_READ_REG+0x8c>
		}

	}
	__NOP();
 80016cc:	bf00      	nop

}
 80016ce:	bf00      	nop
 80016d0:	3718      	adds	r7, #24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	080077b4 	.word	0x080077b4
 80016dc:	20000200 	.word	0x20000200
 80016e0:	200001f4 	.word	0x200001f4

080016e4 <SubSys_WirelessCom_Config_WORK_MODE>:


void SubSys_WirelessCom_Config_WORK_MODE(SubSys_WirelesscomConfig_HandleTypeDef    *dev){
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]

	switch(dev->Mode_SW){
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	7ddb      	ldrb	r3, [r3, #23]
 80016f0:	2b03      	cmp	r3, #3
 80016f2:	d84f      	bhi.n	8001794 <SubSys_WirelessCom_Config_WORK_MODE+0xb0>
 80016f4:	a201      	add	r2, pc, #4	; (adr r2, 80016fc <SubSys_WirelessCom_Config_WORK_MODE+0x18>)
 80016f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016fa:	bf00      	nop
 80016fc:	0800170d 	.word	0x0800170d
 8001700:	0800172f 	.word	0x0800172f
 8001704:	08001751 	.word	0x08001751
 8001708:	08001773 	.word	0x08001773

		case NormalMode :	/*! UART and wireless channel are open, transparent transmission is on*/
			HAL_GPIO_WritePin(dev->interface.GPIOx, dev->LORA_PIN_M1, GPIO_PIN_RESET);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6858      	ldr	r0, [r3, #4]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	8b5b      	ldrh	r3, [r3, #26]
 8001714:	2200      	movs	r2, #0
 8001716:	4619      	mov	r1, r3
 8001718:	f001 fa98 	bl	8002c4c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(dev->interface.GPIOx, dev->LORA_PIN_M0, GPIO_PIN_RESET);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6858      	ldr	r0, [r3, #4]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	8b1b      	ldrh	r3, [r3, #24]
 8001724:	2200      	movs	r2, #0
 8001726:	4619      	mov	r1, r3
 8001728:	f001 fa90 	bl	8002c4c <HAL_GPIO_WritePin>
		break;
 800172c:	e032      	b.n	8001794 <SubSys_WirelessCom_Config_WORK_MODE+0xb0>

		case WORsending :	/*! WOR Transmitter (it sends packet in every period)*/
			HAL_GPIO_WritePin(dev->interface.GPIOx, dev->LORA_PIN_M1, GPIO_PIN_RESET);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6858      	ldr	r0, [r3, #4]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	8b5b      	ldrh	r3, [r3, #26]
 8001736:	2200      	movs	r2, #0
 8001738:	4619      	mov	r1, r3
 800173a:	f001 fa87 	bl	8002c4c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(dev->interface.GPIOx, dev->LORA_PIN_M0, GPIO_PIN_SET);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6858      	ldr	r0, [r3, #4]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	8b1b      	ldrh	r3, [r3, #24]
 8001746:	2201      	movs	r2, #1
 8001748:	4619      	mov	r1, r3
 800174a:	f001 fa7f 	bl	8002c4c <HAL_GPIO_WritePin>
		break;
 800174e:	e021      	b.n	8001794 <SubSys_WirelessCom_Config_WORK_MODE+0xb0>

		case WORreceiving :	/*! WOR Receiver (it sends packet in every period)*/
			HAL_GPIO_WritePin(dev->interface.GPIOx, dev->LORA_PIN_M1, GPIO_PIN_SET);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6858      	ldr	r0, [r3, #4]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	8b5b      	ldrh	r3, [r3, #26]
 8001758:	2201      	movs	r2, #1
 800175a:	4619      	mov	r1, r3
 800175c:	f001 fa76 	bl	8002c4c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(dev->interface.GPIOx, dev->LORA_PIN_M0, GPIO_PIN_RESET);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6858      	ldr	r0, [r3, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	8b1b      	ldrh	r3, [r3, #24]
 8001768:	2200      	movs	r2, #0
 800176a:	4619      	mov	r1, r3
 800176c:	f001 fa6e 	bl	8002c4c <HAL_GPIO_WritePin>
		break;
 8001770:	e010      	b.n	8001794 <SubSys_WirelessCom_Config_WORK_MODE+0xb0>

		case DeepSleep :	/*! Module goes to sleep so provides you to configure settings*/
			HAL_GPIO_WritePin(dev->interface.GPIOx, dev->LORA_PIN_M1, GPIO_PIN_SET);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6858      	ldr	r0, [r3, #4]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	8b5b      	ldrh	r3, [r3, #26]
 800177a:	2201      	movs	r2, #1
 800177c:	4619      	mov	r1, r3
 800177e:	f001 fa65 	bl	8002c4c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(dev->interface.GPIOx, dev->LORA_PIN_M0, GPIO_PIN_SET);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6858      	ldr	r0, [r3, #4]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	8b1b      	ldrh	r3, [r3, #24]
 800178a:	2201      	movs	r2, #1
 800178c:	4619      	mov	r1, r3
 800178e:	f001 fa5d 	bl	8002c4c <HAL_GPIO_WritePin>
		break;
 8001792:	bf00      	nop

	}

}
 8001794:	bf00      	nop
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017a0:	f000 fb26 	bl	8001df0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017a4:	f000 f82e 	bl	8001804 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017a8:	f000 f8e0 	bl	800196c <MX_GPIO_Init>
  MX_DMA_Init();
 80017ac:	f000 f8be 	bl	800192c <MX_DMA_Init>
  MX_USART1_UART_Init();
 80017b0:	f000 f892 	bl	80018d8 <MX_USART1_UART_Init>
  	   * @note  : If you use dma for receiving and transmiting, fill it parameters that
  		  		  come after channel info
  	   */
    		#ifdef SAT_PERIPHERALS_LIB_INC_SUBSYS_WIRELESSCOM_CONFIG_H_

    	  	  dev_WirelessComConfig.interface.huart = &huart1;
 80017b4:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <main+0x54>)
 80017b6:	4a0f      	ldr	r2, [pc, #60]	; (80017f4 <main+0x58>)
 80017b8:	601a      	str	r2, [r3, #0]
    	  	  dev_WirelessComConfig.interface.GPIOx = GPIOA;
 80017ba:	4b0d      	ldr	r3, [pc, #52]	; (80017f0 <main+0x54>)
 80017bc:	4a0e      	ldr	r2, [pc, #56]	; (80017f8 <main+0x5c>)
 80017be:	605a      	str	r2, [r3, #4]
    	  	  dev_WirelessComConfig.LORA_PIN_M0= GPIO_PIN_12;
 80017c0:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <main+0x54>)
 80017c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017c6:	831a      	strh	r2, [r3, #24]
    	  	  dev_WirelessComConfig.LORA_PIN_M1= GPIO_PIN_11;
 80017c8:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <main+0x54>)
 80017ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017ce:	835a      	strh	r2, [r3, #26]
    	  	  dev_WirelessComConfig.Mode_SW = DeepSleep; 		/*! Module goes to sleep, that provides you to configure settings */
 80017d0:	4b07      	ldr	r3, [pc, #28]	; (80017f0 <main+0x54>)
 80017d2:	2203      	movs	r2, #3
 80017d4:	75da      	strb	r2, [r3, #23]
    	  	  dev_WirelessComConfig.interface.hdma_usart_rx = &hdma_usart1_rx;
 80017d6:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <main+0x54>)
 80017d8:	4a08      	ldr	r2, [pc, #32]	; (80017fc <main+0x60>)
 80017da:	609a      	str	r2, [r3, #8]

    	  	  //HAL_UARTEx_ReceiveToIdle_DMA(dev_WirelessComConfig.interface.huart, ParamsLoraToBeGet, sizeof(ParamsLoraToBeGet));


    		  SubSys_WirelessCom_Config_Init(&dev_WirelessComConfig);
 80017dc:	4804      	ldr	r0, [pc, #16]	; (80017f0 <main+0x54>)
 80017de:	f7ff fe2d 	bl	800143c <SubSys_WirelessCom_Config_Init>
	  /**
	   * fonk6_lora için neler kullanılacak hangi değişkenler rol oynayacak
	   *
	   *
	   */
	  SubSys_WirelessCom_Telemetry_Transfer_From_To(Sat_Carrier, Sat_Payload, &dev_WirelessComApp);
 80017e2:	4a07      	ldr	r2, [pc, #28]	; (8001800 <main+0x64>)
 80017e4:	2101      	movs	r1, #1
 80017e6:	2000      	movs	r0, #0
 80017e8:	f7ff fb64 	bl	8000eb4 <SubSys_WirelessCom_Telemetry_Transfer_From_To>
 80017ec:	e7f9      	b.n	80017e2 <main+0x46>
 80017ee:	bf00      	nop
 80017f0:	200002b0 	.word	0x200002b0
 80017f4:	2000020c 	.word	0x2000020c
 80017f8:	40020000 	.word	0x40020000
 80017fc:	20000250 	.word	0x20000250
 8001800:	200002d4 	.word	0x200002d4

08001804 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b094      	sub	sp, #80	; 0x50
 8001808:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800180a:	f107 0320 	add.w	r3, r7, #32
 800180e:	2230      	movs	r2, #48	; 0x30
 8001810:	2100      	movs	r1, #0
 8001812:	4618      	mov	r0, r3
 8001814:	f003 fe45 	bl	80054a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001818:	f107 030c 	add.w	r3, r7, #12
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001828:	2300      	movs	r3, #0
 800182a:	60bb      	str	r3, [r7, #8]
 800182c:	4b28      	ldr	r3, [pc, #160]	; (80018d0 <SystemClock_Config+0xcc>)
 800182e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001830:	4a27      	ldr	r2, [pc, #156]	; (80018d0 <SystemClock_Config+0xcc>)
 8001832:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001836:	6413      	str	r3, [r2, #64]	; 0x40
 8001838:	4b25      	ldr	r3, [pc, #148]	; (80018d0 <SystemClock_Config+0xcc>)
 800183a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001840:	60bb      	str	r3, [r7, #8]
 8001842:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001844:	2300      	movs	r3, #0
 8001846:	607b      	str	r3, [r7, #4]
 8001848:	4b22      	ldr	r3, [pc, #136]	; (80018d4 <SystemClock_Config+0xd0>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001850:	4a20      	ldr	r2, [pc, #128]	; (80018d4 <SystemClock_Config+0xd0>)
 8001852:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001856:	6013      	str	r3, [r2, #0]
 8001858:	4b1e      	ldr	r3, [pc, #120]	; (80018d4 <SystemClock_Config+0xd0>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001860:	607b      	str	r3, [r7, #4]
 8001862:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001864:	2302      	movs	r3, #2
 8001866:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001868:	2301      	movs	r3, #1
 800186a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800186c:	2310      	movs	r3, #16
 800186e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001870:	2302      	movs	r3, #2
 8001872:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001874:	2300      	movs	r3, #0
 8001876:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001878:	2308      	movs	r3, #8
 800187a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 800187c:	2354      	movs	r3, #84	; 0x54
 800187e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001880:	2302      	movs	r3, #2
 8001882:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001884:	2304      	movs	r3, #4
 8001886:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001888:	f107 0320 	add.w	r3, r7, #32
 800188c:	4618      	mov	r0, r3
 800188e:	f001 f9f7 	bl	8002c80 <HAL_RCC_OscConfig>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001898:	f000 f8ba 	bl	8001a10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800189c:	230f      	movs	r3, #15
 800189e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018a0:	2302      	movs	r3, #2
 80018a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018ae:	2300      	movs	r3, #0
 80018b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018b2:	f107 030c 	add.w	r3, r7, #12
 80018b6:	2102      	movs	r1, #2
 80018b8:	4618      	mov	r0, r3
 80018ba:	f001 fc59 	bl	8003170 <HAL_RCC_ClockConfig>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80018c4:	f000 f8a4 	bl	8001a10 <Error_Handler>
  }
}
 80018c8:	bf00      	nop
 80018ca:	3750      	adds	r7, #80	; 0x50
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40023800 	.word	0x40023800
 80018d4:	40007000 	.word	0x40007000

080018d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018dc:	4b11      	ldr	r3, [pc, #68]	; (8001924 <MX_USART1_UART_Init+0x4c>)
 80018de:	4a12      	ldr	r2, [pc, #72]	; (8001928 <MX_USART1_UART_Init+0x50>)
 80018e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80018e2:	4b10      	ldr	r3, [pc, #64]	; (8001924 <MX_USART1_UART_Init+0x4c>)
 80018e4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80018e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018ea:	4b0e      	ldr	r3, [pc, #56]	; (8001924 <MX_USART1_UART_Init+0x4c>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018f0:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <MX_USART1_UART_Init+0x4c>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018f6:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <MX_USART1_UART_Init+0x4c>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018fc:	4b09      	ldr	r3, [pc, #36]	; (8001924 <MX_USART1_UART_Init+0x4c>)
 80018fe:	220c      	movs	r2, #12
 8001900:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001902:	4b08      	ldr	r3, [pc, #32]	; (8001924 <MX_USART1_UART_Init+0x4c>)
 8001904:	2200      	movs	r2, #0
 8001906:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001908:	4b06      	ldr	r3, [pc, #24]	; (8001924 <MX_USART1_UART_Init+0x4c>)
 800190a:	2200      	movs	r2, #0
 800190c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800190e:	4805      	ldr	r0, [pc, #20]	; (8001924 <MX_USART1_UART_Init+0x4c>)
 8001910:	f001 fe0e 	bl	8003530 <HAL_UART_Init>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800191a:	f000 f879 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	2000020c 	.word	0x2000020c
 8001928:	40011000 	.word	0x40011000

0800192c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	607b      	str	r3, [r7, #4]
 8001936:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <MX_DMA_Init+0x3c>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	4a0b      	ldr	r2, [pc, #44]	; (8001968 <MX_DMA_Init+0x3c>)
 800193c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001940:	6313      	str	r3, [r2, #48]	; 0x30
 8001942:	4b09      	ldr	r3, [pc, #36]	; (8001968 <MX_DMA_Init+0x3c>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800194a:	607b      	str	r3, [r7, #4]
 800194c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800194e:	2200      	movs	r2, #0
 8001950:	2100      	movs	r1, #0
 8001952:	203a      	movs	r0, #58	; 0x3a
 8001954:	f000 fbbd 	bl	80020d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001958:	203a      	movs	r0, #58	; 0x3a
 800195a:	f000 fbd6 	bl	800210a <HAL_NVIC_EnableIRQ>

}
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40023800 	.word	0x40023800

0800196c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b088      	sub	sp, #32
 8001970:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001972:	f107 030c 	add.w	r3, r7, #12
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	605a      	str	r2, [r3, #4]
 800197c:	609a      	str	r2, [r3, #8]
 800197e:	60da      	str	r2, [r3, #12]
 8001980:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	60bb      	str	r3, [r7, #8]
 8001986:	4b20      	ldr	r3, [pc, #128]	; (8001a08 <MX_GPIO_Init+0x9c>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	4a1f      	ldr	r2, [pc, #124]	; (8001a08 <MX_GPIO_Init+0x9c>)
 800198c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001990:	6313      	str	r3, [r2, #48]	; 0x30
 8001992:	4b1d      	ldr	r3, [pc, #116]	; (8001a08 <MX_GPIO_Init+0x9c>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800199a:	60bb      	str	r3, [r7, #8]
 800199c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	607b      	str	r3, [r7, #4]
 80019a2:	4b19      	ldr	r3, [pc, #100]	; (8001a08 <MX_GPIO_Init+0x9c>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	4a18      	ldr	r2, [pc, #96]	; (8001a08 <MX_GPIO_Init+0x9c>)
 80019a8:	f043 0302 	orr.w	r3, r3, #2
 80019ac:	6313      	str	r3, [r2, #48]	; 0x30
 80019ae:	4b16      	ldr	r3, [pc, #88]	; (8001a08 <MX_GPIO_Init+0x9c>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	607b      	str	r3, [r7, #4]
 80019b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	603b      	str	r3, [r7, #0]
 80019be:	4b12      	ldr	r3, [pc, #72]	; (8001a08 <MX_GPIO_Init+0x9c>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	4a11      	ldr	r2, [pc, #68]	; (8001a08 <MX_GPIO_Init+0x9c>)
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ca:	4b0f      	ldr	r3, [pc, #60]	; (8001a08 <MX_GPIO_Init+0x9c>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	603b      	str	r3, [r7, #0]
 80019d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LoRa_M0_Pin|LoRa_M1_Pin, GPIO_PIN_RESET);
 80019d6:	2200      	movs	r2, #0
 80019d8:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80019dc:	480b      	ldr	r0, [pc, #44]	; (8001a0c <MX_GPIO_Init+0xa0>)
 80019de:	f001 f935 	bl	8002c4c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LoRa_M0_Pin LoRa_M1_Pin */
  GPIO_InitStruct.Pin = LoRa_M0_Pin|LoRa_M1_Pin;
 80019e2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80019e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e8:	2301      	movs	r3, #1
 80019ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f0:	2300      	movs	r3, #0
 80019f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f4:	f107 030c 	add.w	r3, r7, #12
 80019f8:	4619      	mov	r1, r3
 80019fa:	4804      	ldr	r0, [pc, #16]	; (8001a0c <MX_GPIO_Init+0xa0>)
 80019fc:	f000 ffa2 	bl	8002944 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a00:	bf00      	nop
 8001a02:	3720      	adds	r7, #32
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	40020400 	.word	0x40020400

08001a10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a14:	b672      	cpsid	i
}
 8001a16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a18:	e7fe      	b.n	8001a18 <Error_Handler+0x8>
	...

08001a1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	607b      	str	r3, [r7, #4]
 8001a26:	4b10      	ldr	r3, [pc, #64]	; (8001a68 <HAL_MspInit+0x4c>)
 8001a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2a:	4a0f      	ldr	r2, [pc, #60]	; (8001a68 <HAL_MspInit+0x4c>)
 8001a2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a30:	6453      	str	r3, [r2, #68]	; 0x44
 8001a32:	4b0d      	ldr	r3, [pc, #52]	; (8001a68 <HAL_MspInit+0x4c>)
 8001a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a3a:	607b      	str	r3, [r7, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	603b      	str	r3, [r7, #0]
 8001a42:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <HAL_MspInit+0x4c>)
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	4a08      	ldr	r2, [pc, #32]	; (8001a68 <HAL_MspInit+0x4c>)
 8001a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a4e:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <HAL_MspInit+0x4c>)
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a56:	603b      	str	r3, [r7, #0]
 8001a58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	40023800 	.word	0x40023800

08001a6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08a      	sub	sp, #40	; 0x28
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a74:	f107 0314 	add.w	r3, r7, #20
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
 8001a80:	60da      	str	r2, [r3, #12]
 8001a82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a34      	ldr	r2, [pc, #208]	; (8001b5c <HAL_UART_MspInit+0xf0>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d162      	bne.n	8001b54 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	613b      	str	r3, [r7, #16]
 8001a92:	4b33      	ldr	r3, [pc, #204]	; (8001b60 <HAL_UART_MspInit+0xf4>)
 8001a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a96:	4a32      	ldr	r2, [pc, #200]	; (8001b60 <HAL_UART_MspInit+0xf4>)
 8001a98:	f043 0310 	orr.w	r3, r3, #16
 8001a9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a9e:	4b30      	ldr	r3, [pc, #192]	; (8001b60 <HAL_UART_MspInit+0xf4>)
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa2:	f003 0310 	and.w	r3, r3, #16
 8001aa6:	613b      	str	r3, [r7, #16]
 8001aa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	4b2c      	ldr	r3, [pc, #176]	; (8001b60 <HAL_UART_MspInit+0xf4>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	4a2b      	ldr	r2, [pc, #172]	; (8001b60 <HAL_UART_MspInit+0xf4>)
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aba:	4b29      	ldr	r3, [pc, #164]	; (8001b60 <HAL_UART_MspInit+0xf4>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ac6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001aca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001acc:	2302      	movs	r3, #2
 8001ace:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ad8:	2307      	movs	r3, #7
 8001ada:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001adc:	f107 0314 	add.w	r3, r7, #20
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4820      	ldr	r0, [pc, #128]	; (8001b64 <HAL_UART_MspInit+0xf8>)
 8001ae4:	f000 ff2e 	bl	8002944 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001ae8:	4b1f      	ldr	r3, [pc, #124]	; (8001b68 <HAL_UART_MspInit+0xfc>)
 8001aea:	4a20      	ldr	r2, [pc, #128]	; (8001b6c <HAL_UART_MspInit+0x100>)
 8001aec:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001aee:	4b1e      	ldr	r3, [pc, #120]	; (8001b68 <HAL_UART_MspInit+0xfc>)
 8001af0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001af4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001af6:	4b1c      	ldr	r3, [pc, #112]	; (8001b68 <HAL_UART_MspInit+0xfc>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001afc:	4b1a      	ldr	r3, [pc, #104]	; (8001b68 <HAL_UART_MspInit+0xfc>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b02:	4b19      	ldr	r3, [pc, #100]	; (8001b68 <HAL_UART_MspInit+0xfc>)
 8001b04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b08:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b0a:	4b17      	ldr	r3, [pc, #92]	; (8001b68 <HAL_UART_MspInit+0xfc>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b10:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <HAL_UART_MspInit+0xfc>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001b16:	4b14      	ldr	r3, [pc, #80]	; (8001b68 <HAL_UART_MspInit+0xfc>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b1c:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <HAL_UART_MspInit+0xfc>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b22:	4b11      	ldr	r3, [pc, #68]	; (8001b68 <HAL_UART_MspInit+0xfc>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001b28:	480f      	ldr	r0, [pc, #60]	; (8001b68 <HAL_UART_MspInit+0xfc>)
 8001b2a:	f000 fb09 	bl	8002140 <HAL_DMA_Init>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001b34:	f7ff ff6c 	bl	8001a10 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4a0b      	ldr	r2, [pc, #44]	; (8001b68 <HAL_UART_MspInit+0xfc>)
 8001b3c:	639a      	str	r2, [r3, #56]	; 0x38
 8001b3e:	4a0a      	ldr	r2, [pc, #40]	; (8001b68 <HAL_UART_MspInit+0xfc>)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b44:	2200      	movs	r2, #0
 8001b46:	2100      	movs	r1, #0
 8001b48:	2025      	movs	r0, #37	; 0x25
 8001b4a:	f000 fac2 	bl	80020d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b4e:	2025      	movs	r0, #37	; 0x25
 8001b50:	f000 fadb 	bl	800210a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b54:	bf00      	nop
 8001b56:	3728      	adds	r7, #40	; 0x28
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40011000 	.word	0x40011000
 8001b60:	40023800 	.word	0x40023800
 8001b64:	40020000 	.word	0x40020000
 8001b68:	20000250 	.word	0x20000250
 8001b6c:	40026440 	.word	0x40026440

08001b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b74:	e7fe      	b.n	8001b74 <NMI_Handler+0x4>

08001b76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b76:	b480      	push	{r7}
 8001b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b7a:	e7fe      	b.n	8001b7a <HardFault_Handler+0x4>

08001b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b80:	e7fe      	b.n	8001b80 <MemManage_Handler+0x4>

08001b82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b82:	b480      	push	{r7}
 8001b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b86:	e7fe      	b.n	8001b86 <BusFault_Handler+0x4>

08001b88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b8c:	e7fe      	b.n	8001b8c <UsageFault_Handler+0x4>

08001b8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b92:	bf00      	nop
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ba0:	bf00      	nop
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001baa:	b480      	push	{r7}
 8001bac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bbc:	f000 f96a 	bl	8001e94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bc0:	bf00      	nop
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001bc8:	4802      	ldr	r0, [pc, #8]	; (8001bd4 <USART1_IRQHandler+0x10>)
 8001bca:	f001 fdf5 	bl	80037b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	2000020c 	.word	0x2000020c

08001bd8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001bdc:	4802      	ldr	r0, [pc, #8]	; (8001be8 <DMA2_Stream2_IRQHandler+0x10>)
 8001bde:	f000 fc47 	bl	8002470 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	20000250 	.word	0x20000250

08001bec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  return 1;
 8001bf0:	2301      	movs	r3, #1
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <_kill>:

int _kill(int pid, int sig)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c06:	f003 fc9f 	bl	8005548 <__errno>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2216      	movs	r2, #22
 8001c0e:	601a      	str	r2, [r3, #0]
  return -1;
 8001c10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <_exit>:

void _exit (int status)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c24:	f04f 31ff 	mov.w	r1, #4294967295
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f7ff ffe7 	bl	8001bfc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c2e:	e7fe      	b.n	8001c2e <_exit+0x12>

08001c30 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]
 8001c40:	e00a      	b.n	8001c58 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c42:	f3af 8000 	nop.w
 8001c46:	4601      	mov	r1, r0
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	1c5a      	adds	r2, r3, #1
 8001c4c:	60ba      	str	r2, [r7, #8]
 8001c4e:	b2ca      	uxtb	r2, r1
 8001c50:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	3301      	adds	r3, #1
 8001c56:	617b      	str	r3, [r7, #20]
 8001c58:	697a      	ldr	r2, [r7, #20]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	dbf0      	blt.n	8001c42 <_read+0x12>
  }

  return len;
 8001c60:	687b      	ldr	r3, [r7, #4]
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3718      	adds	r7, #24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b086      	sub	sp, #24
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	60f8      	str	r0, [r7, #12]
 8001c72:	60b9      	str	r1, [r7, #8]
 8001c74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c76:	2300      	movs	r3, #0
 8001c78:	617b      	str	r3, [r7, #20]
 8001c7a:	e009      	b.n	8001c90 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	1c5a      	adds	r2, r3, #1
 8001c80:	60ba      	str	r2, [r7, #8]
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	617b      	str	r3, [r7, #20]
 8001c90:	697a      	ldr	r2, [r7, #20]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	dbf1      	blt.n	8001c7c <_write+0x12>
  }
  return len;
 8001c98:	687b      	ldr	r3, [r7, #4]
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3718      	adds	r7, #24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <_close>:

int _close(int file)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001caa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
 8001cc2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cca:	605a      	str	r2, [r3, #4]
  return 0;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr

08001cda <_isatty>:

int _isatty(int file)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b083      	sub	sp, #12
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ce2:	2301      	movs	r3, #1
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3714      	adds	r7, #20
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
	...

08001d0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d14:	4a14      	ldr	r2, [pc, #80]	; (8001d68 <_sbrk+0x5c>)
 8001d16:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <_sbrk+0x60>)
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d20:	4b13      	ldr	r3, [pc, #76]	; (8001d70 <_sbrk+0x64>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d102      	bne.n	8001d2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d28:	4b11      	ldr	r3, [pc, #68]	; (8001d70 <_sbrk+0x64>)
 8001d2a:	4a12      	ldr	r2, [pc, #72]	; (8001d74 <_sbrk+0x68>)
 8001d2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d2e:	4b10      	ldr	r3, [pc, #64]	; (8001d70 <_sbrk+0x64>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4413      	add	r3, r2
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d207      	bcs.n	8001d4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d3c:	f003 fc04 	bl	8005548 <__errno>
 8001d40:	4603      	mov	r3, r0
 8001d42:	220c      	movs	r2, #12
 8001d44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d46:	f04f 33ff 	mov.w	r3, #4294967295
 8001d4a:	e009      	b.n	8001d60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d4c:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <_sbrk+0x64>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d52:	4b07      	ldr	r3, [pc, #28]	; (8001d70 <_sbrk+0x64>)
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4413      	add	r3, r2
 8001d5a:	4a05      	ldr	r2, [pc, #20]	; (8001d70 <_sbrk+0x64>)
 8001d5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3718      	adds	r7, #24
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	20010000 	.word	0x20010000
 8001d6c:	00000400 	.word	0x00000400
 8001d70:	200004f4 	.word	0x200004f4
 8001d74:	20000648 	.word	0x20000648

08001d78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d7c:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <SystemInit+0x20>)
 8001d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d82:	4a05      	ldr	r2, [pc, #20]	; (8001d98 <SystemInit+0x20>)
 8001d84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	e000ed00 	.word	0xe000ed00

08001d9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dd4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001da0:	480d      	ldr	r0, [pc, #52]	; (8001dd8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001da2:	490e      	ldr	r1, [pc, #56]	; (8001ddc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001da4:	4a0e      	ldr	r2, [pc, #56]	; (8001de0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001da6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001da8:	e002      	b.n	8001db0 <LoopCopyDataInit>

08001daa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001daa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dae:	3304      	adds	r3, #4

08001db0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001db0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001db2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001db4:	d3f9      	bcc.n	8001daa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001db6:	4a0b      	ldr	r2, [pc, #44]	; (8001de4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001db8:	4c0b      	ldr	r4, [pc, #44]	; (8001de8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001dba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dbc:	e001      	b.n	8001dc2 <LoopFillZerobss>

08001dbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dc0:	3204      	adds	r2, #4

08001dc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dc4:	d3fb      	bcc.n	8001dbe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001dc6:	f7ff ffd7 	bl	8001d78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dca:	f003 fbc3 	bl	8005554 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dce:	f7ff fce5 	bl	800179c <main>
  bx  lr    
 8001dd2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001dd4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001dd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ddc:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001de0:	08007b5c 	.word	0x08007b5c
  ldr r2, =_sbss
 8001de4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001de8:	20000648 	.word	0x20000648

08001dec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dec:	e7fe      	b.n	8001dec <ADC_IRQHandler>
	...

08001df0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001df4:	4b0e      	ldr	r3, [pc, #56]	; (8001e30 <HAL_Init+0x40>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a0d      	ldr	r2, [pc, #52]	; (8001e30 <HAL_Init+0x40>)
 8001dfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dfe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e00:	4b0b      	ldr	r3, [pc, #44]	; (8001e30 <HAL_Init+0x40>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a0a      	ldr	r2, [pc, #40]	; (8001e30 <HAL_Init+0x40>)
 8001e06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e0c:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <HAL_Init+0x40>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a07      	ldr	r2, [pc, #28]	; (8001e30 <HAL_Init+0x40>)
 8001e12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e18:	2003      	movs	r0, #3
 8001e1a:	f000 f94f 	bl	80020bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e1e:	200f      	movs	r0, #15
 8001e20:	f000 f808 	bl	8001e34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e24:	f7ff fdfa 	bl	8001a1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40023c00 	.word	0x40023c00

08001e34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e3c:	4b12      	ldr	r3, [pc, #72]	; (8001e88 <HAL_InitTick+0x54>)
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	4b12      	ldr	r3, [pc, #72]	; (8001e8c <HAL_InitTick+0x58>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	4619      	mov	r1, r3
 8001e46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e52:	4618      	mov	r0, r3
 8001e54:	f000 f967 	bl	8002126 <HAL_SYSTICK_Config>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e00e      	b.n	8001e80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2b0f      	cmp	r3, #15
 8001e66:	d80a      	bhi.n	8001e7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e68:	2200      	movs	r2, #0
 8001e6a:	6879      	ldr	r1, [r7, #4]
 8001e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e70:	f000 f92f 	bl	80020d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e74:	4a06      	ldr	r2, [pc, #24]	; (8001e90 <HAL_InitTick+0x5c>)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	e000      	b.n	8001e80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3708      	adds	r7, #8
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	20000000 	.word	0x20000000
 8001e8c:	20000008 	.word	0x20000008
 8001e90:	20000004 	.word	0x20000004

08001e94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e98:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <HAL_IncTick+0x20>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <HAL_IncTick+0x24>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	4a04      	ldr	r2, [pc, #16]	; (8001eb8 <HAL_IncTick+0x24>)
 8001ea6:	6013      	str	r3, [r2, #0]
}
 8001ea8:	bf00      	nop
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	20000008 	.word	0x20000008
 8001eb8:	200004f8 	.word	0x200004f8

08001ebc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  return uwTick;
 8001ec0:	4b03      	ldr	r3, [pc, #12]	; (8001ed0 <HAL_GetTick+0x14>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	200004f8 	.word	0x200004f8

08001ed4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001edc:	f7ff ffee 	bl	8001ebc <HAL_GetTick>
 8001ee0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eec:	d005      	beq.n	8001efa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eee:	4b0a      	ldr	r3, [pc, #40]	; (8001f18 <HAL_Delay+0x44>)
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001efa:	bf00      	nop
 8001efc:	f7ff ffde 	bl	8001ebc <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d8f7      	bhi.n	8001efc <HAL_Delay+0x28>
  {
  }
}
 8001f0c:	bf00      	nop
 8001f0e:	bf00      	nop
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20000008 	.word	0x20000008

08001f1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f003 0307 	and.w	r3, r3, #7
 8001f2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f2c:	4b0c      	ldr	r3, [pc, #48]	; (8001f60 <__NVIC_SetPriorityGrouping+0x44>)
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f32:	68ba      	ldr	r2, [r7, #8]
 8001f34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f38:	4013      	ands	r3, r2
 8001f3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f4e:	4a04      	ldr	r2, [pc, #16]	; (8001f60 <__NVIC_SetPriorityGrouping+0x44>)
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	60d3      	str	r3, [r2, #12]
}
 8001f54:	bf00      	nop
 8001f56:	3714      	adds	r7, #20
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	e000ed00 	.word	0xe000ed00

08001f64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f68:	4b04      	ldr	r3, [pc, #16]	; (8001f7c <__NVIC_GetPriorityGrouping+0x18>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	0a1b      	lsrs	r3, r3, #8
 8001f6e:	f003 0307 	and.w	r3, r3, #7
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr
 8001f7c:	e000ed00 	.word	0xe000ed00

08001f80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	db0b      	blt.n	8001faa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f92:	79fb      	ldrb	r3, [r7, #7]
 8001f94:	f003 021f 	and.w	r2, r3, #31
 8001f98:	4907      	ldr	r1, [pc, #28]	; (8001fb8 <__NVIC_EnableIRQ+0x38>)
 8001f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9e:	095b      	lsrs	r3, r3, #5
 8001fa0:	2001      	movs	r0, #1
 8001fa2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	e000e100 	.word	0xe000e100

08001fbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	6039      	str	r1, [r7, #0]
 8001fc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	db0a      	blt.n	8001fe6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	b2da      	uxtb	r2, r3
 8001fd4:	490c      	ldr	r1, [pc, #48]	; (8002008 <__NVIC_SetPriority+0x4c>)
 8001fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fda:	0112      	lsls	r2, r2, #4
 8001fdc:	b2d2      	uxtb	r2, r2
 8001fde:	440b      	add	r3, r1
 8001fe0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fe4:	e00a      	b.n	8001ffc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	b2da      	uxtb	r2, r3
 8001fea:	4908      	ldr	r1, [pc, #32]	; (800200c <__NVIC_SetPriority+0x50>)
 8001fec:	79fb      	ldrb	r3, [r7, #7]
 8001fee:	f003 030f 	and.w	r3, r3, #15
 8001ff2:	3b04      	subs	r3, #4
 8001ff4:	0112      	lsls	r2, r2, #4
 8001ff6:	b2d2      	uxtb	r2, r2
 8001ff8:	440b      	add	r3, r1
 8001ffa:	761a      	strb	r2, [r3, #24]
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	e000e100 	.word	0xe000e100
 800200c:	e000ed00 	.word	0xe000ed00

08002010 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002010:	b480      	push	{r7}
 8002012:	b089      	sub	sp, #36	; 0x24
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	f1c3 0307 	rsb	r3, r3, #7
 800202a:	2b04      	cmp	r3, #4
 800202c:	bf28      	it	cs
 800202e:	2304      	movcs	r3, #4
 8002030:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	3304      	adds	r3, #4
 8002036:	2b06      	cmp	r3, #6
 8002038:	d902      	bls.n	8002040 <NVIC_EncodePriority+0x30>
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	3b03      	subs	r3, #3
 800203e:	e000      	b.n	8002042 <NVIC_EncodePriority+0x32>
 8002040:	2300      	movs	r3, #0
 8002042:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002044:	f04f 32ff 	mov.w	r2, #4294967295
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	43da      	mvns	r2, r3
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	401a      	ands	r2, r3
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002058:	f04f 31ff 	mov.w	r1, #4294967295
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	fa01 f303 	lsl.w	r3, r1, r3
 8002062:	43d9      	mvns	r1, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002068:	4313      	orrs	r3, r2
         );
}
 800206a:	4618      	mov	r0, r3
 800206c:	3724      	adds	r7, #36	; 0x24
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
	...

08002078 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	3b01      	subs	r3, #1
 8002084:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002088:	d301      	bcc.n	800208e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800208a:	2301      	movs	r3, #1
 800208c:	e00f      	b.n	80020ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800208e:	4a0a      	ldr	r2, [pc, #40]	; (80020b8 <SysTick_Config+0x40>)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3b01      	subs	r3, #1
 8002094:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002096:	210f      	movs	r1, #15
 8002098:	f04f 30ff 	mov.w	r0, #4294967295
 800209c:	f7ff ff8e 	bl	8001fbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020a0:	4b05      	ldr	r3, [pc, #20]	; (80020b8 <SysTick_Config+0x40>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020a6:	4b04      	ldr	r3, [pc, #16]	; (80020b8 <SysTick_Config+0x40>)
 80020a8:	2207      	movs	r2, #7
 80020aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	e000e010 	.word	0xe000e010

080020bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f7ff ff29 	bl	8001f1c <__NVIC_SetPriorityGrouping>
}
 80020ca:	bf00      	nop
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b086      	sub	sp, #24
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	4603      	mov	r3, r0
 80020da:	60b9      	str	r1, [r7, #8]
 80020dc:	607a      	str	r2, [r7, #4]
 80020de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020e0:	2300      	movs	r3, #0
 80020e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020e4:	f7ff ff3e 	bl	8001f64 <__NVIC_GetPriorityGrouping>
 80020e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	68b9      	ldr	r1, [r7, #8]
 80020ee:	6978      	ldr	r0, [r7, #20]
 80020f0:	f7ff ff8e 	bl	8002010 <NVIC_EncodePriority>
 80020f4:	4602      	mov	r2, r0
 80020f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020fa:	4611      	mov	r1, r2
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff ff5d 	bl	8001fbc <__NVIC_SetPriority>
}
 8002102:	bf00      	nop
 8002104:	3718      	adds	r7, #24
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b082      	sub	sp, #8
 800210e:	af00      	add	r7, sp, #0
 8002110:	4603      	mov	r3, r0
 8002112:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff ff31 	bl	8001f80 <__NVIC_EnableIRQ>
}
 800211e:	bf00      	nop
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b082      	sub	sp, #8
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f7ff ffa2 	bl	8002078 <SysTick_Config>
 8002134:	4603      	mov	r3, r0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
	...

08002140 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002148:	2300      	movs	r3, #0
 800214a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800214c:	f7ff feb6 	bl	8001ebc <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d101      	bne.n	800215c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e099      	b.n	8002290 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2202      	movs	r2, #2
 8002160:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f022 0201 	bic.w	r2, r2, #1
 800217a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800217c:	e00f      	b.n	800219e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800217e:	f7ff fe9d 	bl	8001ebc <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b05      	cmp	r3, #5
 800218a:	d908      	bls.n	800219e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2220      	movs	r2, #32
 8002190:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2203      	movs	r2, #3
 8002196:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e078      	b.n	8002290 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1e8      	bne.n	800217e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021b4:	697a      	ldr	r2, [r7, #20]
 80021b6:	4b38      	ldr	r3, [pc, #224]	; (8002298 <HAL_DMA_Init+0x158>)
 80021b8:	4013      	ands	r3, r2
 80021ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021ea:	697a      	ldr	r2, [r7, #20]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f4:	2b04      	cmp	r3, #4
 80021f6:	d107      	bne.n	8002208 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002200:	4313      	orrs	r3, r2
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	4313      	orrs	r3, r2
 8002206:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	697a      	ldr	r2, [r7, #20]
 800220e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	f023 0307 	bic.w	r3, r3, #7
 800221e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002224:	697a      	ldr	r2, [r7, #20]
 8002226:	4313      	orrs	r3, r2
 8002228:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222e:	2b04      	cmp	r3, #4
 8002230:	d117      	bne.n	8002262 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002236:	697a      	ldr	r2, [r7, #20]
 8002238:	4313      	orrs	r3, r2
 800223a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002240:	2b00      	cmp	r3, #0
 8002242:	d00e      	beq.n	8002262 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f000 fb01 	bl	800284c <DMA_CheckFifoParam>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d008      	beq.n	8002262 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2240      	movs	r2, #64	; 0x40
 8002254:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2201      	movs	r2, #1
 800225a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800225e:	2301      	movs	r3, #1
 8002260:	e016      	b.n	8002290 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	697a      	ldr	r2, [r7, #20]
 8002268:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 fab8 	bl	80027e0 <DMA_CalcBaseAndBitshift>
 8002270:	4603      	mov	r3, r0
 8002272:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002278:	223f      	movs	r2, #63	; 0x3f
 800227a:	409a      	lsls	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2201      	movs	r2, #1
 800228a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	3718      	adds	r7, #24
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	f010803f 	.word	0xf010803f

0800229c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	607a      	str	r2, [r7, #4]
 80022a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022aa:	2300      	movs	r3, #0
 80022ac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d101      	bne.n	80022c2 <HAL_DMA_Start_IT+0x26>
 80022be:	2302      	movs	r3, #2
 80022c0:	e040      	b.n	8002344 <HAL_DMA_Start_IT+0xa8>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2201      	movs	r2, #1
 80022c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d12f      	bne.n	8002336 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2202      	movs	r2, #2
 80022da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	68b9      	ldr	r1, [r7, #8]
 80022ea:	68f8      	ldr	r0, [r7, #12]
 80022ec:	f000 fa4a 	bl	8002784 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f4:	223f      	movs	r2, #63	; 0x3f
 80022f6:	409a      	lsls	r2, r3
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f042 0216 	orr.w	r2, r2, #22
 800230a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002310:	2b00      	cmp	r3, #0
 8002312:	d007      	beq.n	8002324 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f042 0208 	orr.w	r2, r2, #8
 8002322:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f042 0201 	orr.w	r2, r2, #1
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	e005      	b.n	8002342 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800233e:	2302      	movs	r3, #2
 8002340:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002342:	7dfb      	ldrb	r3, [r7, #23]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3718      	adds	r7, #24
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002358:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800235a:	f7ff fdaf 	bl	8001ebc <HAL_GetTick>
 800235e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002366:	b2db      	uxtb	r3, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d008      	beq.n	800237e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2280      	movs	r2, #128	; 0x80
 8002370:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e052      	b.n	8002424 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 0216 	bic.w	r2, r2, #22
 800238c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	695a      	ldr	r2, [r3, #20]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800239c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d103      	bne.n	80023ae <HAL_DMA_Abort+0x62>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d007      	beq.n	80023be <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f022 0208 	bic.w	r2, r2, #8
 80023bc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f022 0201 	bic.w	r2, r2, #1
 80023cc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023ce:	e013      	b.n	80023f8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023d0:	f7ff fd74 	bl	8001ebc <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b05      	cmp	r3, #5
 80023dc:	d90c      	bls.n	80023f8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2220      	movs	r2, #32
 80023e2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2203      	movs	r2, #3
 80023e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e015      	b.n	8002424 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1e4      	bne.n	80023d0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800240a:	223f      	movs	r2, #63	; 0x3f
 800240c:	409a      	lsls	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2201      	movs	r2, #1
 8002416:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002422:	2300      	movs	r3, #0
}
 8002424:	4618      	mov	r0, r3
 8002426:	3710      	adds	r7, #16
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800243a:	b2db      	uxtb	r3, r3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d004      	beq.n	800244a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2280      	movs	r2, #128	; 0x80
 8002444:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e00c      	b.n	8002464 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2205      	movs	r2, #5
 800244e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f022 0201 	bic.w	r2, r2, #1
 8002460:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002478:	2300      	movs	r3, #0
 800247a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800247c:	4b8e      	ldr	r3, [pc, #568]	; (80026b8 <HAL_DMA_IRQHandler+0x248>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a8e      	ldr	r2, [pc, #568]	; (80026bc <HAL_DMA_IRQHandler+0x24c>)
 8002482:	fba2 2303 	umull	r2, r3, r2, r3
 8002486:	0a9b      	lsrs	r3, r3, #10
 8002488:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800249a:	2208      	movs	r2, #8
 800249c:	409a      	lsls	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	4013      	ands	r3, r2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d01a      	beq.n	80024dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0304 	and.w	r3, r3, #4
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d013      	beq.n	80024dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f022 0204 	bic.w	r2, r2, #4
 80024c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c8:	2208      	movs	r2, #8
 80024ca:	409a      	lsls	r2, r3
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d4:	f043 0201 	orr.w	r2, r3, #1
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e0:	2201      	movs	r2, #1
 80024e2:	409a      	lsls	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	4013      	ands	r3, r2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d012      	beq.n	8002512 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00b      	beq.n	8002512 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024fe:	2201      	movs	r2, #1
 8002500:	409a      	lsls	r2, r3
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800250a:	f043 0202 	orr.w	r2, r3, #2
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002516:	2204      	movs	r2, #4
 8002518:	409a      	lsls	r2, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	4013      	ands	r3, r2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d012      	beq.n	8002548 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00b      	beq.n	8002548 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002534:	2204      	movs	r2, #4
 8002536:	409a      	lsls	r2, r3
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002540:	f043 0204 	orr.w	r2, r3, #4
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800254c:	2210      	movs	r2, #16
 800254e:	409a      	lsls	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	4013      	ands	r3, r2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d043      	beq.n	80025e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0308 	and.w	r3, r3, #8
 8002562:	2b00      	cmp	r3, #0
 8002564:	d03c      	beq.n	80025e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800256a:	2210      	movs	r2, #16
 800256c:	409a      	lsls	r2, r3
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d018      	beq.n	80025b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d108      	bne.n	80025a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	2b00      	cmp	r3, #0
 8002594:	d024      	beq.n	80025e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	4798      	blx	r3
 800259e:	e01f      	b.n	80025e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d01b      	beq.n	80025e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	4798      	blx	r3
 80025b0:	e016      	b.n	80025e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d107      	bne.n	80025d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f022 0208 	bic.w	r2, r2, #8
 80025ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d003      	beq.n	80025e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e4:	2220      	movs	r2, #32
 80025e6:	409a      	lsls	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	4013      	ands	r3, r2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f000 808f 	beq.w	8002710 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0310 	and.w	r3, r3, #16
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f000 8087 	beq.w	8002710 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002606:	2220      	movs	r2, #32
 8002608:	409a      	lsls	r2, r3
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b05      	cmp	r3, #5
 8002618:	d136      	bne.n	8002688 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f022 0216 	bic.w	r2, r2, #22
 8002628:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	695a      	ldr	r2, [r3, #20]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002638:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	2b00      	cmp	r3, #0
 8002640:	d103      	bne.n	800264a <HAL_DMA_IRQHandler+0x1da>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002646:	2b00      	cmp	r3, #0
 8002648:	d007      	beq.n	800265a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f022 0208 	bic.w	r2, r2, #8
 8002658:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800265e:	223f      	movs	r2, #63	; 0x3f
 8002660:	409a      	lsls	r2, r3
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800267a:	2b00      	cmp	r3, #0
 800267c:	d07e      	beq.n	800277c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	4798      	blx	r3
        }
        return;
 8002686:	e079      	b.n	800277c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d01d      	beq.n	80026d2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d10d      	bne.n	80026c0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d031      	beq.n	8002710 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	4798      	blx	r3
 80026b4:	e02c      	b.n	8002710 <HAL_DMA_IRQHandler+0x2a0>
 80026b6:	bf00      	nop
 80026b8:	20000000 	.word	0x20000000
 80026bc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d023      	beq.n	8002710 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	4798      	blx	r3
 80026d0:	e01e      	b.n	8002710 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10f      	bne.n	8002700 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 0210 	bic.w	r2, r2, #16
 80026ee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002704:	2b00      	cmp	r3, #0
 8002706:	d003      	beq.n	8002710 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002714:	2b00      	cmp	r3, #0
 8002716:	d032      	beq.n	800277e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	2b00      	cmp	r3, #0
 8002722:	d022      	beq.n	800276a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2205      	movs	r2, #5
 8002728:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f022 0201 	bic.w	r2, r2, #1
 800273a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	3301      	adds	r3, #1
 8002740:	60bb      	str	r3, [r7, #8]
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	429a      	cmp	r2, r3
 8002746:	d307      	bcc.n	8002758 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1f2      	bne.n	800273c <HAL_DMA_IRQHandler+0x2cc>
 8002756:	e000      	b.n	800275a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002758:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2201      	movs	r2, #1
 800275e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800276e:	2b00      	cmp	r3, #0
 8002770:	d005      	beq.n	800277e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	4798      	blx	r3
 800277a:	e000      	b.n	800277e <HAL_DMA_IRQHandler+0x30e>
        return;
 800277c:	bf00      	nop
    }
  }
}
 800277e:	3718      	adds	r7, #24
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
 8002790:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80027a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	2b40      	cmp	r3, #64	; 0x40
 80027b0:	d108      	bne.n	80027c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	68ba      	ldr	r2, [r7, #8]
 80027c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80027c2:	e007      	b.n	80027d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68ba      	ldr	r2, [r7, #8]
 80027ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	60da      	str	r2, [r3, #12]
}
 80027d4:	bf00      	nop
 80027d6:	3714      	adds	r7, #20
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	3b10      	subs	r3, #16
 80027f0:	4a14      	ldr	r2, [pc, #80]	; (8002844 <DMA_CalcBaseAndBitshift+0x64>)
 80027f2:	fba2 2303 	umull	r2, r3, r2, r3
 80027f6:	091b      	lsrs	r3, r3, #4
 80027f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80027fa:	4a13      	ldr	r2, [pc, #76]	; (8002848 <DMA_CalcBaseAndBitshift+0x68>)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	4413      	add	r3, r2
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	461a      	mov	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2b03      	cmp	r3, #3
 800280c:	d909      	bls.n	8002822 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002816:	f023 0303 	bic.w	r3, r3, #3
 800281a:	1d1a      	adds	r2, r3, #4
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	659a      	str	r2, [r3, #88]	; 0x58
 8002820:	e007      	b.n	8002832 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800282a:	f023 0303 	bic.w	r3, r3, #3
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002836:	4618      	mov	r0, r3
 8002838:	3714      	adds	r7, #20
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	aaaaaaab 	.word	0xaaaaaaab
 8002848:	080077d0 	.word	0x080077d0

0800284c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002854:	2300      	movs	r3, #0
 8002856:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800285c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d11f      	bne.n	80028a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	2b03      	cmp	r3, #3
 800286a:	d856      	bhi.n	800291a <DMA_CheckFifoParam+0xce>
 800286c:	a201      	add	r2, pc, #4	; (adr r2, 8002874 <DMA_CheckFifoParam+0x28>)
 800286e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002872:	bf00      	nop
 8002874:	08002885 	.word	0x08002885
 8002878:	08002897 	.word	0x08002897
 800287c:	08002885 	.word	0x08002885
 8002880:	0800291b 	.word	0x0800291b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002888:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d046      	beq.n	800291e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002894:	e043      	b.n	800291e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800289e:	d140      	bne.n	8002922 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028a4:	e03d      	b.n	8002922 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028ae:	d121      	bne.n	80028f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	2b03      	cmp	r3, #3
 80028b4:	d837      	bhi.n	8002926 <DMA_CheckFifoParam+0xda>
 80028b6:	a201      	add	r2, pc, #4	; (adr r2, 80028bc <DMA_CheckFifoParam+0x70>)
 80028b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028bc:	080028cd 	.word	0x080028cd
 80028c0:	080028d3 	.word	0x080028d3
 80028c4:	080028cd 	.word	0x080028cd
 80028c8:	080028e5 	.word	0x080028e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	73fb      	strb	r3, [r7, #15]
      break;
 80028d0:	e030      	b.n	8002934 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d025      	beq.n	800292a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028e2:	e022      	b.n	800292a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028ec:	d11f      	bne.n	800292e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80028f2:	e01c      	b.n	800292e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d903      	bls.n	8002902 <DMA_CheckFifoParam+0xb6>
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	2b03      	cmp	r3, #3
 80028fe:	d003      	beq.n	8002908 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002900:	e018      	b.n	8002934 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	73fb      	strb	r3, [r7, #15]
      break;
 8002906:	e015      	b.n	8002934 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00e      	beq.n	8002932 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	73fb      	strb	r3, [r7, #15]
      break;
 8002918:	e00b      	b.n	8002932 <DMA_CheckFifoParam+0xe6>
      break;
 800291a:	bf00      	nop
 800291c:	e00a      	b.n	8002934 <DMA_CheckFifoParam+0xe8>
      break;
 800291e:	bf00      	nop
 8002920:	e008      	b.n	8002934 <DMA_CheckFifoParam+0xe8>
      break;
 8002922:	bf00      	nop
 8002924:	e006      	b.n	8002934 <DMA_CheckFifoParam+0xe8>
      break;
 8002926:	bf00      	nop
 8002928:	e004      	b.n	8002934 <DMA_CheckFifoParam+0xe8>
      break;
 800292a:	bf00      	nop
 800292c:	e002      	b.n	8002934 <DMA_CheckFifoParam+0xe8>
      break;   
 800292e:	bf00      	nop
 8002930:	e000      	b.n	8002934 <DMA_CheckFifoParam+0xe8>
      break;
 8002932:	bf00      	nop
    }
  } 
  
  return status; 
 8002934:	7bfb      	ldrb	r3, [r7, #15]
}
 8002936:	4618      	mov	r0, r3
 8002938:	3714      	adds	r7, #20
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop

08002944 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002944:	b480      	push	{r7}
 8002946:	b089      	sub	sp, #36	; 0x24
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800294e:	2300      	movs	r3, #0
 8002950:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002952:	2300      	movs	r3, #0
 8002954:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002956:	2300      	movs	r3, #0
 8002958:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800295a:	2300      	movs	r3, #0
 800295c:	61fb      	str	r3, [r7, #28]
 800295e:	e159      	b.n	8002c14 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002960:	2201      	movs	r2, #1
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	4013      	ands	r3, r2
 8002972:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	429a      	cmp	r2, r3
 800297a:	f040 8148 	bne.w	8002c0e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f003 0303 	and.w	r3, r3, #3
 8002986:	2b01      	cmp	r3, #1
 8002988:	d005      	beq.n	8002996 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002992:	2b02      	cmp	r3, #2
 8002994:	d130      	bne.n	80029f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	2203      	movs	r2, #3
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	43db      	mvns	r3, r3
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	4013      	ands	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	68da      	ldr	r2, [r3, #12]
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	4313      	orrs	r3, r2
 80029be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029cc:	2201      	movs	r2, #1
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	43db      	mvns	r3, r3
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	4013      	ands	r3, r2
 80029da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	091b      	lsrs	r3, r3, #4
 80029e2:	f003 0201 	and.w	r2, r3, #1
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f003 0303 	and.w	r3, r3, #3
 8002a00:	2b03      	cmp	r3, #3
 8002a02:	d017      	beq.n	8002a34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	2203      	movs	r2, #3
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	43db      	mvns	r3, r3
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f003 0303 	and.w	r3, r3, #3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d123      	bne.n	8002a88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	08da      	lsrs	r2, r3, #3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	3208      	adds	r2, #8
 8002a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	f003 0307 	and.w	r3, r3, #7
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	220f      	movs	r2, #15
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	4013      	ands	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	691a      	ldr	r2, [r3, #16]
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	f003 0307 	and.w	r3, r3, #7
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	08da      	lsrs	r2, r3, #3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	3208      	adds	r2, #8
 8002a82:	69b9      	ldr	r1, [r7, #24]
 8002a84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	2203      	movs	r2, #3
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f003 0203 	and.w	r2, r3, #3
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f000 80a2 	beq.w	8002c0e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aca:	2300      	movs	r3, #0
 8002acc:	60fb      	str	r3, [r7, #12]
 8002ace:	4b57      	ldr	r3, [pc, #348]	; (8002c2c <HAL_GPIO_Init+0x2e8>)
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad2:	4a56      	ldr	r2, [pc, #344]	; (8002c2c <HAL_GPIO_Init+0x2e8>)
 8002ad4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8002ada:	4b54      	ldr	r3, [pc, #336]	; (8002c2c <HAL_GPIO_Init+0x2e8>)
 8002adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ade:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ae2:	60fb      	str	r3, [r7, #12]
 8002ae4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ae6:	4a52      	ldr	r2, [pc, #328]	; (8002c30 <HAL_GPIO_Init+0x2ec>)
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	089b      	lsrs	r3, r3, #2
 8002aec:	3302      	adds	r3, #2
 8002aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	f003 0303 	and.w	r3, r3, #3
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	220f      	movs	r2, #15
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	43db      	mvns	r3, r3
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	4013      	ands	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a49      	ldr	r2, [pc, #292]	; (8002c34 <HAL_GPIO_Init+0x2f0>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d019      	beq.n	8002b46 <HAL_GPIO_Init+0x202>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a48      	ldr	r2, [pc, #288]	; (8002c38 <HAL_GPIO_Init+0x2f4>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d013      	beq.n	8002b42 <HAL_GPIO_Init+0x1fe>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a47      	ldr	r2, [pc, #284]	; (8002c3c <HAL_GPIO_Init+0x2f8>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d00d      	beq.n	8002b3e <HAL_GPIO_Init+0x1fa>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a46      	ldr	r2, [pc, #280]	; (8002c40 <HAL_GPIO_Init+0x2fc>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d007      	beq.n	8002b3a <HAL_GPIO_Init+0x1f6>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a45      	ldr	r2, [pc, #276]	; (8002c44 <HAL_GPIO_Init+0x300>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d101      	bne.n	8002b36 <HAL_GPIO_Init+0x1f2>
 8002b32:	2304      	movs	r3, #4
 8002b34:	e008      	b.n	8002b48 <HAL_GPIO_Init+0x204>
 8002b36:	2307      	movs	r3, #7
 8002b38:	e006      	b.n	8002b48 <HAL_GPIO_Init+0x204>
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e004      	b.n	8002b48 <HAL_GPIO_Init+0x204>
 8002b3e:	2302      	movs	r3, #2
 8002b40:	e002      	b.n	8002b48 <HAL_GPIO_Init+0x204>
 8002b42:	2301      	movs	r3, #1
 8002b44:	e000      	b.n	8002b48 <HAL_GPIO_Init+0x204>
 8002b46:	2300      	movs	r3, #0
 8002b48:	69fa      	ldr	r2, [r7, #28]
 8002b4a:	f002 0203 	and.w	r2, r2, #3
 8002b4e:	0092      	lsls	r2, r2, #2
 8002b50:	4093      	lsls	r3, r2
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b58:	4935      	ldr	r1, [pc, #212]	; (8002c30 <HAL_GPIO_Init+0x2ec>)
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	089b      	lsrs	r3, r3, #2
 8002b5e:	3302      	adds	r3, #2
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b66:	4b38      	ldr	r3, [pc, #224]	; (8002c48 <HAL_GPIO_Init+0x304>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	43db      	mvns	r3, r3
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	4013      	ands	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d003      	beq.n	8002b8a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002b82:	69ba      	ldr	r2, [r7, #24]
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b8a:	4a2f      	ldr	r2, [pc, #188]	; (8002c48 <HAL_GPIO_Init+0x304>)
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b90:	4b2d      	ldr	r3, [pc, #180]	; (8002c48 <HAL_GPIO_Init+0x304>)
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	43db      	mvns	r3, r3
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d003      	beq.n	8002bb4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bb4:	4a24      	ldr	r2, [pc, #144]	; (8002c48 <HAL_GPIO_Init+0x304>)
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bba:	4b23      	ldr	r3, [pc, #140]	; (8002c48 <HAL_GPIO_Init+0x304>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	43db      	mvns	r3, r3
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bde:	4a1a      	ldr	r2, [pc, #104]	; (8002c48 <HAL_GPIO_Init+0x304>)
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002be4:	4b18      	ldr	r3, [pc, #96]	; (8002c48 <HAL_GPIO_Init+0x304>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	43db      	mvns	r3, r3
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d003      	beq.n	8002c08 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c08:	4a0f      	ldr	r2, [pc, #60]	; (8002c48 <HAL_GPIO_Init+0x304>)
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	3301      	adds	r3, #1
 8002c12:	61fb      	str	r3, [r7, #28]
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	2b0f      	cmp	r3, #15
 8002c18:	f67f aea2 	bls.w	8002960 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c1c:	bf00      	nop
 8002c1e:	bf00      	nop
 8002c20:	3724      	adds	r7, #36	; 0x24
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	40023800 	.word	0x40023800
 8002c30:	40013800 	.word	0x40013800
 8002c34:	40020000 	.word	0x40020000
 8002c38:	40020400 	.word	0x40020400
 8002c3c:	40020800 	.word	0x40020800
 8002c40:	40020c00 	.word	0x40020c00
 8002c44:	40021000 	.word	0x40021000
 8002c48:	40013c00 	.word	0x40013c00

08002c4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	460b      	mov	r3, r1
 8002c56:	807b      	strh	r3, [r7, #2]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c5c:	787b      	ldrb	r3, [r7, #1]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d003      	beq.n	8002c6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c62:	887a      	ldrh	r2, [r7, #2]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c68:	e003      	b.n	8002c72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c6a:	887b      	ldrh	r3, [r7, #2]
 8002c6c:	041a      	lsls	r2, r3, #16
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	619a      	str	r2, [r3, #24]
}
 8002c72:	bf00      	nop
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
	...

08002c80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b086      	sub	sp, #24
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e267      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d075      	beq.n	8002d8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c9e:	4b88      	ldr	r3, [pc, #544]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f003 030c 	and.w	r3, r3, #12
 8002ca6:	2b04      	cmp	r3, #4
 8002ca8:	d00c      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002caa:	4b85      	ldr	r3, [pc, #532]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cb2:	2b08      	cmp	r3, #8
 8002cb4:	d112      	bne.n	8002cdc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cb6:	4b82      	ldr	r3, [pc, #520]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cc2:	d10b      	bne.n	8002cdc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc4:	4b7e      	ldr	r3, [pc, #504]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d05b      	beq.n	8002d88 <HAL_RCC_OscConfig+0x108>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d157      	bne.n	8002d88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e242      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ce4:	d106      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x74>
 8002ce6:	4b76      	ldr	r3, [pc, #472]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a75      	ldr	r2, [pc, #468]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cf0:	6013      	str	r3, [r2, #0]
 8002cf2:	e01d      	b.n	8002d30 <HAL_RCC_OscConfig+0xb0>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cfc:	d10c      	bne.n	8002d18 <HAL_RCC_OscConfig+0x98>
 8002cfe:	4b70      	ldr	r3, [pc, #448]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a6f      	ldr	r2, [pc, #444]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002d04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d08:	6013      	str	r3, [r2, #0]
 8002d0a:	4b6d      	ldr	r3, [pc, #436]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a6c      	ldr	r2, [pc, #432]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002d10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d14:	6013      	str	r3, [r2, #0]
 8002d16:	e00b      	b.n	8002d30 <HAL_RCC_OscConfig+0xb0>
 8002d18:	4b69      	ldr	r3, [pc, #420]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a68      	ldr	r2, [pc, #416]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002d1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d22:	6013      	str	r3, [r2, #0]
 8002d24:	4b66      	ldr	r3, [pc, #408]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a65      	ldr	r2, [pc, #404]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002d2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d013      	beq.n	8002d60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d38:	f7ff f8c0 	bl	8001ebc <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d40:	f7ff f8bc 	bl	8001ebc <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b64      	cmp	r3, #100	; 0x64
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e207      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d52:	4b5b      	ldr	r3, [pc, #364]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d0f0      	beq.n	8002d40 <HAL_RCC_OscConfig+0xc0>
 8002d5e:	e014      	b.n	8002d8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d60:	f7ff f8ac 	bl	8001ebc <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d68:	f7ff f8a8 	bl	8001ebc <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b64      	cmp	r3, #100	; 0x64
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e1f3      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d7a:	4b51      	ldr	r3, [pc, #324]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1f0      	bne.n	8002d68 <HAL_RCC_OscConfig+0xe8>
 8002d86:	e000      	b.n	8002d8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d063      	beq.n	8002e5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d96:	4b4a      	ldr	r3, [pc, #296]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f003 030c 	and.w	r3, r3, #12
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00b      	beq.n	8002dba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002da2:	4b47      	ldr	r3, [pc, #284]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002daa:	2b08      	cmp	r3, #8
 8002dac:	d11c      	bne.n	8002de8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dae:	4b44      	ldr	r3, [pc, #272]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d116      	bne.n	8002de8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dba:	4b41      	ldr	r3, [pc, #260]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d005      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x152>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d001      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e1c7      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dd2:	4b3b      	ldr	r3, [pc, #236]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	4937      	ldr	r1, [pc, #220]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002de6:	e03a      	b.n	8002e5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d020      	beq.n	8002e32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002df0:	4b34      	ldr	r3, [pc, #208]	; (8002ec4 <HAL_RCC_OscConfig+0x244>)
 8002df2:	2201      	movs	r2, #1
 8002df4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df6:	f7ff f861 	bl	8001ebc <HAL_GetTick>
 8002dfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dfc:	e008      	b.n	8002e10 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dfe:	f7ff f85d 	bl	8001ebc <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e1a8      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e10:	4b2b      	ldr	r3, [pc, #172]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d0f0      	beq.n	8002dfe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e1c:	4b28      	ldr	r3, [pc, #160]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	00db      	lsls	r3, r3, #3
 8002e2a:	4925      	ldr	r1, [pc, #148]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	600b      	str	r3, [r1, #0]
 8002e30:	e015      	b.n	8002e5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e32:	4b24      	ldr	r3, [pc, #144]	; (8002ec4 <HAL_RCC_OscConfig+0x244>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e38:	f7ff f840 	bl	8001ebc <HAL_GetTick>
 8002e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e40:	f7ff f83c 	bl	8001ebc <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e187      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e52:	4b1b      	ldr	r3, [pc, #108]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1f0      	bne.n	8002e40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0308 	and.w	r3, r3, #8
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d036      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d016      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e72:	4b15      	ldr	r3, [pc, #84]	; (8002ec8 <HAL_RCC_OscConfig+0x248>)
 8002e74:	2201      	movs	r2, #1
 8002e76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e78:	f7ff f820 	bl	8001ebc <HAL_GetTick>
 8002e7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e80:	f7ff f81c 	bl	8001ebc <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e167      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e92:	4b0b      	ldr	r3, [pc, #44]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002e94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d0f0      	beq.n	8002e80 <HAL_RCC_OscConfig+0x200>
 8002e9e:	e01b      	b.n	8002ed8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ea0:	4b09      	ldr	r3, [pc, #36]	; (8002ec8 <HAL_RCC_OscConfig+0x248>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ea6:	f7ff f809 	bl	8001ebc <HAL_GetTick>
 8002eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eac:	e00e      	b.n	8002ecc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eae:	f7ff f805 	bl	8001ebc <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d907      	bls.n	8002ecc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e150      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	42470000 	.word	0x42470000
 8002ec8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ecc:	4b88      	ldr	r3, [pc, #544]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002ece:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1ea      	bne.n	8002eae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0304 	and.w	r3, r3, #4
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f000 8097 	beq.w	8003014 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eea:	4b81      	ldr	r3, [pc, #516]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10f      	bne.n	8002f16 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60bb      	str	r3, [r7, #8]
 8002efa:	4b7d      	ldr	r3, [pc, #500]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	4a7c      	ldr	r2, [pc, #496]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f04:	6413      	str	r3, [r2, #64]	; 0x40
 8002f06:	4b7a      	ldr	r3, [pc, #488]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f0e:	60bb      	str	r3, [r7, #8]
 8002f10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f12:	2301      	movs	r3, #1
 8002f14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f16:	4b77      	ldr	r3, [pc, #476]	; (80030f4 <HAL_RCC_OscConfig+0x474>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d118      	bne.n	8002f54 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f22:	4b74      	ldr	r3, [pc, #464]	; (80030f4 <HAL_RCC_OscConfig+0x474>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a73      	ldr	r2, [pc, #460]	; (80030f4 <HAL_RCC_OscConfig+0x474>)
 8002f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f2e:	f7fe ffc5 	bl	8001ebc <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f34:	e008      	b.n	8002f48 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f36:	f7fe ffc1 	bl	8001ebc <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d901      	bls.n	8002f48 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e10c      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f48:	4b6a      	ldr	r3, [pc, #424]	; (80030f4 <HAL_RCC_OscConfig+0x474>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d0f0      	beq.n	8002f36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d106      	bne.n	8002f6a <HAL_RCC_OscConfig+0x2ea>
 8002f5c:	4b64      	ldr	r3, [pc, #400]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f60:	4a63      	ldr	r2, [pc, #396]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002f62:	f043 0301 	orr.w	r3, r3, #1
 8002f66:	6713      	str	r3, [r2, #112]	; 0x70
 8002f68:	e01c      	b.n	8002fa4 <HAL_RCC_OscConfig+0x324>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	2b05      	cmp	r3, #5
 8002f70:	d10c      	bne.n	8002f8c <HAL_RCC_OscConfig+0x30c>
 8002f72:	4b5f      	ldr	r3, [pc, #380]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f76:	4a5e      	ldr	r2, [pc, #376]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002f78:	f043 0304 	orr.w	r3, r3, #4
 8002f7c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f7e:	4b5c      	ldr	r3, [pc, #368]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f82:	4a5b      	ldr	r2, [pc, #364]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002f84:	f043 0301 	orr.w	r3, r3, #1
 8002f88:	6713      	str	r3, [r2, #112]	; 0x70
 8002f8a:	e00b      	b.n	8002fa4 <HAL_RCC_OscConfig+0x324>
 8002f8c:	4b58      	ldr	r3, [pc, #352]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f90:	4a57      	ldr	r2, [pc, #348]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002f92:	f023 0301 	bic.w	r3, r3, #1
 8002f96:	6713      	str	r3, [r2, #112]	; 0x70
 8002f98:	4b55      	ldr	r3, [pc, #340]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9c:	4a54      	ldr	r2, [pc, #336]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002f9e:	f023 0304 	bic.w	r3, r3, #4
 8002fa2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d015      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fac:	f7fe ff86 	bl	8001ebc <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fb2:	e00a      	b.n	8002fca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fb4:	f7fe ff82 	bl	8001ebc <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e0cb      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fca:	4b49      	ldr	r3, [pc, #292]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d0ee      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x334>
 8002fd6:	e014      	b.n	8003002 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fd8:	f7fe ff70 	bl	8001ebc <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fde:	e00a      	b.n	8002ff6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fe0:	f7fe ff6c 	bl	8001ebc <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e0b5      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ff6:	4b3e      	ldr	r3, [pc, #248]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1ee      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003002:	7dfb      	ldrb	r3, [r7, #23]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d105      	bne.n	8003014 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003008:	4b39      	ldr	r3, [pc, #228]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 800300a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300c:	4a38      	ldr	r2, [pc, #224]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 800300e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003012:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	2b00      	cmp	r3, #0
 800301a:	f000 80a1 	beq.w	8003160 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800301e:	4b34      	ldr	r3, [pc, #208]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 030c 	and.w	r3, r3, #12
 8003026:	2b08      	cmp	r3, #8
 8003028:	d05c      	beq.n	80030e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	2b02      	cmp	r3, #2
 8003030:	d141      	bne.n	80030b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003032:	4b31      	ldr	r3, [pc, #196]	; (80030f8 <HAL_RCC_OscConfig+0x478>)
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003038:	f7fe ff40 	bl	8001ebc <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003040:	f7fe ff3c 	bl	8001ebc <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e087      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003052:	4b27      	ldr	r3, [pc, #156]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1f0      	bne.n	8003040 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	69da      	ldr	r2, [r3, #28]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a1b      	ldr	r3, [r3, #32]
 8003066:	431a      	orrs	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306c:	019b      	lsls	r3, r3, #6
 800306e:	431a      	orrs	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003074:	085b      	lsrs	r3, r3, #1
 8003076:	3b01      	subs	r3, #1
 8003078:	041b      	lsls	r3, r3, #16
 800307a:	431a      	orrs	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003080:	061b      	lsls	r3, r3, #24
 8003082:	491b      	ldr	r1, [pc, #108]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 8003084:	4313      	orrs	r3, r2
 8003086:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003088:	4b1b      	ldr	r3, [pc, #108]	; (80030f8 <HAL_RCC_OscConfig+0x478>)
 800308a:	2201      	movs	r2, #1
 800308c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800308e:	f7fe ff15 	bl	8001ebc <HAL_GetTick>
 8003092:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003094:	e008      	b.n	80030a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003096:	f7fe ff11 	bl	8001ebc <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d901      	bls.n	80030a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e05c      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030a8:	4b11      	ldr	r3, [pc, #68]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d0f0      	beq.n	8003096 <HAL_RCC_OscConfig+0x416>
 80030b4:	e054      	b.n	8003160 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030b6:	4b10      	ldr	r3, [pc, #64]	; (80030f8 <HAL_RCC_OscConfig+0x478>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030bc:	f7fe fefe 	bl	8001ebc <HAL_GetTick>
 80030c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030c2:	e008      	b.n	80030d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030c4:	f7fe fefa 	bl	8001ebc <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e045      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030d6:	4b06      	ldr	r3, [pc, #24]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1f0      	bne.n	80030c4 <HAL_RCC_OscConfig+0x444>
 80030e2:	e03d      	b.n	8003160 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d107      	bne.n	80030fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e038      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
 80030f0:	40023800 	.word	0x40023800
 80030f4:	40007000 	.word	0x40007000
 80030f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030fc:	4b1b      	ldr	r3, [pc, #108]	; (800316c <HAL_RCC_OscConfig+0x4ec>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d028      	beq.n	800315c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003114:	429a      	cmp	r2, r3
 8003116:	d121      	bne.n	800315c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003122:	429a      	cmp	r2, r3
 8003124:	d11a      	bne.n	800315c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800312c:	4013      	ands	r3, r2
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003132:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003134:	4293      	cmp	r3, r2
 8003136:	d111      	bne.n	800315c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003142:	085b      	lsrs	r3, r3, #1
 8003144:	3b01      	subs	r3, #1
 8003146:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003148:	429a      	cmp	r2, r3
 800314a:	d107      	bne.n	800315c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003156:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003158:	429a      	cmp	r2, r3
 800315a:	d001      	beq.n	8003160 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e000      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3718      	adds	r7, #24
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	40023800 	.word	0x40023800

08003170 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d101      	bne.n	8003184 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e0cc      	b.n	800331e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003184:	4b68      	ldr	r3, [pc, #416]	; (8003328 <HAL_RCC_ClockConfig+0x1b8>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0307 	and.w	r3, r3, #7
 800318c:	683a      	ldr	r2, [r7, #0]
 800318e:	429a      	cmp	r2, r3
 8003190:	d90c      	bls.n	80031ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003192:	4b65      	ldr	r3, [pc, #404]	; (8003328 <HAL_RCC_ClockConfig+0x1b8>)
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	b2d2      	uxtb	r2, r2
 8003198:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800319a:	4b63      	ldr	r3, [pc, #396]	; (8003328 <HAL_RCC_ClockConfig+0x1b8>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0307 	and.w	r3, r3, #7
 80031a2:	683a      	ldr	r2, [r7, #0]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d001      	beq.n	80031ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e0b8      	b.n	800331e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d020      	beq.n	80031fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0304 	and.w	r3, r3, #4
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d005      	beq.n	80031d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031c4:	4b59      	ldr	r3, [pc, #356]	; (800332c <HAL_RCC_ClockConfig+0x1bc>)
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	4a58      	ldr	r2, [pc, #352]	; (800332c <HAL_RCC_ClockConfig+0x1bc>)
 80031ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0308 	and.w	r3, r3, #8
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d005      	beq.n	80031e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031dc:	4b53      	ldr	r3, [pc, #332]	; (800332c <HAL_RCC_ClockConfig+0x1bc>)
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	4a52      	ldr	r2, [pc, #328]	; (800332c <HAL_RCC_ClockConfig+0x1bc>)
 80031e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031e8:	4b50      	ldr	r3, [pc, #320]	; (800332c <HAL_RCC_ClockConfig+0x1bc>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	494d      	ldr	r1, [pc, #308]	; (800332c <HAL_RCC_ClockConfig+0x1bc>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b00      	cmp	r3, #0
 8003204:	d044      	beq.n	8003290 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d107      	bne.n	800321e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800320e:	4b47      	ldr	r3, [pc, #284]	; (800332c <HAL_RCC_ClockConfig+0x1bc>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d119      	bne.n	800324e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e07f      	b.n	800331e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	2b02      	cmp	r3, #2
 8003224:	d003      	beq.n	800322e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800322a:	2b03      	cmp	r3, #3
 800322c:	d107      	bne.n	800323e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800322e:	4b3f      	ldr	r3, [pc, #252]	; (800332c <HAL_RCC_ClockConfig+0x1bc>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d109      	bne.n	800324e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e06f      	b.n	800331e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800323e:	4b3b      	ldr	r3, [pc, #236]	; (800332c <HAL_RCC_ClockConfig+0x1bc>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d101      	bne.n	800324e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e067      	b.n	800331e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800324e:	4b37      	ldr	r3, [pc, #220]	; (800332c <HAL_RCC_ClockConfig+0x1bc>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f023 0203 	bic.w	r2, r3, #3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	4934      	ldr	r1, [pc, #208]	; (800332c <HAL_RCC_ClockConfig+0x1bc>)
 800325c:	4313      	orrs	r3, r2
 800325e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003260:	f7fe fe2c 	bl	8001ebc <HAL_GetTick>
 8003264:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003266:	e00a      	b.n	800327e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003268:	f7fe fe28 	bl	8001ebc <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	f241 3288 	movw	r2, #5000	; 0x1388
 8003276:	4293      	cmp	r3, r2
 8003278:	d901      	bls.n	800327e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e04f      	b.n	800331e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800327e:	4b2b      	ldr	r3, [pc, #172]	; (800332c <HAL_RCC_ClockConfig+0x1bc>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f003 020c 	and.w	r2, r3, #12
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	429a      	cmp	r2, r3
 800328e:	d1eb      	bne.n	8003268 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003290:	4b25      	ldr	r3, [pc, #148]	; (8003328 <HAL_RCC_ClockConfig+0x1b8>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0307 	and.w	r3, r3, #7
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	429a      	cmp	r2, r3
 800329c:	d20c      	bcs.n	80032b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800329e:	4b22      	ldr	r3, [pc, #136]	; (8003328 <HAL_RCC_ClockConfig+0x1b8>)
 80032a0:	683a      	ldr	r2, [r7, #0]
 80032a2:	b2d2      	uxtb	r2, r2
 80032a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032a6:	4b20      	ldr	r3, [pc, #128]	; (8003328 <HAL_RCC_ClockConfig+0x1b8>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0307 	and.w	r3, r3, #7
 80032ae:	683a      	ldr	r2, [r7, #0]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d001      	beq.n	80032b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e032      	b.n	800331e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0304 	and.w	r3, r3, #4
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d008      	beq.n	80032d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032c4:	4b19      	ldr	r3, [pc, #100]	; (800332c <HAL_RCC_ClockConfig+0x1bc>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	4916      	ldr	r1, [pc, #88]	; (800332c <HAL_RCC_ClockConfig+0x1bc>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0308 	and.w	r3, r3, #8
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d009      	beq.n	80032f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032e2:	4b12      	ldr	r3, [pc, #72]	; (800332c <HAL_RCC_ClockConfig+0x1bc>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	490e      	ldr	r1, [pc, #56]	; (800332c <HAL_RCC_ClockConfig+0x1bc>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032f6:	f000 f821 	bl	800333c <HAL_RCC_GetSysClockFreq>
 80032fa:	4602      	mov	r2, r0
 80032fc:	4b0b      	ldr	r3, [pc, #44]	; (800332c <HAL_RCC_ClockConfig+0x1bc>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	091b      	lsrs	r3, r3, #4
 8003302:	f003 030f 	and.w	r3, r3, #15
 8003306:	490a      	ldr	r1, [pc, #40]	; (8003330 <HAL_RCC_ClockConfig+0x1c0>)
 8003308:	5ccb      	ldrb	r3, [r1, r3]
 800330a:	fa22 f303 	lsr.w	r3, r2, r3
 800330e:	4a09      	ldr	r2, [pc, #36]	; (8003334 <HAL_RCC_ClockConfig+0x1c4>)
 8003310:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003312:	4b09      	ldr	r3, [pc, #36]	; (8003338 <HAL_RCC_ClockConfig+0x1c8>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4618      	mov	r0, r3
 8003318:	f7fe fd8c 	bl	8001e34 <HAL_InitTick>

  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	40023c00 	.word	0x40023c00
 800332c:	40023800 	.word	0x40023800
 8003330:	080077b8 	.word	0x080077b8
 8003334:	20000000 	.word	0x20000000
 8003338:	20000004 	.word	0x20000004

0800333c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800333c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003340:	b090      	sub	sp, #64	; 0x40
 8003342:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003344:	2300      	movs	r3, #0
 8003346:	637b      	str	r3, [r7, #52]	; 0x34
 8003348:	2300      	movs	r3, #0
 800334a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800334c:	2300      	movs	r3, #0
 800334e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003350:	2300      	movs	r3, #0
 8003352:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003354:	4b59      	ldr	r3, [pc, #356]	; (80034bc <HAL_RCC_GetSysClockFreq+0x180>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f003 030c 	and.w	r3, r3, #12
 800335c:	2b08      	cmp	r3, #8
 800335e:	d00d      	beq.n	800337c <HAL_RCC_GetSysClockFreq+0x40>
 8003360:	2b08      	cmp	r3, #8
 8003362:	f200 80a1 	bhi.w	80034a8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003366:	2b00      	cmp	r3, #0
 8003368:	d002      	beq.n	8003370 <HAL_RCC_GetSysClockFreq+0x34>
 800336a:	2b04      	cmp	r3, #4
 800336c:	d003      	beq.n	8003376 <HAL_RCC_GetSysClockFreq+0x3a>
 800336e:	e09b      	b.n	80034a8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003370:	4b53      	ldr	r3, [pc, #332]	; (80034c0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003372:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003374:	e09b      	b.n	80034ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003376:	4b53      	ldr	r3, [pc, #332]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003378:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800337a:	e098      	b.n	80034ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800337c:	4b4f      	ldr	r3, [pc, #316]	; (80034bc <HAL_RCC_GetSysClockFreq+0x180>)
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003384:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003386:	4b4d      	ldr	r3, [pc, #308]	; (80034bc <HAL_RCC_GetSysClockFreq+0x180>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d028      	beq.n	80033e4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003392:	4b4a      	ldr	r3, [pc, #296]	; (80034bc <HAL_RCC_GetSysClockFreq+0x180>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	099b      	lsrs	r3, r3, #6
 8003398:	2200      	movs	r2, #0
 800339a:	623b      	str	r3, [r7, #32]
 800339c:	627a      	str	r2, [r7, #36]	; 0x24
 800339e:	6a3b      	ldr	r3, [r7, #32]
 80033a0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80033a4:	2100      	movs	r1, #0
 80033a6:	4b47      	ldr	r3, [pc, #284]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80033a8:	fb03 f201 	mul.w	r2, r3, r1
 80033ac:	2300      	movs	r3, #0
 80033ae:	fb00 f303 	mul.w	r3, r0, r3
 80033b2:	4413      	add	r3, r2
 80033b4:	4a43      	ldr	r2, [pc, #268]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80033b6:	fba0 1202 	umull	r1, r2, r0, r2
 80033ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033bc:	460a      	mov	r2, r1
 80033be:	62ba      	str	r2, [r7, #40]	; 0x28
 80033c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033c2:	4413      	add	r3, r2
 80033c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033c8:	2200      	movs	r2, #0
 80033ca:	61bb      	str	r3, [r7, #24]
 80033cc:	61fa      	str	r2, [r7, #28]
 80033ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80033d6:	f7fd fbef 	bl	8000bb8 <__aeabi_uldivmod>
 80033da:	4602      	mov	r2, r0
 80033dc:	460b      	mov	r3, r1
 80033de:	4613      	mov	r3, r2
 80033e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033e2:	e053      	b.n	800348c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033e4:	4b35      	ldr	r3, [pc, #212]	; (80034bc <HAL_RCC_GetSysClockFreq+0x180>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	099b      	lsrs	r3, r3, #6
 80033ea:	2200      	movs	r2, #0
 80033ec:	613b      	str	r3, [r7, #16]
 80033ee:	617a      	str	r2, [r7, #20]
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80033f6:	f04f 0b00 	mov.w	fp, #0
 80033fa:	4652      	mov	r2, sl
 80033fc:	465b      	mov	r3, fp
 80033fe:	f04f 0000 	mov.w	r0, #0
 8003402:	f04f 0100 	mov.w	r1, #0
 8003406:	0159      	lsls	r1, r3, #5
 8003408:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800340c:	0150      	lsls	r0, r2, #5
 800340e:	4602      	mov	r2, r0
 8003410:	460b      	mov	r3, r1
 8003412:	ebb2 080a 	subs.w	r8, r2, sl
 8003416:	eb63 090b 	sbc.w	r9, r3, fp
 800341a:	f04f 0200 	mov.w	r2, #0
 800341e:	f04f 0300 	mov.w	r3, #0
 8003422:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003426:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800342a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800342e:	ebb2 0408 	subs.w	r4, r2, r8
 8003432:	eb63 0509 	sbc.w	r5, r3, r9
 8003436:	f04f 0200 	mov.w	r2, #0
 800343a:	f04f 0300 	mov.w	r3, #0
 800343e:	00eb      	lsls	r3, r5, #3
 8003440:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003444:	00e2      	lsls	r2, r4, #3
 8003446:	4614      	mov	r4, r2
 8003448:	461d      	mov	r5, r3
 800344a:	eb14 030a 	adds.w	r3, r4, sl
 800344e:	603b      	str	r3, [r7, #0]
 8003450:	eb45 030b 	adc.w	r3, r5, fp
 8003454:	607b      	str	r3, [r7, #4]
 8003456:	f04f 0200 	mov.w	r2, #0
 800345a:	f04f 0300 	mov.w	r3, #0
 800345e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003462:	4629      	mov	r1, r5
 8003464:	028b      	lsls	r3, r1, #10
 8003466:	4621      	mov	r1, r4
 8003468:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800346c:	4621      	mov	r1, r4
 800346e:	028a      	lsls	r2, r1, #10
 8003470:	4610      	mov	r0, r2
 8003472:	4619      	mov	r1, r3
 8003474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003476:	2200      	movs	r2, #0
 8003478:	60bb      	str	r3, [r7, #8]
 800347a:	60fa      	str	r2, [r7, #12]
 800347c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003480:	f7fd fb9a 	bl	8000bb8 <__aeabi_uldivmod>
 8003484:	4602      	mov	r2, r0
 8003486:	460b      	mov	r3, r1
 8003488:	4613      	mov	r3, r2
 800348a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800348c:	4b0b      	ldr	r3, [pc, #44]	; (80034bc <HAL_RCC_GetSysClockFreq+0x180>)
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	0c1b      	lsrs	r3, r3, #16
 8003492:	f003 0303 	and.w	r3, r3, #3
 8003496:	3301      	adds	r3, #1
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800349c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800349e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80034a6:	e002      	b.n	80034ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034a8:	4b05      	ldr	r3, [pc, #20]	; (80034c0 <HAL_RCC_GetSysClockFreq+0x184>)
 80034aa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80034ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3740      	adds	r7, #64	; 0x40
 80034b4:	46bd      	mov	sp, r7
 80034b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034ba:	bf00      	nop
 80034bc:	40023800 	.word	0x40023800
 80034c0:	00f42400 	.word	0x00f42400
 80034c4:	017d7840 	.word	0x017d7840

080034c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034cc:	4b03      	ldr	r3, [pc, #12]	; (80034dc <HAL_RCC_GetHCLKFreq+0x14>)
 80034ce:	681b      	ldr	r3, [r3, #0]
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	20000000 	.word	0x20000000

080034e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80034e4:	f7ff fff0 	bl	80034c8 <HAL_RCC_GetHCLKFreq>
 80034e8:	4602      	mov	r2, r0
 80034ea:	4b05      	ldr	r3, [pc, #20]	; (8003500 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	0a9b      	lsrs	r3, r3, #10
 80034f0:	f003 0307 	and.w	r3, r3, #7
 80034f4:	4903      	ldr	r1, [pc, #12]	; (8003504 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034f6:	5ccb      	ldrb	r3, [r1, r3]
 80034f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	40023800 	.word	0x40023800
 8003504:	080077c8 	.word	0x080077c8

08003508 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800350c:	f7ff ffdc 	bl	80034c8 <HAL_RCC_GetHCLKFreq>
 8003510:	4602      	mov	r2, r0
 8003512:	4b05      	ldr	r3, [pc, #20]	; (8003528 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	0b5b      	lsrs	r3, r3, #13
 8003518:	f003 0307 	and.w	r3, r3, #7
 800351c:	4903      	ldr	r1, [pc, #12]	; (800352c <HAL_RCC_GetPCLK2Freq+0x24>)
 800351e:	5ccb      	ldrb	r3, [r1, r3]
 8003520:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003524:	4618      	mov	r0, r3
 8003526:	bd80      	pop	{r7, pc}
 8003528:	40023800 	.word	0x40023800
 800352c:	080077c8 	.word	0x080077c8

08003530 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e03f      	b.n	80035c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d106      	bne.n	800355c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f7fe fa88 	bl	8001a6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2224      	movs	r2, #36	; 0x24
 8003560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68da      	ldr	r2, [r3, #12]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003572:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f000 ffa7 	bl	80044c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	691a      	ldr	r2, [r3, #16]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003588:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	695a      	ldr	r2, [r3, #20]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003598:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68da      	ldr	r2, [r3, #12]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2220      	movs	r2, #32
 80035b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2220      	movs	r2, #32
 80035bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3708      	adds	r7, #8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b08a      	sub	sp, #40	; 0x28
 80035ce:	af02      	add	r7, sp, #8
 80035d0:	60f8      	str	r0, [r7, #12]
 80035d2:	60b9      	str	r1, [r7, #8]
 80035d4:	603b      	str	r3, [r7, #0]
 80035d6:	4613      	mov	r3, r2
 80035d8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80035da:	2300      	movs	r3, #0
 80035dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b20      	cmp	r3, #32
 80035e8:	d17c      	bne.n	80036e4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d002      	beq.n	80035f6 <HAL_UART_Transmit+0x2c>
 80035f0:	88fb      	ldrh	r3, [r7, #6]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e075      	b.n	80036e6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003600:	2b01      	cmp	r3, #1
 8003602:	d101      	bne.n	8003608 <HAL_UART_Transmit+0x3e>
 8003604:	2302      	movs	r3, #2
 8003606:	e06e      	b.n	80036e6 <HAL_UART_Transmit+0x11c>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2221      	movs	r2, #33	; 0x21
 800361a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800361e:	f7fe fc4d 	bl	8001ebc <HAL_GetTick>
 8003622:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	88fa      	ldrh	r2, [r7, #6]
 8003628:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	88fa      	ldrh	r2, [r7, #6]
 800362e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003638:	d108      	bne.n	800364c <HAL_UART_Transmit+0x82>
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d104      	bne.n	800364c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003642:	2300      	movs	r3, #0
 8003644:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	61bb      	str	r3, [r7, #24]
 800364a:	e003      	b.n	8003654 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003650:	2300      	movs	r3, #0
 8003652:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800365c:	e02a      	b.n	80036b4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	9300      	str	r3, [sp, #0]
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	2200      	movs	r2, #0
 8003666:	2180      	movs	r1, #128	; 0x80
 8003668:	68f8      	ldr	r0, [r7, #12]
 800366a:	f000 fc5f 	bl	8003f2c <UART_WaitOnFlagUntilTimeout>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d001      	beq.n	8003678 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e036      	b.n	80036e6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d10b      	bne.n	8003696 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	881b      	ldrh	r3, [r3, #0]
 8003682:	461a      	mov	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800368c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	3302      	adds	r3, #2
 8003692:	61bb      	str	r3, [r7, #24]
 8003694:	e007      	b.n	80036a6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	781a      	ldrb	r2, [r3, #0]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	3301      	adds	r3, #1
 80036a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	3b01      	subs	r3, #1
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1cf      	bne.n	800365e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	9300      	str	r3, [sp, #0]
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	2200      	movs	r2, #0
 80036c6:	2140      	movs	r1, #64	; 0x40
 80036c8:	68f8      	ldr	r0, [r7, #12]
 80036ca:	f000 fc2f 	bl	8003f2c <UART_WaitOnFlagUntilTimeout>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d001      	beq.n	80036d8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e006      	b.n	80036e6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2220      	movs	r2, #32
 80036dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80036e0:	2300      	movs	r3, #0
 80036e2:	e000      	b.n	80036e6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80036e4:	2302      	movs	r3, #2
  }
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3720      	adds	r7, #32
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b08c      	sub	sp, #48	; 0x30
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	60f8      	str	r0, [r7, #12]
 80036f6:	60b9      	str	r1, [r7, #8]
 80036f8:	4613      	mov	r3, r2
 80036fa:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003702:	b2db      	uxtb	r3, r3
 8003704:	2b20      	cmp	r3, #32
 8003706:	d152      	bne.n	80037ae <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d002      	beq.n	8003714 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800370e:	88fb      	ldrh	r3, [r7, #6]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d101      	bne.n	8003718 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e04b      	b.n	80037b0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800371e:	2b01      	cmp	r3, #1
 8003720:	d101      	bne.n	8003726 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8003722:	2302      	movs	r3, #2
 8003724:	e044      	b.n	80037b0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2201      	movs	r2, #1
 8003732:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003734:	88fb      	ldrh	r3, [r7, #6]
 8003736:	461a      	mov	r2, r3
 8003738:	68b9      	ldr	r1, [r7, #8]
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f000 fc64 	bl	8004008 <UART_Start_Receive_DMA>
 8003740:	4603      	mov	r3, r0
 8003742:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003746:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800374a:	2b00      	cmp	r3, #0
 800374c:	d12c      	bne.n	80037a8 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003752:	2b01      	cmp	r3, #1
 8003754:	d125      	bne.n	80037a2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003756:	2300      	movs	r3, #0
 8003758:	613b      	str	r3, [r7, #16]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	613b      	str	r3, [r7, #16]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	613b      	str	r3, [r7, #16]
 800376a:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	330c      	adds	r3, #12
 8003772:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	e853 3f00 	ldrex	r3, [r3]
 800377a:	617b      	str	r3, [r7, #20]
   return(result);
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	f043 0310 	orr.w	r3, r3, #16
 8003782:	62bb      	str	r3, [r7, #40]	; 0x28
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	330c      	adds	r3, #12
 800378a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800378c:	627a      	str	r2, [r7, #36]	; 0x24
 800378e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003790:	6a39      	ldr	r1, [r7, #32]
 8003792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003794:	e841 2300 	strex	r3, r2, [r1]
 8003798:	61fb      	str	r3, [r7, #28]
   return(result);
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1e5      	bne.n	800376c <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 80037a0:	e002      	b.n	80037a8 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80037a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80037ac:	e000      	b.n	80037b0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 80037ae:	2302      	movs	r3, #2
  }
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3730      	adds	r7, #48	; 0x30
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b0ba      	sub	sp, #232	; 0xe8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80037de:	2300      	movs	r3, #0
 80037e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80037e4:	2300      	movs	r3, #0
 80037e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80037ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037ee:	f003 030f 	and.w	r3, r3, #15
 80037f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80037f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10f      	bne.n	800381e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003802:	f003 0320 	and.w	r3, r3, #32
 8003806:	2b00      	cmp	r3, #0
 8003808:	d009      	beq.n	800381e <HAL_UART_IRQHandler+0x66>
 800380a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800380e:	f003 0320 	and.w	r3, r3, #32
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 fd9b 	bl	8004352 <UART_Receive_IT>
      return;
 800381c:	e256      	b.n	8003ccc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800381e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003822:	2b00      	cmp	r3, #0
 8003824:	f000 80de 	beq.w	80039e4 <HAL_UART_IRQHandler+0x22c>
 8003828:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800382c:	f003 0301 	and.w	r3, r3, #1
 8003830:	2b00      	cmp	r3, #0
 8003832:	d106      	bne.n	8003842 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003838:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800383c:	2b00      	cmp	r3, #0
 800383e:	f000 80d1 	beq.w	80039e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00b      	beq.n	8003866 <HAL_UART_IRQHandler+0xae>
 800384e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003856:	2b00      	cmp	r3, #0
 8003858:	d005      	beq.n	8003866 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385e:	f043 0201 	orr.w	r2, r3, #1
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800386a:	f003 0304 	and.w	r3, r3, #4
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00b      	beq.n	800388a <HAL_UART_IRQHandler+0xd2>
 8003872:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	2b00      	cmp	r3, #0
 800387c:	d005      	beq.n	800388a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003882:	f043 0202 	orr.w	r2, r3, #2
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800388a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00b      	beq.n	80038ae <HAL_UART_IRQHandler+0xf6>
 8003896:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d005      	beq.n	80038ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	f043 0204 	orr.w	r2, r3, #4
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80038ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038b2:	f003 0308 	and.w	r3, r3, #8
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d011      	beq.n	80038de <HAL_UART_IRQHandler+0x126>
 80038ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038be:	f003 0320 	and.w	r3, r3, #32
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d105      	bne.n	80038d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80038c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d005      	beq.n	80038de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d6:	f043 0208 	orr.w	r2, r3, #8
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	f000 81ed 	beq.w	8003cc2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038ec:	f003 0320 	and.w	r3, r3, #32
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d008      	beq.n	8003906 <HAL_UART_IRQHandler+0x14e>
 80038f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038f8:	f003 0320 	and.w	r3, r3, #32
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d002      	beq.n	8003906 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f000 fd26 	bl	8004352 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	695b      	ldr	r3, [r3, #20]
 800390c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003910:	2b40      	cmp	r3, #64	; 0x40
 8003912:	bf0c      	ite	eq
 8003914:	2301      	moveq	r3, #1
 8003916:	2300      	movne	r3, #0
 8003918:	b2db      	uxtb	r3, r3
 800391a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003922:	f003 0308 	and.w	r3, r3, #8
 8003926:	2b00      	cmp	r3, #0
 8003928:	d103      	bne.n	8003932 <HAL_UART_IRQHandler+0x17a>
 800392a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800392e:	2b00      	cmp	r3, #0
 8003930:	d04f      	beq.n	80039d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 fc2e 	bl	8004194 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003942:	2b40      	cmp	r3, #64	; 0x40
 8003944:	d141      	bne.n	80039ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	3314      	adds	r3, #20
 800394c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003950:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003954:	e853 3f00 	ldrex	r3, [r3]
 8003958:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800395c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003960:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003964:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	3314      	adds	r3, #20
 800396e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003972:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003976:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800397a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800397e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003982:	e841 2300 	strex	r3, r2, [r1]
 8003986:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800398a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1d9      	bne.n	8003946 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003996:	2b00      	cmp	r3, #0
 8003998:	d013      	beq.n	80039c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399e:	4a7d      	ldr	r2, [pc, #500]	; (8003b94 <HAL_UART_IRQHandler+0x3dc>)
 80039a0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7fe fd40 	bl	800242c <HAL_DMA_Abort_IT>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d016      	beq.n	80039e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80039bc:	4610      	mov	r0, r2
 80039be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039c0:	e00e      	b.n	80039e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 f9a4 	bl	8003d10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039c8:	e00a      	b.n	80039e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 f9a0 	bl	8003d10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039d0:	e006      	b.n	80039e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 f99c 	bl	8003d10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80039de:	e170      	b.n	8003cc2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039e0:	bf00      	nop
    return;
 80039e2:	e16e      	b.n	8003cc2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	f040 814a 	bne.w	8003c82 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80039ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039f2:	f003 0310 	and.w	r3, r3, #16
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f000 8143 	beq.w	8003c82 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80039fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a00:	f003 0310 	and.w	r3, r3, #16
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f000 813c 	beq.w	8003c82 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	60bb      	str	r3, [r7, #8]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	60bb      	str	r3, [r7, #8]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	60bb      	str	r3, [r7, #8]
 8003a1e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a2a:	2b40      	cmp	r3, #64	; 0x40
 8003a2c:	f040 80b4 	bne.w	8003b98 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a3c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f000 8140 	beq.w	8003cc6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	f080 8139 	bcs.w	8003cc6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a5a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a60:	69db      	ldr	r3, [r3, #28]
 8003a62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a66:	f000 8088 	beq.w	8003b7a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	330c      	adds	r3, #12
 8003a70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a78:	e853 3f00 	ldrex	r3, [r3]
 8003a7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003a80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	330c      	adds	r3, #12
 8003a92:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003a96:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003a9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a9e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003aa2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003aa6:	e841 2300 	strex	r3, r2, [r1]
 8003aaa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003aae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1d9      	bne.n	8003a6a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	3314      	adds	r3, #20
 8003abc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003abe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ac0:	e853 3f00 	ldrex	r3, [r3]
 8003ac4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003ac6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ac8:	f023 0301 	bic.w	r3, r3, #1
 8003acc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	3314      	adds	r3, #20
 8003ad6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003ada:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003ade:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003ae2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003ae6:	e841 2300 	strex	r3, r2, [r1]
 8003aea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003aec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1e1      	bne.n	8003ab6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	3314      	adds	r3, #20
 8003af8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003afa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003afc:	e853 3f00 	ldrex	r3, [r3]
 8003b00:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003b02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	3314      	adds	r3, #20
 8003b12:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003b16:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003b18:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b1a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003b1c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003b1e:	e841 2300 	strex	r3, r2, [r1]
 8003b22:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003b24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1e3      	bne.n	8003af2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2220      	movs	r2, #32
 8003b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	330c      	adds	r3, #12
 8003b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b42:	e853 3f00 	ldrex	r3, [r3]
 8003b46:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003b48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b4a:	f023 0310 	bic.w	r3, r3, #16
 8003b4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	330c      	adds	r3, #12
 8003b58:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003b5c:	65ba      	str	r2, [r7, #88]	; 0x58
 8003b5e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b62:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b64:	e841 2300 	strex	r3, r2, [r1]
 8003b68:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003b6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d1e3      	bne.n	8003b38 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b74:	4618      	mov	r0, r3
 8003b76:	f7fe fbe9 	bl	800234c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	4619      	mov	r1, r3
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 f8ca 	bl	8003d24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b90:	e099      	b.n	8003cc6 <HAL_UART_IRQHandler+0x50e>
 8003b92:	bf00      	nop
 8003b94:	0800425b 	.word	0x0800425b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f000 808b 	beq.w	8003cca <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003bb4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	f000 8086 	beq.w	8003cca <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	330c      	adds	r3, #12
 8003bc4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bc8:	e853 3f00 	ldrex	r3, [r3]
 8003bcc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bd0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bd4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	330c      	adds	r3, #12
 8003bde:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003be2:	647a      	str	r2, [r7, #68]	; 0x44
 8003be4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003be8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003bea:	e841 2300 	strex	r3, r2, [r1]
 8003bee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003bf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1e3      	bne.n	8003bbe <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	3314      	adds	r3, #20
 8003bfc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c00:	e853 3f00 	ldrex	r3, [r3]
 8003c04:	623b      	str	r3, [r7, #32]
   return(result);
 8003c06:	6a3b      	ldr	r3, [r7, #32]
 8003c08:	f023 0301 	bic.w	r3, r3, #1
 8003c0c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	3314      	adds	r3, #20
 8003c16:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003c1a:	633a      	str	r2, [r7, #48]	; 0x30
 8003c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c22:	e841 2300 	strex	r3, r2, [r1]
 8003c26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1e3      	bne.n	8003bf6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2220      	movs	r2, #32
 8003c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	330c      	adds	r3, #12
 8003c42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	e853 3f00 	ldrex	r3, [r3]
 8003c4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f023 0310 	bic.w	r3, r3, #16
 8003c52:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	330c      	adds	r3, #12
 8003c5c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003c60:	61fa      	str	r2, [r7, #28]
 8003c62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c64:	69b9      	ldr	r1, [r7, #24]
 8003c66:	69fa      	ldr	r2, [r7, #28]
 8003c68:	e841 2300 	strex	r3, r2, [r1]
 8003c6c:	617b      	str	r3, [r7, #20]
   return(result);
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d1e3      	bne.n	8003c3c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c78:	4619      	mov	r1, r3
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 f852 	bl	8003d24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c80:	e023      	b.n	8003cca <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d009      	beq.n	8003ca2 <HAL_UART_IRQHandler+0x4ea>
 8003c8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d003      	beq.n	8003ca2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 faf1 	bl	8004282 <UART_Transmit_IT>
    return;
 8003ca0:	e014      	b.n	8003ccc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00e      	beq.n	8003ccc <HAL_UART_IRQHandler+0x514>
 8003cae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d008      	beq.n	8003ccc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 fb31 	bl	8004322 <UART_EndTransmit_IT>
    return;
 8003cc0:	e004      	b.n	8003ccc <HAL_UART_IRQHandler+0x514>
    return;
 8003cc2:	bf00      	nop
 8003cc4:	e002      	b.n	8003ccc <HAL_UART_IRQHandler+0x514>
      return;
 8003cc6:	bf00      	nop
 8003cc8:	e000      	b.n	8003ccc <HAL_UART_IRQHandler+0x514>
      return;
 8003cca:	bf00      	nop
  }
}
 8003ccc:	37e8      	adds	r7, #232	; 0xe8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop

08003cd4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d30:	bf00      	nop
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b09c      	sub	sp, #112	; 0x70
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d48:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d172      	bne.n	8003e3e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003d58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	330c      	adds	r3, #12
 8003d64:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d68:	e853 3f00 	ldrex	r3, [r3]
 8003d6c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003d6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d74:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	330c      	adds	r3, #12
 8003d7c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003d7e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003d80:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d82:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d86:	e841 2300 	strex	r3, r2, [r1]
 8003d8a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003d8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1e5      	bne.n	8003d5e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	3314      	adds	r3, #20
 8003d98:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d9c:	e853 3f00 	ldrex	r3, [r3]
 8003da0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003da4:	f023 0301 	bic.w	r3, r3, #1
 8003da8:	667b      	str	r3, [r7, #100]	; 0x64
 8003daa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	3314      	adds	r3, #20
 8003db0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003db2:	647a      	str	r2, [r7, #68]	; 0x44
 8003db4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003db8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003dba:	e841 2300 	strex	r3, r2, [r1]
 8003dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1e5      	bne.n	8003d92 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	3314      	adds	r3, #20
 8003dcc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd0:	e853 3f00 	ldrex	r3, [r3]
 8003dd4:	623b      	str	r3, [r7, #32]
   return(result);
 8003dd6:	6a3b      	ldr	r3, [r7, #32]
 8003dd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ddc:	663b      	str	r3, [r7, #96]	; 0x60
 8003dde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	3314      	adds	r3, #20
 8003de4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003de6:	633a      	str	r2, [r7, #48]	; 0x30
 8003de8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003dec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dee:	e841 2300 	strex	r3, r2, [r1]
 8003df2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1e5      	bne.n	8003dc6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003dfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dfc:	2220      	movs	r2, #32
 8003dfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d119      	bne.n	8003e3e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	330c      	adds	r3, #12
 8003e10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	e853 3f00 	ldrex	r3, [r3]
 8003e18:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f023 0310 	bic.w	r3, r3, #16
 8003e20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	330c      	adds	r3, #12
 8003e28:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003e2a:	61fa      	str	r2, [r7, #28]
 8003e2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e2e:	69b9      	ldr	r1, [r7, #24]
 8003e30:	69fa      	ldr	r2, [r7, #28]
 8003e32:	e841 2300 	strex	r3, r2, [r1]
 8003e36:	617b      	str	r3, [r7, #20]
   return(result);
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1e5      	bne.n	8003e0a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d106      	bne.n	8003e54 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003e4e:	f7ff ff69 	bl	8003d24 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003e52:	e002      	b.n	8003e5a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8003e54:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003e56:	f7ff ff47 	bl	8003ce8 <HAL_UART_RxCpltCallback>
}
 8003e5a:	bf00      	nop
 8003e5c:	3770      	adds	r7, #112	; 0x70
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b084      	sub	sp, #16
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d108      	bne.n	8003e8a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e7c:	085b      	lsrs	r3, r3, #1
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	4619      	mov	r1, r3
 8003e82:	68f8      	ldr	r0, [r7, #12]
 8003e84:	f7ff ff4e 	bl	8003d24 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003e88:	e002      	b.n	8003e90 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f7ff ff36 	bl	8003cfc <HAL_UART_RxHalfCpltCallback>
}
 8003e90:	bf00      	nop
 8003e92:	3710      	adds	r7, #16
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eb4:	2b80      	cmp	r3, #128	; 0x80
 8003eb6:	bf0c      	ite	eq
 8003eb8:	2301      	moveq	r3, #1
 8003eba:	2300      	movne	r3, #0
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	2b21      	cmp	r3, #33	; 0x21
 8003eca:	d108      	bne.n	8003ede <UART_DMAError+0x46>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d005      	beq.n	8003ede <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003ed8:	68b8      	ldr	r0, [r7, #8]
 8003eda:	f000 f933 	bl	8004144 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	695b      	ldr	r3, [r3, #20]
 8003ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee8:	2b40      	cmp	r3, #64	; 0x40
 8003eea:	bf0c      	ite	eq
 8003eec:	2301      	moveq	r3, #1
 8003eee:	2300      	movne	r3, #0
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	2b22      	cmp	r3, #34	; 0x22
 8003efe:	d108      	bne.n	8003f12 <UART_DMAError+0x7a>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d005      	beq.n	8003f12 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003f0c:	68b8      	ldr	r0, [r7, #8]
 8003f0e:	f000 f941 	bl	8004194 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f16:	f043 0210 	orr.w	r2, r3, #16
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f1e:	68b8      	ldr	r0, [r7, #8]
 8003f20:	f7ff fef6 	bl	8003d10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f24:	bf00      	nop
 8003f26:	3710      	adds	r7, #16
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b090      	sub	sp, #64	; 0x40
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	603b      	str	r3, [r7, #0]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f3c:	e050      	b.n	8003fe0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f44:	d04c      	beq.n	8003fe0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d007      	beq.n	8003f5c <UART_WaitOnFlagUntilTimeout+0x30>
 8003f4c:	f7fd ffb6 	bl	8001ebc <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d241      	bcs.n	8003fe0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	330c      	adds	r3, #12
 8003f62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f66:	e853 3f00 	ldrex	r3, [r3]
 8003f6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	330c      	adds	r3, #12
 8003f7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f7c:	637a      	str	r2, [r7, #52]	; 0x34
 8003f7e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f84:	e841 2300 	strex	r3, r2, [r1]
 8003f88:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d1e5      	bne.n	8003f5c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	3314      	adds	r3, #20
 8003f96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	e853 3f00 	ldrex	r3, [r3]
 8003f9e:	613b      	str	r3, [r7, #16]
   return(result);
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	f023 0301 	bic.w	r3, r3, #1
 8003fa6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	3314      	adds	r3, #20
 8003fae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fb0:	623a      	str	r2, [r7, #32]
 8003fb2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb4:	69f9      	ldr	r1, [r7, #28]
 8003fb6:	6a3a      	ldr	r2, [r7, #32]
 8003fb8:	e841 2300 	strex	r3, r2, [r1]
 8003fbc:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d1e5      	bne.n	8003f90 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e00f      	b.n	8004000 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	68ba      	ldr	r2, [r7, #8]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	bf0c      	ite	eq
 8003ff0:	2301      	moveq	r3, #1
 8003ff2:	2300      	movne	r3, #0
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	79fb      	ldrb	r3, [r7, #7]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d09f      	beq.n	8003f3e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
}
 8004000:	4618      	mov	r0, r3
 8004002:	3740      	adds	r7, #64	; 0x40
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b098      	sub	sp, #96	; 0x60
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	4613      	mov	r3, r2
 8004014:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004016:	68ba      	ldr	r2, [r7, #8]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	88fa      	ldrh	r2, [r7, #6]
 8004020:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2222      	movs	r2, #34	; 0x22
 800402c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004034:	4a40      	ldr	r2, [pc, #256]	; (8004138 <UART_Start_Receive_DMA+0x130>)
 8004036:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403c:	4a3f      	ldr	r2, [pc, #252]	; (800413c <UART_Start_Receive_DMA+0x134>)
 800403e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004044:	4a3e      	ldr	r2, [pc, #248]	; (8004140 <UART_Start_Receive_DMA+0x138>)
 8004046:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800404c:	2200      	movs	r2, #0
 800404e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004050:	f107 0308 	add.w	r3, r7, #8
 8004054:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	3304      	adds	r3, #4
 8004060:	4619      	mov	r1, r3
 8004062:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	88fb      	ldrh	r3, [r7, #6]
 8004068:	f7fe f918 	bl	800229c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800406c:	2300      	movs	r3, #0
 800406e:	613b      	str	r3, [r7, #16]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	613b      	str	r3, [r7, #16]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	613b      	str	r3, [r7, #16]
 8004080:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d019      	beq.n	80040c6 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	330c      	adds	r3, #12
 8004098:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800409c:	e853 3f00 	ldrex	r3, [r3]
 80040a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80040a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	330c      	adds	r3, #12
 80040b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80040b2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80040b4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80040b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040ba:	e841 2300 	strex	r3, r2, [r1]
 80040be:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80040c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1e5      	bne.n	8004092 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	3314      	adds	r3, #20
 80040cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d0:	e853 3f00 	ldrex	r3, [r3]
 80040d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80040d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d8:	f043 0301 	orr.w	r3, r3, #1
 80040dc:	657b      	str	r3, [r7, #84]	; 0x54
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	3314      	adds	r3, #20
 80040e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80040e6:	63ba      	str	r2, [r7, #56]	; 0x38
 80040e8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80040ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040ee:	e841 2300 	strex	r3, r2, [r1]
 80040f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80040f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1e5      	bne.n	80040c6 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	3314      	adds	r3, #20
 8004100:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	e853 3f00 	ldrex	r3, [r3]
 8004108:	617b      	str	r3, [r7, #20]
   return(result);
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004110:	653b      	str	r3, [r7, #80]	; 0x50
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	3314      	adds	r3, #20
 8004118:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800411a:	627a      	str	r2, [r7, #36]	; 0x24
 800411c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411e:	6a39      	ldr	r1, [r7, #32]
 8004120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004122:	e841 2300 	strex	r3, r2, [r1]
 8004126:	61fb      	str	r3, [r7, #28]
   return(result);
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d1e5      	bne.n	80040fa <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	3760      	adds	r7, #96	; 0x60
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	08003d3d 	.word	0x08003d3d
 800413c:	08003e63 	.word	0x08003e63
 8004140:	08003e99 	.word	0x08003e99

08004144 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004144:	b480      	push	{r7}
 8004146:	b089      	sub	sp, #36	; 0x24
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	330c      	adds	r3, #12
 8004152:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	e853 3f00 	ldrex	r3, [r3]
 800415a:	60bb      	str	r3, [r7, #8]
   return(result);
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004162:	61fb      	str	r3, [r7, #28]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	330c      	adds	r3, #12
 800416a:	69fa      	ldr	r2, [r7, #28]
 800416c:	61ba      	str	r2, [r7, #24]
 800416e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004170:	6979      	ldr	r1, [r7, #20]
 8004172:	69ba      	ldr	r2, [r7, #24]
 8004174:	e841 2300 	strex	r3, r2, [r1]
 8004178:	613b      	str	r3, [r7, #16]
   return(result);
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d1e5      	bne.n	800414c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2220      	movs	r2, #32
 8004184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004188:	bf00      	nop
 800418a:	3724      	adds	r7, #36	; 0x24
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004194:	b480      	push	{r7}
 8004196:	b095      	sub	sp, #84	; 0x54
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	330c      	adds	r3, #12
 80041a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041a6:	e853 3f00 	ldrex	r3, [r3]
 80041aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80041ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	330c      	adds	r3, #12
 80041ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041bc:	643a      	str	r2, [r7, #64]	; 0x40
 80041be:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80041c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80041c4:	e841 2300 	strex	r3, r2, [r1]
 80041c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d1e5      	bne.n	800419c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	3314      	adds	r3, #20
 80041d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d8:	6a3b      	ldr	r3, [r7, #32]
 80041da:	e853 3f00 	ldrex	r3, [r3]
 80041de:	61fb      	str	r3, [r7, #28]
   return(result);
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	f023 0301 	bic.w	r3, r3, #1
 80041e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	3314      	adds	r3, #20
 80041ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041f8:	e841 2300 	strex	r3, r2, [r1]
 80041fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1e5      	bne.n	80041d0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004208:	2b01      	cmp	r3, #1
 800420a:	d119      	bne.n	8004240 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	330c      	adds	r3, #12
 8004212:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	e853 3f00 	ldrex	r3, [r3]
 800421a:	60bb      	str	r3, [r7, #8]
   return(result);
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	f023 0310 	bic.w	r3, r3, #16
 8004222:	647b      	str	r3, [r7, #68]	; 0x44
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	330c      	adds	r3, #12
 800422a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800422c:	61ba      	str	r2, [r7, #24]
 800422e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004230:	6979      	ldr	r1, [r7, #20]
 8004232:	69ba      	ldr	r2, [r7, #24]
 8004234:	e841 2300 	strex	r3, r2, [r1]
 8004238:	613b      	str	r3, [r7, #16]
   return(result);
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1e5      	bne.n	800420c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2220      	movs	r2, #32
 8004244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800424e:	bf00      	nop
 8004250:	3754      	adds	r7, #84	; 0x54
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr

0800425a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b084      	sub	sp, #16
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004266:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2200      	movs	r2, #0
 8004272:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004274:	68f8      	ldr	r0, [r7, #12]
 8004276:	f7ff fd4b 	bl	8003d10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800427a:	bf00      	nop
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}

08004282 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004282:	b480      	push	{r7}
 8004284:	b085      	sub	sp, #20
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b21      	cmp	r3, #33	; 0x21
 8004294:	d13e      	bne.n	8004314 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800429e:	d114      	bne.n	80042ca <UART_Transmit_IT+0x48>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d110      	bne.n	80042ca <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a1b      	ldr	r3, [r3, #32]
 80042ac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	881b      	ldrh	r3, [r3, #0]
 80042b2:	461a      	mov	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042bc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a1b      	ldr	r3, [r3, #32]
 80042c2:	1c9a      	adds	r2, r3, #2
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	621a      	str	r2, [r3, #32]
 80042c8:	e008      	b.n	80042dc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a1b      	ldr	r3, [r3, #32]
 80042ce:	1c59      	adds	r1, r3, #1
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	6211      	str	r1, [r2, #32]
 80042d4:	781a      	ldrb	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	3b01      	subs	r3, #1
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	4619      	mov	r1, r3
 80042ea:	84d1      	strh	r1, [r2, #38]	; 0x26
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d10f      	bne.n	8004310 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68da      	ldr	r2, [r3, #12]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042fe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68da      	ldr	r2, [r3, #12]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800430e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004310:	2300      	movs	r3, #0
 8004312:	e000      	b.n	8004316 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004314:	2302      	movs	r3, #2
  }
}
 8004316:	4618      	mov	r0, r3
 8004318:	3714      	adds	r7, #20
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr

08004322 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004322:	b580      	push	{r7, lr}
 8004324:	b082      	sub	sp, #8
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68da      	ldr	r2, [r3, #12]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004338:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2220      	movs	r2, #32
 800433e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f7ff fcc6 	bl	8003cd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3708      	adds	r7, #8
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004352:	b580      	push	{r7, lr}
 8004354:	b08c      	sub	sp, #48	; 0x30
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b22      	cmp	r3, #34	; 0x22
 8004364:	f040 80ab 	bne.w	80044be <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004370:	d117      	bne.n	80043a2 <UART_Receive_IT+0x50>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d113      	bne.n	80043a2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800437a:	2300      	movs	r3, #0
 800437c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004382:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	b29b      	uxth	r3, r3
 800438c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004390:	b29a      	uxth	r2, r3
 8004392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004394:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800439a:	1c9a      	adds	r2, r3, #2
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	629a      	str	r2, [r3, #40]	; 0x28
 80043a0:	e026      	b.n	80043f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80043a8:	2300      	movs	r3, #0
 80043aa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043b4:	d007      	beq.n	80043c6 <UART_Receive_IT+0x74>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10a      	bne.n	80043d4 <UART_Receive_IT+0x82>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d106      	bne.n	80043d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	b2da      	uxtb	r2, r3
 80043ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d0:	701a      	strb	r2, [r3, #0]
 80043d2:	e008      	b.n	80043e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043e0:	b2da      	uxtb	r2, r3
 80043e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ea:	1c5a      	adds	r2, r3, #1
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	3b01      	subs	r3, #1
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	4619      	mov	r1, r3
 80043fe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004400:	2b00      	cmp	r3, #0
 8004402:	d15a      	bne.n	80044ba <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68da      	ldr	r2, [r3, #12]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f022 0220 	bic.w	r2, r2, #32
 8004412:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68da      	ldr	r2, [r3, #12]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004422:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	695a      	ldr	r2, [r3, #20]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f022 0201 	bic.w	r2, r2, #1
 8004432:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2220      	movs	r2, #32
 8004438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004440:	2b01      	cmp	r3, #1
 8004442:	d135      	bne.n	80044b0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	330c      	adds	r3, #12
 8004450:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	e853 3f00 	ldrex	r3, [r3]
 8004458:	613b      	str	r3, [r7, #16]
   return(result);
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	f023 0310 	bic.w	r3, r3, #16
 8004460:	627b      	str	r3, [r7, #36]	; 0x24
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	330c      	adds	r3, #12
 8004468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800446a:	623a      	str	r2, [r7, #32]
 800446c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446e:	69f9      	ldr	r1, [r7, #28]
 8004470:	6a3a      	ldr	r2, [r7, #32]
 8004472:	e841 2300 	strex	r3, r2, [r1]
 8004476:	61bb      	str	r3, [r7, #24]
   return(result);
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1e5      	bne.n	800444a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0310 	and.w	r3, r3, #16
 8004488:	2b10      	cmp	r3, #16
 800448a:	d10a      	bne.n	80044a2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800448c:	2300      	movs	r3, #0
 800448e:	60fb      	str	r3, [r7, #12]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	60fb      	str	r3, [r7, #12]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	60fb      	str	r3, [r7, #12]
 80044a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80044a6:	4619      	mov	r1, r3
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f7ff fc3b 	bl	8003d24 <HAL_UARTEx_RxEventCallback>
 80044ae:	e002      	b.n	80044b6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f7ff fc19 	bl	8003ce8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80044b6:	2300      	movs	r3, #0
 80044b8:	e002      	b.n	80044c0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80044ba:	2300      	movs	r3, #0
 80044bc:	e000      	b.n	80044c0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80044be:	2302      	movs	r3, #2
  }
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3730      	adds	r7, #48	; 0x30
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044cc:	b0c0      	sub	sp, #256	; 0x100
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80044e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044e4:	68d9      	ldr	r1, [r3, #12]
 80044e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	ea40 0301 	orr.w	r3, r0, r1
 80044f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044f6:	689a      	ldr	r2, [r3, #8]
 80044f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	431a      	orrs	r2, r3
 8004500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	431a      	orrs	r2, r3
 8004508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800450c:	69db      	ldr	r3, [r3, #28]
 800450e:	4313      	orrs	r3, r2
 8004510:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004520:	f021 010c 	bic.w	r1, r1, #12
 8004524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800452e:	430b      	orrs	r3, r1
 8004530:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800453e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004542:	6999      	ldr	r1, [r3, #24]
 8004544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	ea40 0301 	orr.w	r3, r0, r1
 800454e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	4b8f      	ldr	r3, [pc, #572]	; (8004794 <UART_SetConfig+0x2cc>)
 8004558:	429a      	cmp	r2, r3
 800455a:	d005      	beq.n	8004568 <UART_SetConfig+0xa0>
 800455c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	4b8d      	ldr	r3, [pc, #564]	; (8004798 <UART_SetConfig+0x2d0>)
 8004564:	429a      	cmp	r2, r3
 8004566:	d104      	bne.n	8004572 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004568:	f7fe ffce 	bl	8003508 <HAL_RCC_GetPCLK2Freq>
 800456c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004570:	e003      	b.n	800457a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004572:	f7fe ffb5 	bl	80034e0 <HAL_RCC_GetPCLK1Freq>
 8004576:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800457a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800457e:	69db      	ldr	r3, [r3, #28]
 8004580:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004584:	f040 810c 	bne.w	80047a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004588:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800458c:	2200      	movs	r2, #0
 800458e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004592:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004596:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800459a:	4622      	mov	r2, r4
 800459c:	462b      	mov	r3, r5
 800459e:	1891      	adds	r1, r2, r2
 80045a0:	65b9      	str	r1, [r7, #88]	; 0x58
 80045a2:	415b      	adcs	r3, r3
 80045a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80045aa:	4621      	mov	r1, r4
 80045ac:	eb12 0801 	adds.w	r8, r2, r1
 80045b0:	4629      	mov	r1, r5
 80045b2:	eb43 0901 	adc.w	r9, r3, r1
 80045b6:	f04f 0200 	mov.w	r2, #0
 80045ba:	f04f 0300 	mov.w	r3, #0
 80045be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045ca:	4690      	mov	r8, r2
 80045cc:	4699      	mov	r9, r3
 80045ce:	4623      	mov	r3, r4
 80045d0:	eb18 0303 	adds.w	r3, r8, r3
 80045d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80045d8:	462b      	mov	r3, r5
 80045da:	eb49 0303 	adc.w	r3, r9, r3
 80045de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80045e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80045ee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80045f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80045f6:	460b      	mov	r3, r1
 80045f8:	18db      	adds	r3, r3, r3
 80045fa:	653b      	str	r3, [r7, #80]	; 0x50
 80045fc:	4613      	mov	r3, r2
 80045fe:	eb42 0303 	adc.w	r3, r2, r3
 8004602:	657b      	str	r3, [r7, #84]	; 0x54
 8004604:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004608:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800460c:	f7fc fad4 	bl	8000bb8 <__aeabi_uldivmod>
 8004610:	4602      	mov	r2, r0
 8004612:	460b      	mov	r3, r1
 8004614:	4b61      	ldr	r3, [pc, #388]	; (800479c <UART_SetConfig+0x2d4>)
 8004616:	fba3 2302 	umull	r2, r3, r3, r2
 800461a:	095b      	lsrs	r3, r3, #5
 800461c:	011c      	lsls	r4, r3, #4
 800461e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004622:	2200      	movs	r2, #0
 8004624:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004628:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800462c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004630:	4642      	mov	r2, r8
 8004632:	464b      	mov	r3, r9
 8004634:	1891      	adds	r1, r2, r2
 8004636:	64b9      	str	r1, [r7, #72]	; 0x48
 8004638:	415b      	adcs	r3, r3
 800463a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800463c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004640:	4641      	mov	r1, r8
 8004642:	eb12 0a01 	adds.w	sl, r2, r1
 8004646:	4649      	mov	r1, r9
 8004648:	eb43 0b01 	adc.w	fp, r3, r1
 800464c:	f04f 0200 	mov.w	r2, #0
 8004650:	f04f 0300 	mov.w	r3, #0
 8004654:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004658:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800465c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004660:	4692      	mov	sl, r2
 8004662:	469b      	mov	fp, r3
 8004664:	4643      	mov	r3, r8
 8004666:	eb1a 0303 	adds.w	r3, sl, r3
 800466a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800466e:	464b      	mov	r3, r9
 8004670:	eb4b 0303 	adc.w	r3, fp, r3
 8004674:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004684:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004688:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800468c:	460b      	mov	r3, r1
 800468e:	18db      	adds	r3, r3, r3
 8004690:	643b      	str	r3, [r7, #64]	; 0x40
 8004692:	4613      	mov	r3, r2
 8004694:	eb42 0303 	adc.w	r3, r2, r3
 8004698:	647b      	str	r3, [r7, #68]	; 0x44
 800469a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800469e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80046a2:	f7fc fa89 	bl	8000bb8 <__aeabi_uldivmod>
 80046a6:	4602      	mov	r2, r0
 80046a8:	460b      	mov	r3, r1
 80046aa:	4611      	mov	r1, r2
 80046ac:	4b3b      	ldr	r3, [pc, #236]	; (800479c <UART_SetConfig+0x2d4>)
 80046ae:	fba3 2301 	umull	r2, r3, r3, r1
 80046b2:	095b      	lsrs	r3, r3, #5
 80046b4:	2264      	movs	r2, #100	; 0x64
 80046b6:	fb02 f303 	mul.w	r3, r2, r3
 80046ba:	1acb      	subs	r3, r1, r3
 80046bc:	00db      	lsls	r3, r3, #3
 80046be:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80046c2:	4b36      	ldr	r3, [pc, #216]	; (800479c <UART_SetConfig+0x2d4>)
 80046c4:	fba3 2302 	umull	r2, r3, r3, r2
 80046c8:	095b      	lsrs	r3, r3, #5
 80046ca:	005b      	lsls	r3, r3, #1
 80046cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80046d0:	441c      	add	r4, r3
 80046d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046d6:	2200      	movs	r2, #0
 80046d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80046dc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80046e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80046e4:	4642      	mov	r2, r8
 80046e6:	464b      	mov	r3, r9
 80046e8:	1891      	adds	r1, r2, r2
 80046ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80046ec:	415b      	adcs	r3, r3
 80046ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80046f4:	4641      	mov	r1, r8
 80046f6:	1851      	adds	r1, r2, r1
 80046f8:	6339      	str	r1, [r7, #48]	; 0x30
 80046fa:	4649      	mov	r1, r9
 80046fc:	414b      	adcs	r3, r1
 80046fe:	637b      	str	r3, [r7, #52]	; 0x34
 8004700:	f04f 0200 	mov.w	r2, #0
 8004704:	f04f 0300 	mov.w	r3, #0
 8004708:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800470c:	4659      	mov	r1, fp
 800470e:	00cb      	lsls	r3, r1, #3
 8004710:	4651      	mov	r1, sl
 8004712:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004716:	4651      	mov	r1, sl
 8004718:	00ca      	lsls	r2, r1, #3
 800471a:	4610      	mov	r0, r2
 800471c:	4619      	mov	r1, r3
 800471e:	4603      	mov	r3, r0
 8004720:	4642      	mov	r2, r8
 8004722:	189b      	adds	r3, r3, r2
 8004724:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004728:	464b      	mov	r3, r9
 800472a:	460a      	mov	r2, r1
 800472c:	eb42 0303 	adc.w	r3, r2, r3
 8004730:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004740:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004744:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004748:	460b      	mov	r3, r1
 800474a:	18db      	adds	r3, r3, r3
 800474c:	62bb      	str	r3, [r7, #40]	; 0x28
 800474e:	4613      	mov	r3, r2
 8004750:	eb42 0303 	adc.w	r3, r2, r3
 8004754:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004756:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800475a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800475e:	f7fc fa2b 	bl	8000bb8 <__aeabi_uldivmod>
 8004762:	4602      	mov	r2, r0
 8004764:	460b      	mov	r3, r1
 8004766:	4b0d      	ldr	r3, [pc, #52]	; (800479c <UART_SetConfig+0x2d4>)
 8004768:	fba3 1302 	umull	r1, r3, r3, r2
 800476c:	095b      	lsrs	r3, r3, #5
 800476e:	2164      	movs	r1, #100	; 0x64
 8004770:	fb01 f303 	mul.w	r3, r1, r3
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	00db      	lsls	r3, r3, #3
 8004778:	3332      	adds	r3, #50	; 0x32
 800477a:	4a08      	ldr	r2, [pc, #32]	; (800479c <UART_SetConfig+0x2d4>)
 800477c:	fba2 2303 	umull	r2, r3, r2, r3
 8004780:	095b      	lsrs	r3, r3, #5
 8004782:	f003 0207 	and.w	r2, r3, #7
 8004786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4422      	add	r2, r4
 800478e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004790:	e106      	b.n	80049a0 <UART_SetConfig+0x4d8>
 8004792:	bf00      	nop
 8004794:	40011000 	.word	0x40011000
 8004798:	40011400 	.word	0x40011400
 800479c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047a4:	2200      	movs	r2, #0
 80047a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80047aa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80047ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80047b2:	4642      	mov	r2, r8
 80047b4:	464b      	mov	r3, r9
 80047b6:	1891      	adds	r1, r2, r2
 80047b8:	6239      	str	r1, [r7, #32]
 80047ba:	415b      	adcs	r3, r3
 80047bc:	627b      	str	r3, [r7, #36]	; 0x24
 80047be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80047c2:	4641      	mov	r1, r8
 80047c4:	1854      	adds	r4, r2, r1
 80047c6:	4649      	mov	r1, r9
 80047c8:	eb43 0501 	adc.w	r5, r3, r1
 80047cc:	f04f 0200 	mov.w	r2, #0
 80047d0:	f04f 0300 	mov.w	r3, #0
 80047d4:	00eb      	lsls	r3, r5, #3
 80047d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047da:	00e2      	lsls	r2, r4, #3
 80047dc:	4614      	mov	r4, r2
 80047de:	461d      	mov	r5, r3
 80047e0:	4643      	mov	r3, r8
 80047e2:	18e3      	adds	r3, r4, r3
 80047e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80047e8:	464b      	mov	r3, r9
 80047ea:	eb45 0303 	adc.w	r3, r5, r3
 80047ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80047f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80047fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004802:	f04f 0200 	mov.w	r2, #0
 8004806:	f04f 0300 	mov.w	r3, #0
 800480a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800480e:	4629      	mov	r1, r5
 8004810:	008b      	lsls	r3, r1, #2
 8004812:	4621      	mov	r1, r4
 8004814:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004818:	4621      	mov	r1, r4
 800481a:	008a      	lsls	r2, r1, #2
 800481c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004820:	f7fc f9ca 	bl	8000bb8 <__aeabi_uldivmod>
 8004824:	4602      	mov	r2, r0
 8004826:	460b      	mov	r3, r1
 8004828:	4b60      	ldr	r3, [pc, #384]	; (80049ac <UART_SetConfig+0x4e4>)
 800482a:	fba3 2302 	umull	r2, r3, r3, r2
 800482e:	095b      	lsrs	r3, r3, #5
 8004830:	011c      	lsls	r4, r3, #4
 8004832:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004836:	2200      	movs	r2, #0
 8004838:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800483c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004840:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004844:	4642      	mov	r2, r8
 8004846:	464b      	mov	r3, r9
 8004848:	1891      	adds	r1, r2, r2
 800484a:	61b9      	str	r1, [r7, #24]
 800484c:	415b      	adcs	r3, r3
 800484e:	61fb      	str	r3, [r7, #28]
 8004850:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004854:	4641      	mov	r1, r8
 8004856:	1851      	adds	r1, r2, r1
 8004858:	6139      	str	r1, [r7, #16]
 800485a:	4649      	mov	r1, r9
 800485c:	414b      	adcs	r3, r1
 800485e:	617b      	str	r3, [r7, #20]
 8004860:	f04f 0200 	mov.w	r2, #0
 8004864:	f04f 0300 	mov.w	r3, #0
 8004868:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800486c:	4659      	mov	r1, fp
 800486e:	00cb      	lsls	r3, r1, #3
 8004870:	4651      	mov	r1, sl
 8004872:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004876:	4651      	mov	r1, sl
 8004878:	00ca      	lsls	r2, r1, #3
 800487a:	4610      	mov	r0, r2
 800487c:	4619      	mov	r1, r3
 800487e:	4603      	mov	r3, r0
 8004880:	4642      	mov	r2, r8
 8004882:	189b      	adds	r3, r3, r2
 8004884:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004888:	464b      	mov	r3, r9
 800488a:	460a      	mov	r2, r1
 800488c:	eb42 0303 	adc.w	r3, r2, r3
 8004890:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	67bb      	str	r3, [r7, #120]	; 0x78
 800489e:	67fa      	str	r2, [r7, #124]	; 0x7c
 80048a0:	f04f 0200 	mov.w	r2, #0
 80048a4:	f04f 0300 	mov.w	r3, #0
 80048a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80048ac:	4649      	mov	r1, r9
 80048ae:	008b      	lsls	r3, r1, #2
 80048b0:	4641      	mov	r1, r8
 80048b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048b6:	4641      	mov	r1, r8
 80048b8:	008a      	lsls	r2, r1, #2
 80048ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80048be:	f7fc f97b 	bl	8000bb8 <__aeabi_uldivmod>
 80048c2:	4602      	mov	r2, r0
 80048c4:	460b      	mov	r3, r1
 80048c6:	4611      	mov	r1, r2
 80048c8:	4b38      	ldr	r3, [pc, #224]	; (80049ac <UART_SetConfig+0x4e4>)
 80048ca:	fba3 2301 	umull	r2, r3, r3, r1
 80048ce:	095b      	lsrs	r3, r3, #5
 80048d0:	2264      	movs	r2, #100	; 0x64
 80048d2:	fb02 f303 	mul.w	r3, r2, r3
 80048d6:	1acb      	subs	r3, r1, r3
 80048d8:	011b      	lsls	r3, r3, #4
 80048da:	3332      	adds	r3, #50	; 0x32
 80048dc:	4a33      	ldr	r2, [pc, #204]	; (80049ac <UART_SetConfig+0x4e4>)
 80048de:	fba2 2303 	umull	r2, r3, r2, r3
 80048e2:	095b      	lsrs	r3, r3, #5
 80048e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048e8:	441c      	add	r4, r3
 80048ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048ee:	2200      	movs	r2, #0
 80048f0:	673b      	str	r3, [r7, #112]	; 0x70
 80048f2:	677a      	str	r2, [r7, #116]	; 0x74
 80048f4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80048f8:	4642      	mov	r2, r8
 80048fa:	464b      	mov	r3, r9
 80048fc:	1891      	adds	r1, r2, r2
 80048fe:	60b9      	str	r1, [r7, #8]
 8004900:	415b      	adcs	r3, r3
 8004902:	60fb      	str	r3, [r7, #12]
 8004904:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004908:	4641      	mov	r1, r8
 800490a:	1851      	adds	r1, r2, r1
 800490c:	6039      	str	r1, [r7, #0]
 800490e:	4649      	mov	r1, r9
 8004910:	414b      	adcs	r3, r1
 8004912:	607b      	str	r3, [r7, #4]
 8004914:	f04f 0200 	mov.w	r2, #0
 8004918:	f04f 0300 	mov.w	r3, #0
 800491c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004920:	4659      	mov	r1, fp
 8004922:	00cb      	lsls	r3, r1, #3
 8004924:	4651      	mov	r1, sl
 8004926:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800492a:	4651      	mov	r1, sl
 800492c:	00ca      	lsls	r2, r1, #3
 800492e:	4610      	mov	r0, r2
 8004930:	4619      	mov	r1, r3
 8004932:	4603      	mov	r3, r0
 8004934:	4642      	mov	r2, r8
 8004936:	189b      	adds	r3, r3, r2
 8004938:	66bb      	str	r3, [r7, #104]	; 0x68
 800493a:	464b      	mov	r3, r9
 800493c:	460a      	mov	r2, r1
 800493e:	eb42 0303 	adc.w	r3, r2, r3
 8004942:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	663b      	str	r3, [r7, #96]	; 0x60
 800494e:	667a      	str	r2, [r7, #100]	; 0x64
 8004950:	f04f 0200 	mov.w	r2, #0
 8004954:	f04f 0300 	mov.w	r3, #0
 8004958:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800495c:	4649      	mov	r1, r9
 800495e:	008b      	lsls	r3, r1, #2
 8004960:	4641      	mov	r1, r8
 8004962:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004966:	4641      	mov	r1, r8
 8004968:	008a      	lsls	r2, r1, #2
 800496a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800496e:	f7fc f923 	bl	8000bb8 <__aeabi_uldivmod>
 8004972:	4602      	mov	r2, r0
 8004974:	460b      	mov	r3, r1
 8004976:	4b0d      	ldr	r3, [pc, #52]	; (80049ac <UART_SetConfig+0x4e4>)
 8004978:	fba3 1302 	umull	r1, r3, r3, r2
 800497c:	095b      	lsrs	r3, r3, #5
 800497e:	2164      	movs	r1, #100	; 0x64
 8004980:	fb01 f303 	mul.w	r3, r1, r3
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	011b      	lsls	r3, r3, #4
 8004988:	3332      	adds	r3, #50	; 0x32
 800498a:	4a08      	ldr	r2, [pc, #32]	; (80049ac <UART_SetConfig+0x4e4>)
 800498c:	fba2 2303 	umull	r2, r3, r2, r3
 8004990:	095b      	lsrs	r3, r3, #5
 8004992:	f003 020f 	and.w	r2, r3, #15
 8004996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4422      	add	r2, r4
 800499e:	609a      	str	r2, [r3, #8]
}
 80049a0:	bf00      	nop
 80049a2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80049a6:	46bd      	mov	sp, r7
 80049a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049ac:	51eb851f 	.word	0x51eb851f

080049b0 <__cvt>:
 80049b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049b4:	ec55 4b10 	vmov	r4, r5, d0
 80049b8:	2d00      	cmp	r5, #0
 80049ba:	460e      	mov	r6, r1
 80049bc:	4619      	mov	r1, r3
 80049be:	462b      	mov	r3, r5
 80049c0:	bfbb      	ittet	lt
 80049c2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80049c6:	461d      	movlt	r5, r3
 80049c8:	2300      	movge	r3, #0
 80049ca:	232d      	movlt	r3, #45	; 0x2d
 80049cc:	700b      	strb	r3, [r1, #0]
 80049ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80049d0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80049d4:	4691      	mov	r9, r2
 80049d6:	f023 0820 	bic.w	r8, r3, #32
 80049da:	bfbc      	itt	lt
 80049dc:	4622      	movlt	r2, r4
 80049de:	4614      	movlt	r4, r2
 80049e0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80049e4:	d005      	beq.n	80049f2 <__cvt+0x42>
 80049e6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80049ea:	d100      	bne.n	80049ee <__cvt+0x3e>
 80049ec:	3601      	adds	r6, #1
 80049ee:	2102      	movs	r1, #2
 80049f0:	e000      	b.n	80049f4 <__cvt+0x44>
 80049f2:	2103      	movs	r1, #3
 80049f4:	ab03      	add	r3, sp, #12
 80049f6:	9301      	str	r3, [sp, #4]
 80049f8:	ab02      	add	r3, sp, #8
 80049fa:	9300      	str	r3, [sp, #0]
 80049fc:	ec45 4b10 	vmov	d0, r4, r5
 8004a00:	4653      	mov	r3, sl
 8004a02:	4632      	mov	r2, r6
 8004a04:	f000 fe54 	bl	80056b0 <_dtoa_r>
 8004a08:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004a0c:	4607      	mov	r7, r0
 8004a0e:	d102      	bne.n	8004a16 <__cvt+0x66>
 8004a10:	f019 0f01 	tst.w	r9, #1
 8004a14:	d022      	beq.n	8004a5c <__cvt+0xac>
 8004a16:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004a1a:	eb07 0906 	add.w	r9, r7, r6
 8004a1e:	d110      	bne.n	8004a42 <__cvt+0x92>
 8004a20:	783b      	ldrb	r3, [r7, #0]
 8004a22:	2b30      	cmp	r3, #48	; 0x30
 8004a24:	d10a      	bne.n	8004a3c <__cvt+0x8c>
 8004a26:	2200      	movs	r2, #0
 8004a28:	2300      	movs	r3, #0
 8004a2a:	4620      	mov	r0, r4
 8004a2c:	4629      	mov	r1, r5
 8004a2e:	f7fc f853 	bl	8000ad8 <__aeabi_dcmpeq>
 8004a32:	b918      	cbnz	r0, 8004a3c <__cvt+0x8c>
 8004a34:	f1c6 0601 	rsb	r6, r6, #1
 8004a38:	f8ca 6000 	str.w	r6, [sl]
 8004a3c:	f8da 3000 	ldr.w	r3, [sl]
 8004a40:	4499      	add	r9, r3
 8004a42:	2200      	movs	r2, #0
 8004a44:	2300      	movs	r3, #0
 8004a46:	4620      	mov	r0, r4
 8004a48:	4629      	mov	r1, r5
 8004a4a:	f7fc f845 	bl	8000ad8 <__aeabi_dcmpeq>
 8004a4e:	b108      	cbz	r0, 8004a54 <__cvt+0xa4>
 8004a50:	f8cd 900c 	str.w	r9, [sp, #12]
 8004a54:	2230      	movs	r2, #48	; 0x30
 8004a56:	9b03      	ldr	r3, [sp, #12]
 8004a58:	454b      	cmp	r3, r9
 8004a5a:	d307      	bcc.n	8004a6c <__cvt+0xbc>
 8004a5c:	9b03      	ldr	r3, [sp, #12]
 8004a5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a60:	1bdb      	subs	r3, r3, r7
 8004a62:	4638      	mov	r0, r7
 8004a64:	6013      	str	r3, [r2, #0]
 8004a66:	b004      	add	sp, #16
 8004a68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a6c:	1c59      	adds	r1, r3, #1
 8004a6e:	9103      	str	r1, [sp, #12]
 8004a70:	701a      	strb	r2, [r3, #0]
 8004a72:	e7f0      	b.n	8004a56 <__cvt+0xa6>

08004a74 <__exponent>:
 8004a74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a76:	4603      	mov	r3, r0
 8004a78:	2900      	cmp	r1, #0
 8004a7a:	bfb8      	it	lt
 8004a7c:	4249      	neglt	r1, r1
 8004a7e:	f803 2b02 	strb.w	r2, [r3], #2
 8004a82:	bfb4      	ite	lt
 8004a84:	222d      	movlt	r2, #45	; 0x2d
 8004a86:	222b      	movge	r2, #43	; 0x2b
 8004a88:	2909      	cmp	r1, #9
 8004a8a:	7042      	strb	r2, [r0, #1]
 8004a8c:	dd2a      	ble.n	8004ae4 <__exponent+0x70>
 8004a8e:	f10d 0207 	add.w	r2, sp, #7
 8004a92:	4617      	mov	r7, r2
 8004a94:	260a      	movs	r6, #10
 8004a96:	4694      	mov	ip, r2
 8004a98:	fb91 f5f6 	sdiv	r5, r1, r6
 8004a9c:	fb06 1415 	mls	r4, r6, r5, r1
 8004aa0:	3430      	adds	r4, #48	; 0x30
 8004aa2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004aa6:	460c      	mov	r4, r1
 8004aa8:	2c63      	cmp	r4, #99	; 0x63
 8004aaa:	f102 32ff 	add.w	r2, r2, #4294967295
 8004aae:	4629      	mov	r1, r5
 8004ab0:	dcf1      	bgt.n	8004a96 <__exponent+0x22>
 8004ab2:	3130      	adds	r1, #48	; 0x30
 8004ab4:	f1ac 0402 	sub.w	r4, ip, #2
 8004ab8:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004abc:	1c41      	adds	r1, r0, #1
 8004abe:	4622      	mov	r2, r4
 8004ac0:	42ba      	cmp	r2, r7
 8004ac2:	d30a      	bcc.n	8004ada <__exponent+0x66>
 8004ac4:	f10d 0209 	add.w	r2, sp, #9
 8004ac8:	eba2 020c 	sub.w	r2, r2, ip
 8004acc:	42bc      	cmp	r4, r7
 8004ace:	bf88      	it	hi
 8004ad0:	2200      	movhi	r2, #0
 8004ad2:	4413      	add	r3, r2
 8004ad4:	1a18      	subs	r0, r3, r0
 8004ad6:	b003      	add	sp, #12
 8004ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ada:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004ade:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004ae2:	e7ed      	b.n	8004ac0 <__exponent+0x4c>
 8004ae4:	2330      	movs	r3, #48	; 0x30
 8004ae6:	3130      	adds	r1, #48	; 0x30
 8004ae8:	7083      	strb	r3, [r0, #2]
 8004aea:	70c1      	strb	r1, [r0, #3]
 8004aec:	1d03      	adds	r3, r0, #4
 8004aee:	e7f1      	b.n	8004ad4 <__exponent+0x60>

08004af0 <_printf_float>:
 8004af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004af4:	ed2d 8b02 	vpush	{d8}
 8004af8:	b08d      	sub	sp, #52	; 0x34
 8004afa:	460c      	mov	r4, r1
 8004afc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004b00:	4616      	mov	r6, r2
 8004b02:	461f      	mov	r7, r3
 8004b04:	4605      	mov	r5, r0
 8004b06:	f000 fcd5 	bl	80054b4 <_localeconv_r>
 8004b0a:	f8d0 a000 	ldr.w	sl, [r0]
 8004b0e:	4650      	mov	r0, sl
 8004b10:	f7fb fbb6 	bl	8000280 <strlen>
 8004b14:	2300      	movs	r3, #0
 8004b16:	930a      	str	r3, [sp, #40]	; 0x28
 8004b18:	6823      	ldr	r3, [r4, #0]
 8004b1a:	9305      	str	r3, [sp, #20]
 8004b1c:	f8d8 3000 	ldr.w	r3, [r8]
 8004b20:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004b24:	3307      	adds	r3, #7
 8004b26:	f023 0307 	bic.w	r3, r3, #7
 8004b2a:	f103 0208 	add.w	r2, r3, #8
 8004b2e:	f8c8 2000 	str.w	r2, [r8]
 8004b32:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004b36:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004b3a:	9307      	str	r3, [sp, #28]
 8004b3c:	f8cd 8018 	str.w	r8, [sp, #24]
 8004b40:	ee08 0a10 	vmov	s16, r0
 8004b44:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8004b48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b4c:	4b9e      	ldr	r3, [pc, #632]	; (8004dc8 <_printf_float+0x2d8>)
 8004b4e:	f04f 32ff 	mov.w	r2, #4294967295
 8004b52:	f7fb fff3 	bl	8000b3c <__aeabi_dcmpun>
 8004b56:	bb88      	cbnz	r0, 8004bbc <_printf_float+0xcc>
 8004b58:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b5c:	4b9a      	ldr	r3, [pc, #616]	; (8004dc8 <_printf_float+0x2d8>)
 8004b5e:	f04f 32ff 	mov.w	r2, #4294967295
 8004b62:	f7fb ffcd 	bl	8000b00 <__aeabi_dcmple>
 8004b66:	bb48      	cbnz	r0, 8004bbc <_printf_float+0xcc>
 8004b68:	2200      	movs	r2, #0
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	4640      	mov	r0, r8
 8004b6e:	4649      	mov	r1, r9
 8004b70:	f7fb ffbc 	bl	8000aec <__aeabi_dcmplt>
 8004b74:	b110      	cbz	r0, 8004b7c <_printf_float+0x8c>
 8004b76:	232d      	movs	r3, #45	; 0x2d
 8004b78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b7c:	4a93      	ldr	r2, [pc, #588]	; (8004dcc <_printf_float+0x2dc>)
 8004b7e:	4b94      	ldr	r3, [pc, #592]	; (8004dd0 <_printf_float+0x2e0>)
 8004b80:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004b84:	bf94      	ite	ls
 8004b86:	4690      	movls	r8, r2
 8004b88:	4698      	movhi	r8, r3
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	6123      	str	r3, [r4, #16]
 8004b8e:	9b05      	ldr	r3, [sp, #20]
 8004b90:	f023 0304 	bic.w	r3, r3, #4
 8004b94:	6023      	str	r3, [r4, #0]
 8004b96:	f04f 0900 	mov.w	r9, #0
 8004b9a:	9700      	str	r7, [sp, #0]
 8004b9c:	4633      	mov	r3, r6
 8004b9e:	aa0b      	add	r2, sp, #44	; 0x2c
 8004ba0:	4621      	mov	r1, r4
 8004ba2:	4628      	mov	r0, r5
 8004ba4:	f000 f9da 	bl	8004f5c <_printf_common>
 8004ba8:	3001      	adds	r0, #1
 8004baa:	f040 8090 	bne.w	8004cce <_printf_float+0x1de>
 8004bae:	f04f 30ff 	mov.w	r0, #4294967295
 8004bb2:	b00d      	add	sp, #52	; 0x34
 8004bb4:	ecbd 8b02 	vpop	{d8}
 8004bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bbc:	4642      	mov	r2, r8
 8004bbe:	464b      	mov	r3, r9
 8004bc0:	4640      	mov	r0, r8
 8004bc2:	4649      	mov	r1, r9
 8004bc4:	f7fb ffba 	bl	8000b3c <__aeabi_dcmpun>
 8004bc8:	b140      	cbz	r0, 8004bdc <_printf_float+0xec>
 8004bca:	464b      	mov	r3, r9
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	bfbc      	itt	lt
 8004bd0:	232d      	movlt	r3, #45	; 0x2d
 8004bd2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004bd6:	4a7f      	ldr	r2, [pc, #508]	; (8004dd4 <_printf_float+0x2e4>)
 8004bd8:	4b7f      	ldr	r3, [pc, #508]	; (8004dd8 <_printf_float+0x2e8>)
 8004bda:	e7d1      	b.n	8004b80 <_printf_float+0x90>
 8004bdc:	6863      	ldr	r3, [r4, #4]
 8004bde:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004be2:	9206      	str	r2, [sp, #24]
 8004be4:	1c5a      	adds	r2, r3, #1
 8004be6:	d13f      	bne.n	8004c68 <_printf_float+0x178>
 8004be8:	2306      	movs	r3, #6
 8004bea:	6063      	str	r3, [r4, #4]
 8004bec:	9b05      	ldr	r3, [sp, #20]
 8004bee:	6861      	ldr	r1, [r4, #4]
 8004bf0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	9303      	str	r3, [sp, #12]
 8004bf8:	ab0a      	add	r3, sp, #40	; 0x28
 8004bfa:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004bfe:	ab09      	add	r3, sp, #36	; 0x24
 8004c00:	ec49 8b10 	vmov	d0, r8, r9
 8004c04:	9300      	str	r3, [sp, #0]
 8004c06:	6022      	str	r2, [r4, #0]
 8004c08:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004c0c:	4628      	mov	r0, r5
 8004c0e:	f7ff fecf 	bl	80049b0 <__cvt>
 8004c12:	9b06      	ldr	r3, [sp, #24]
 8004c14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004c16:	2b47      	cmp	r3, #71	; 0x47
 8004c18:	4680      	mov	r8, r0
 8004c1a:	d108      	bne.n	8004c2e <_printf_float+0x13e>
 8004c1c:	1cc8      	adds	r0, r1, #3
 8004c1e:	db02      	blt.n	8004c26 <_printf_float+0x136>
 8004c20:	6863      	ldr	r3, [r4, #4]
 8004c22:	4299      	cmp	r1, r3
 8004c24:	dd41      	ble.n	8004caa <_printf_float+0x1ba>
 8004c26:	f1ab 0302 	sub.w	r3, fp, #2
 8004c2a:	fa5f fb83 	uxtb.w	fp, r3
 8004c2e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004c32:	d820      	bhi.n	8004c76 <_printf_float+0x186>
 8004c34:	3901      	subs	r1, #1
 8004c36:	465a      	mov	r2, fp
 8004c38:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004c3c:	9109      	str	r1, [sp, #36]	; 0x24
 8004c3e:	f7ff ff19 	bl	8004a74 <__exponent>
 8004c42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c44:	1813      	adds	r3, r2, r0
 8004c46:	2a01      	cmp	r2, #1
 8004c48:	4681      	mov	r9, r0
 8004c4a:	6123      	str	r3, [r4, #16]
 8004c4c:	dc02      	bgt.n	8004c54 <_printf_float+0x164>
 8004c4e:	6822      	ldr	r2, [r4, #0]
 8004c50:	07d2      	lsls	r2, r2, #31
 8004c52:	d501      	bpl.n	8004c58 <_printf_float+0x168>
 8004c54:	3301      	adds	r3, #1
 8004c56:	6123      	str	r3, [r4, #16]
 8004c58:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d09c      	beq.n	8004b9a <_printf_float+0xaa>
 8004c60:	232d      	movs	r3, #45	; 0x2d
 8004c62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c66:	e798      	b.n	8004b9a <_printf_float+0xaa>
 8004c68:	9a06      	ldr	r2, [sp, #24]
 8004c6a:	2a47      	cmp	r2, #71	; 0x47
 8004c6c:	d1be      	bne.n	8004bec <_printf_float+0xfc>
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d1bc      	bne.n	8004bec <_printf_float+0xfc>
 8004c72:	2301      	movs	r3, #1
 8004c74:	e7b9      	b.n	8004bea <_printf_float+0xfa>
 8004c76:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004c7a:	d118      	bne.n	8004cae <_printf_float+0x1be>
 8004c7c:	2900      	cmp	r1, #0
 8004c7e:	6863      	ldr	r3, [r4, #4]
 8004c80:	dd0b      	ble.n	8004c9a <_printf_float+0x1aa>
 8004c82:	6121      	str	r1, [r4, #16]
 8004c84:	b913      	cbnz	r3, 8004c8c <_printf_float+0x19c>
 8004c86:	6822      	ldr	r2, [r4, #0]
 8004c88:	07d0      	lsls	r0, r2, #31
 8004c8a:	d502      	bpl.n	8004c92 <_printf_float+0x1a2>
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	440b      	add	r3, r1
 8004c90:	6123      	str	r3, [r4, #16]
 8004c92:	65a1      	str	r1, [r4, #88]	; 0x58
 8004c94:	f04f 0900 	mov.w	r9, #0
 8004c98:	e7de      	b.n	8004c58 <_printf_float+0x168>
 8004c9a:	b913      	cbnz	r3, 8004ca2 <_printf_float+0x1b2>
 8004c9c:	6822      	ldr	r2, [r4, #0]
 8004c9e:	07d2      	lsls	r2, r2, #31
 8004ca0:	d501      	bpl.n	8004ca6 <_printf_float+0x1b6>
 8004ca2:	3302      	adds	r3, #2
 8004ca4:	e7f4      	b.n	8004c90 <_printf_float+0x1a0>
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e7f2      	b.n	8004c90 <_printf_float+0x1a0>
 8004caa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004cae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cb0:	4299      	cmp	r1, r3
 8004cb2:	db05      	blt.n	8004cc0 <_printf_float+0x1d0>
 8004cb4:	6823      	ldr	r3, [r4, #0]
 8004cb6:	6121      	str	r1, [r4, #16]
 8004cb8:	07d8      	lsls	r0, r3, #31
 8004cba:	d5ea      	bpl.n	8004c92 <_printf_float+0x1a2>
 8004cbc:	1c4b      	adds	r3, r1, #1
 8004cbe:	e7e7      	b.n	8004c90 <_printf_float+0x1a0>
 8004cc0:	2900      	cmp	r1, #0
 8004cc2:	bfd4      	ite	le
 8004cc4:	f1c1 0202 	rsble	r2, r1, #2
 8004cc8:	2201      	movgt	r2, #1
 8004cca:	4413      	add	r3, r2
 8004ccc:	e7e0      	b.n	8004c90 <_printf_float+0x1a0>
 8004cce:	6823      	ldr	r3, [r4, #0]
 8004cd0:	055a      	lsls	r2, r3, #21
 8004cd2:	d407      	bmi.n	8004ce4 <_printf_float+0x1f4>
 8004cd4:	6923      	ldr	r3, [r4, #16]
 8004cd6:	4642      	mov	r2, r8
 8004cd8:	4631      	mov	r1, r6
 8004cda:	4628      	mov	r0, r5
 8004cdc:	47b8      	blx	r7
 8004cde:	3001      	adds	r0, #1
 8004ce0:	d12c      	bne.n	8004d3c <_printf_float+0x24c>
 8004ce2:	e764      	b.n	8004bae <_printf_float+0xbe>
 8004ce4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004ce8:	f240 80e0 	bls.w	8004eac <_printf_float+0x3bc>
 8004cec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	f7fb fef0 	bl	8000ad8 <__aeabi_dcmpeq>
 8004cf8:	2800      	cmp	r0, #0
 8004cfa:	d034      	beq.n	8004d66 <_printf_float+0x276>
 8004cfc:	4a37      	ldr	r2, [pc, #220]	; (8004ddc <_printf_float+0x2ec>)
 8004cfe:	2301      	movs	r3, #1
 8004d00:	4631      	mov	r1, r6
 8004d02:	4628      	mov	r0, r5
 8004d04:	47b8      	blx	r7
 8004d06:	3001      	adds	r0, #1
 8004d08:	f43f af51 	beq.w	8004bae <_printf_float+0xbe>
 8004d0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d10:	429a      	cmp	r2, r3
 8004d12:	db02      	blt.n	8004d1a <_printf_float+0x22a>
 8004d14:	6823      	ldr	r3, [r4, #0]
 8004d16:	07d8      	lsls	r0, r3, #31
 8004d18:	d510      	bpl.n	8004d3c <_printf_float+0x24c>
 8004d1a:	ee18 3a10 	vmov	r3, s16
 8004d1e:	4652      	mov	r2, sl
 8004d20:	4631      	mov	r1, r6
 8004d22:	4628      	mov	r0, r5
 8004d24:	47b8      	blx	r7
 8004d26:	3001      	adds	r0, #1
 8004d28:	f43f af41 	beq.w	8004bae <_printf_float+0xbe>
 8004d2c:	f04f 0800 	mov.w	r8, #0
 8004d30:	f104 091a 	add.w	r9, r4, #26
 8004d34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d36:	3b01      	subs	r3, #1
 8004d38:	4543      	cmp	r3, r8
 8004d3a:	dc09      	bgt.n	8004d50 <_printf_float+0x260>
 8004d3c:	6823      	ldr	r3, [r4, #0]
 8004d3e:	079b      	lsls	r3, r3, #30
 8004d40:	f100 8107 	bmi.w	8004f52 <_printf_float+0x462>
 8004d44:	68e0      	ldr	r0, [r4, #12]
 8004d46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d48:	4298      	cmp	r0, r3
 8004d4a:	bfb8      	it	lt
 8004d4c:	4618      	movlt	r0, r3
 8004d4e:	e730      	b.n	8004bb2 <_printf_float+0xc2>
 8004d50:	2301      	movs	r3, #1
 8004d52:	464a      	mov	r2, r9
 8004d54:	4631      	mov	r1, r6
 8004d56:	4628      	mov	r0, r5
 8004d58:	47b8      	blx	r7
 8004d5a:	3001      	adds	r0, #1
 8004d5c:	f43f af27 	beq.w	8004bae <_printf_float+0xbe>
 8004d60:	f108 0801 	add.w	r8, r8, #1
 8004d64:	e7e6      	b.n	8004d34 <_printf_float+0x244>
 8004d66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	dc39      	bgt.n	8004de0 <_printf_float+0x2f0>
 8004d6c:	4a1b      	ldr	r2, [pc, #108]	; (8004ddc <_printf_float+0x2ec>)
 8004d6e:	2301      	movs	r3, #1
 8004d70:	4631      	mov	r1, r6
 8004d72:	4628      	mov	r0, r5
 8004d74:	47b8      	blx	r7
 8004d76:	3001      	adds	r0, #1
 8004d78:	f43f af19 	beq.w	8004bae <_printf_float+0xbe>
 8004d7c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004d80:	4313      	orrs	r3, r2
 8004d82:	d102      	bne.n	8004d8a <_printf_float+0x29a>
 8004d84:	6823      	ldr	r3, [r4, #0]
 8004d86:	07d9      	lsls	r1, r3, #31
 8004d88:	d5d8      	bpl.n	8004d3c <_printf_float+0x24c>
 8004d8a:	ee18 3a10 	vmov	r3, s16
 8004d8e:	4652      	mov	r2, sl
 8004d90:	4631      	mov	r1, r6
 8004d92:	4628      	mov	r0, r5
 8004d94:	47b8      	blx	r7
 8004d96:	3001      	adds	r0, #1
 8004d98:	f43f af09 	beq.w	8004bae <_printf_float+0xbe>
 8004d9c:	f04f 0900 	mov.w	r9, #0
 8004da0:	f104 0a1a 	add.w	sl, r4, #26
 8004da4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004da6:	425b      	negs	r3, r3
 8004da8:	454b      	cmp	r3, r9
 8004daa:	dc01      	bgt.n	8004db0 <_printf_float+0x2c0>
 8004dac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004dae:	e792      	b.n	8004cd6 <_printf_float+0x1e6>
 8004db0:	2301      	movs	r3, #1
 8004db2:	4652      	mov	r2, sl
 8004db4:	4631      	mov	r1, r6
 8004db6:	4628      	mov	r0, r5
 8004db8:	47b8      	blx	r7
 8004dba:	3001      	adds	r0, #1
 8004dbc:	f43f aef7 	beq.w	8004bae <_printf_float+0xbe>
 8004dc0:	f109 0901 	add.w	r9, r9, #1
 8004dc4:	e7ee      	b.n	8004da4 <_printf_float+0x2b4>
 8004dc6:	bf00      	nop
 8004dc8:	7fefffff 	.word	0x7fefffff
 8004dcc:	080077d8 	.word	0x080077d8
 8004dd0:	080077dc 	.word	0x080077dc
 8004dd4:	080077e0 	.word	0x080077e0
 8004dd8:	080077e4 	.word	0x080077e4
 8004ddc:	080077e8 	.word	0x080077e8
 8004de0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004de2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004de4:	429a      	cmp	r2, r3
 8004de6:	bfa8      	it	ge
 8004de8:	461a      	movge	r2, r3
 8004dea:	2a00      	cmp	r2, #0
 8004dec:	4691      	mov	r9, r2
 8004dee:	dc37      	bgt.n	8004e60 <_printf_float+0x370>
 8004df0:	f04f 0b00 	mov.w	fp, #0
 8004df4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004df8:	f104 021a 	add.w	r2, r4, #26
 8004dfc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004dfe:	9305      	str	r3, [sp, #20]
 8004e00:	eba3 0309 	sub.w	r3, r3, r9
 8004e04:	455b      	cmp	r3, fp
 8004e06:	dc33      	bgt.n	8004e70 <_printf_float+0x380>
 8004e08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	db3b      	blt.n	8004e88 <_printf_float+0x398>
 8004e10:	6823      	ldr	r3, [r4, #0]
 8004e12:	07da      	lsls	r2, r3, #31
 8004e14:	d438      	bmi.n	8004e88 <_printf_float+0x398>
 8004e16:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004e1a:	eba2 0903 	sub.w	r9, r2, r3
 8004e1e:	9b05      	ldr	r3, [sp, #20]
 8004e20:	1ad2      	subs	r2, r2, r3
 8004e22:	4591      	cmp	r9, r2
 8004e24:	bfa8      	it	ge
 8004e26:	4691      	movge	r9, r2
 8004e28:	f1b9 0f00 	cmp.w	r9, #0
 8004e2c:	dc35      	bgt.n	8004e9a <_printf_float+0x3aa>
 8004e2e:	f04f 0800 	mov.w	r8, #0
 8004e32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e36:	f104 0a1a 	add.w	sl, r4, #26
 8004e3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e3e:	1a9b      	subs	r3, r3, r2
 8004e40:	eba3 0309 	sub.w	r3, r3, r9
 8004e44:	4543      	cmp	r3, r8
 8004e46:	f77f af79 	ble.w	8004d3c <_printf_float+0x24c>
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	4652      	mov	r2, sl
 8004e4e:	4631      	mov	r1, r6
 8004e50:	4628      	mov	r0, r5
 8004e52:	47b8      	blx	r7
 8004e54:	3001      	adds	r0, #1
 8004e56:	f43f aeaa 	beq.w	8004bae <_printf_float+0xbe>
 8004e5a:	f108 0801 	add.w	r8, r8, #1
 8004e5e:	e7ec      	b.n	8004e3a <_printf_float+0x34a>
 8004e60:	4613      	mov	r3, r2
 8004e62:	4631      	mov	r1, r6
 8004e64:	4642      	mov	r2, r8
 8004e66:	4628      	mov	r0, r5
 8004e68:	47b8      	blx	r7
 8004e6a:	3001      	adds	r0, #1
 8004e6c:	d1c0      	bne.n	8004df0 <_printf_float+0x300>
 8004e6e:	e69e      	b.n	8004bae <_printf_float+0xbe>
 8004e70:	2301      	movs	r3, #1
 8004e72:	4631      	mov	r1, r6
 8004e74:	4628      	mov	r0, r5
 8004e76:	9205      	str	r2, [sp, #20]
 8004e78:	47b8      	blx	r7
 8004e7a:	3001      	adds	r0, #1
 8004e7c:	f43f ae97 	beq.w	8004bae <_printf_float+0xbe>
 8004e80:	9a05      	ldr	r2, [sp, #20]
 8004e82:	f10b 0b01 	add.w	fp, fp, #1
 8004e86:	e7b9      	b.n	8004dfc <_printf_float+0x30c>
 8004e88:	ee18 3a10 	vmov	r3, s16
 8004e8c:	4652      	mov	r2, sl
 8004e8e:	4631      	mov	r1, r6
 8004e90:	4628      	mov	r0, r5
 8004e92:	47b8      	blx	r7
 8004e94:	3001      	adds	r0, #1
 8004e96:	d1be      	bne.n	8004e16 <_printf_float+0x326>
 8004e98:	e689      	b.n	8004bae <_printf_float+0xbe>
 8004e9a:	9a05      	ldr	r2, [sp, #20]
 8004e9c:	464b      	mov	r3, r9
 8004e9e:	4442      	add	r2, r8
 8004ea0:	4631      	mov	r1, r6
 8004ea2:	4628      	mov	r0, r5
 8004ea4:	47b8      	blx	r7
 8004ea6:	3001      	adds	r0, #1
 8004ea8:	d1c1      	bne.n	8004e2e <_printf_float+0x33e>
 8004eaa:	e680      	b.n	8004bae <_printf_float+0xbe>
 8004eac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004eae:	2a01      	cmp	r2, #1
 8004eb0:	dc01      	bgt.n	8004eb6 <_printf_float+0x3c6>
 8004eb2:	07db      	lsls	r3, r3, #31
 8004eb4:	d53a      	bpl.n	8004f2c <_printf_float+0x43c>
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	4642      	mov	r2, r8
 8004eba:	4631      	mov	r1, r6
 8004ebc:	4628      	mov	r0, r5
 8004ebe:	47b8      	blx	r7
 8004ec0:	3001      	adds	r0, #1
 8004ec2:	f43f ae74 	beq.w	8004bae <_printf_float+0xbe>
 8004ec6:	ee18 3a10 	vmov	r3, s16
 8004eca:	4652      	mov	r2, sl
 8004ecc:	4631      	mov	r1, r6
 8004ece:	4628      	mov	r0, r5
 8004ed0:	47b8      	blx	r7
 8004ed2:	3001      	adds	r0, #1
 8004ed4:	f43f ae6b 	beq.w	8004bae <_printf_float+0xbe>
 8004ed8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004edc:	2200      	movs	r2, #0
 8004ede:	2300      	movs	r3, #0
 8004ee0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004ee4:	f7fb fdf8 	bl	8000ad8 <__aeabi_dcmpeq>
 8004ee8:	b9d8      	cbnz	r0, 8004f22 <_printf_float+0x432>
 8004eea:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004eee:	f108 0201 	add.w	r2, r8, #1
 8004ef2:	4631      	mov	r1, r6
 8004ef4:	4628      	mov	r0, r5
 8004ef6:	47b8      	blx	r7
 8004ef8:	3001      	adds	r0, #1
 8004efa:	d10e      	bne.n	8004f1a <_printf_float+0x42a>
 8004efc:	e657      	b.n	8004bae <_printf_float+0xbe>
 8004efe:	2301      	movs	r3, #1
 8004f00:	4652      	mov	r2, sl
 8004f02:	4631      	mov	r1, r6
 8004f04:	4628      	mov	r0, r5
 8004f06:	47b8      	blx	r7
 8004f08:	3001      	adds	r0, #1
 8004f0a:	f43f ae50 	beq.w	8004bae <_printf_float+0xbe>
 8004f0e:	f108 0801 	add.w	r8, r8, #1
 8004f12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f14:	3b01      	subs	r3, #1
 8004f16:	4543      	cmp	r3, r8
 8004f18:	dcf1      	bgt.n	8004efe <_printf_float+0x40e>
 8004f1a:	464b      	mov	r3, r9
 8004f1c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004f20:	e6da      	b.n	8004cd8 <_printf_float+0x1e8>
 8004f22:	f04f 0800 	mov.w	r8, #0
 8004f26:	f104 0a1a 	add.w	sl, r4, #26
 8004f2a:	e7f2      	b.n	8004f12 <_printf_float+0x422>
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	4642      	mov	r2, r8
 8004f30:	e7df      	b.n	8004ef2 <_printf_float+0x402>
 8004f32:	2301      	movs	r3, #1
 8004f34:	464a      	mov	r2, r9
 8004f36:	4631      	mov	r1, r6
 8004f38:	4628      	mov	r0, r5
 8004f3a:	47b8      	blx	r7
 8004f3c:	3001      	adds	r0, #1
 8004f3e:	f43f ae36 	beq.w	8004bae <_printf_float+0xbe>
 8004f42:	f108 0801 	add.w	r8, r8, #1
 8004f46:	68e3      	ldr	r3, [r4, #12]
 8004f48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004f4a:	1a5b      	subs	r3, r3, r1
 8004f4c:	4543      	cmp	r3, r8
 8004f4e:	dcf0      	bgt.n	8004f32 <_printf_float+0x442>
 8004f50:	e6f8      	b.n	8004d44 <_printf_float+0x254>
 8004f52:	f04f 0800 	mov.w	r8, #0
 8004f56:	f104 0919 	add.w	r9, r4, #25
 8004f5a:	e7f4      	b.n	8004f46 <_printf_float+0x456>

08004f5c <_printf_common>:
 8004f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f60:	4616      	mov	r6, r2
 8004f62:	4699      	mov	r9, r3
 8004f64:	688a      	ldr	r2, [r1, #8]
 8004f66:	690b      	ldr	r3, [r1, #16]
 8004f68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	bfb8      	it	lt
 8004f70:	4613      	movlt	r3, r2
 8004f72:	6033      	str	r3, [r6, #0]
 8004f74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f78:	4607      	mov	r7, r0
 8004f7a:	460c      	mov	r4, r1
 8004f7c:	b10a      	cbz	r2, 8004f82 <_printf_common+0x26>
 8004f7e:	3301      	adds	r3, #1
 8004f80:	6033      	str	r3, [r6, #0]
 8004f82:	6823      	ldr	r3, [r4, #0]
 8004f84:	0699      	lsls	r1, r3, #26
 8004f86:	bf42      	ittt	mi
 8004f88:	6833      	ldrmi	r3, [r6, #0]
 8004f8a:	3302      	addmi	r3, #2
 8004f8c:	6033      	strmi	r3, [r6, #0]
 8004f8e:	6825      	ldr	r5, [r4, #0]
 8004f90:	f015 0506 	ands.w	r5, r5, #6
 8004f94:	d106      	bne.n	8004fa4 <_printf_common+0x48>
 8004f96:	f104 0a19 	add.w	sl, r4, #25
 8004f9a:	68e3      	ldr	r3, [r4, #12]
 8004f9c:	6832      	ldr	r2, [r6, #0]
 8004f9e:	1a9b      	subs	r3, r3, r2
 8004fa0:	42ab      	cmp	r3, r5
 8004fa2:	dc26      	bgt.n	8004ff2 <_printf_common+0x96>
 8004fa4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004fa8:	1e13      	subs	r3, r2, #0
 8004faa:	6822      	ldr	r2, [r4, #0]
 8004fac:	bf18      	it	ne
 8004fae:	2301      	movne	r3, #1
 8004fb0:	0692      	lsls	r2, r2, #26
 8004fb2:	d42b      	bmi.n	800500c <_printf_common+0xb0>
 8004fb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004fb8:	4649      	mov	r1, r9
 8004fba:	4638      	mov	r0, r7
 8004fbc:	47c0      	blx	r8
 8004fbe:	3001      	adds	r0, #1
 8004fc0:	d01e      	beq.n	8005000 <_printf_common+0xa4>
 8004fc2:	6823      	ldr	r3, [r4, #0]
 8004fc4:	6922      	ldr	r2, [r4, #16]
 8004fc6:	f003 0306 	and.w	r3, r3, #6
 8004fca:	2b04      	cmp	r3, #4
 8004fcc:	bf02      	ittt	eq
 8004fce:	68e5      	ldreq	r5, [r4, #12]
 8004fd0:	6833      	ldreq	r3, [r6, #0]
 8004fd2:	1aed      	subeq	r5, r5, r3
 8004fd4:	68a3      	ldr	r3, [r4, #8]
 8004fd6:	bf0c      	ite	eq
 8004fd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004fdc:	2500      	movne	r5, #0
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	bfc4      	itt	gt
 8004fe2:	1a9b      	subgt	r3, r3, r2
 8004fe4:	18ed      	addgt	r5, r5, r3
 8004fe6:	2600      	movs	r6, #0
 8004fe8:	341a      	adds	r4, #26
 8004fea:	42b5      	cmp	r5, r6
 8004fec:	d11a      	bne.n	8005024 <_printf_common+0xc8>
 8004fee:	2000      	movs	r0, #0
 8004ff0:	e008      	b.n	8005004 <_printf_common+0xa8>
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	4652      	mov	r2, sl
 8004ff6:	4649      	mov	r1, r9
 8004ff8:	4638      	mov	r0, r7
 8004ffa:	47c0      	blx	r8
 8004ffc:	3001      	adds	r0, #1
 8004ffe:	d103      	bne.n	8005008 <_printf_common+0xac>
 8005000:	f04f 30ff 	mov.w	r0, #4294967295
 8005004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005008:	3501      	adds	r5, #1
 800500a:	e7c6      	b.n	8004f9a <_printf_common+0x3e>
 800500c:	18e1      	adds	r1, r4, r3
 800500e:	1c5a      	adds	r2, r3, #1
 8005010:	2030      	movs	r0, #48	; 0x30
 8005012:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005016:	4422      	add	r2, r4
 8005018:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800501c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005020:	3302      	adds	r3, #2
 8005022:	e7c7      	b.n	8004fb4 <_printf_common+0x58>
 8005024:	2301      	movs	r3, #1
 8005026:	4622      	mov	r2, r4
 8005028:	4649      	mov	r1, r9
 800502a:	4638      	mov	r0, r7
 800502c:	47c0      	blx	r8
 800502e:	3001      	adds	r0, #1
 8005030:	d0e6      	beq.n	8005000 <_printf_common+0xa4>
 8005032:	3601      	adds	r6, #1
 8005034:	e7d9      	b.n	8004fea <_printf_common+0x8e>
	...

08005038 <_printf_i>:
 8005038:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800503c:	7e0f      	ldrb	r7, [r1, #24]
 800503e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005040:	2f78      	cmp	r7, #120	; 0x78
 8005042:	4691      	mov	r9, r2
 8005044:	4680      	mov	r8, r0
 8005046:	460c      	mov	r4, r1
 8005048:	469a      	mov	sl, r3
 800504a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800504e:	d807      	bhi.n	8005060 <_printf_i+0x28>
 8005050:	2f62      	cmp	r7, #98	; 0x62
 8005052:	d80a      	bhi.n	800506a <_printf_i+0x32>
 8005054:	2f00      	cmp	r7, #0
 8005056:	f000 80d4 	beq.w	8005202 <_printf_i+0x1ca>
 800505a:	2f58      	cmp	r7, #88	; 0x58
 800505c:	f000 80c0 	beq.w	80051e0 <_printf_i+0x1a8>
 8005060:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005064:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005068:	e03a      	b.n	80050e0 <_printf_i+0xa8>
 800506a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800506e:	2b15      	cmp	r3, #21
 8005070:	d8f6      	bhi.n	8005060 <_printf_i+0x28>
 8005072:	a101      	add	r1, pc, #4	; (adr r1, 8005078 <_printf_i+0x40>)
 8005074:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005078:	080050d1 	.word	0x080050d1
 800507c:	080050e5 	.word	0x080050e5
 8005080:	08005061 	.word	0x08005061
 8005084:	08005061 	.word	0x08005061
 8005088:	08005061 	.word	0x08005061
 800508c:	08005061 	.word	0x08005061
 8005090:	080050e5 	.word	0x080050e5
 8005094:	08005061 	.word	0x08005061
 8005098:	08005061 	.word	0x08005061
 800509c:	08005061 	.word	0x08005061
 80050a0:	08005061 	.word	0x08005061
 80050a4:	080051e9 	.word	0x080051e9
 80050a8:	08005111 	.word	0x08005111
 80050ac:	080051a3 	.word	0x080051a3
 80050b0:	08005061 	.word	0x08005061
 80050b4:	08005061 	.word	0x08005061
 80050b8:	0800520b 	.word	0x0800520b
 80050bc:	08005061 	.word	0x08005061
 80050c0:	08005111 	.word	0x08005111
 80050c4:	08005061 	.word	0x08005061
 80050c8:	08005061 	.word	0x08005061
 80050cc:	080051ab 	.word	0x080051ab
 80050d0:	682b      	ldr	r3, [r5, #0]
 80050d2:	1d1a      	adds	r2, r3, #4
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	602a      	str	r2, [r5, #0]
 80050d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80050e0:	2301      	movs	r3, #1
 80050e2:	e09f      	b.n	8005224 <_printf_i+0x1ec>
 80050e4:	6820      	ldr	r0, [r4, #0]
 80050e6:	682b      	ldr	r3, [r5, #0]
 80050e8:	0607      	lsls	r7, r0, #24
 80050ea:	f103 0104 	add.w	r1, r3, #4
 80050ee:	6029      	str	r1, [r5, #0]
 80050f0:	d501      	bpl.n	80050f6 <_printf_i+0xbe>
 80050f2:	681e      	ldr	r6, [r3, #0]
 80050f4:	e003      	b.n	80050fe <_printf_i+0xc6>
 80050f6:	0646      	lsls	r6, r0, #25
 80050f8:	d5fb      	bpl.n	80050f2 <_printf_i+0xba>
 80050fa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80050fe:	2e00      	cmp	r6, #0
 8005100:	da03      	bge.n	800510a <_printf_i+0xd2>
 8005102:	232d      	movs	r3, #45	; 0x2d
 8005104:	4276      	negs	r6, r6
 8005106:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800510a:	485a      	ldr	r0, [pc, #360]	; (8005274 <_printf_i+0x23c>)
 800510c:	230a      	movs	r3, #10
 800510e:	e012      	b.n	8005136 <_printf_i+0xfe>
 8005110:	682b      	ldr	r3, [r5, #0]
 8005112:	6820      	ldr	r0, [r4, #0]
 8005114:	1d19      	adds	r1, r3, #4
 8005116:	6029      	str	r1, [r5, #0]
 8005118:	0605      	lsls	r5, r0, #24
 800511a:	d501      	bpl.n	8005120 <_printf_i+0xe8>
 800511c:	681e      	ldr	r6, [r3, #0]
 800511e:	e002      	b.n	8005126 <_printf_i+0xee>
 8005120:	0641      	lsls	r1, r0, #25
 8005122:	d5fb      	bpl.n	800511c <_printf_i+0xe4>
 8005124:	881e      	ldrh	r6, [r3, #0]
 8005126:	4853      	ldr	r0, [pc, #332]	; (8005274 <_printf_i+0x23c>)
 8005128:	2f6f      	cmp	r7, #111	; 0x6f
 800512a:	bf0c      	ite	eq
 800512c:	2308      	moveq	r3, #8
 800512e:	230a      	movne	r3, #10
 8005130:	2100      	movs	r1, #0
 8005132:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005136:	6865      	ldr	r5, [r4, #4]
 8005138:	60a5      	str	r5, [r4, #8]
 800513a:	2d00      	cmp	r5, #0
 800513c:	bfa2      	ittt	ge
 800513e:	6821      	ldrge	r1, [r4, #0]
 8005140:	f021 0104 	bicge.w	r1, r1, #4
 8005144:	6021      	strge	r1, [r4, #0]
 8005146:	b90e      	cbnz	r6, 800514c <_printf_i+0x114>
 8005148:	2d00      	cmp	r5, #0
 800514a:	d04b      	beq.n	80051e4 <_printf_i+0x1ac>
 800514c:	4615      	mov	r5, r2
 800514e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005152:	fb03 6711 	mls	r7, r3, r1, r6
 8005156:	5dc7      	ldrb	r7, [r0, r7]
 8005158:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800515c:	4637      	mov	r7, r6
 800515e:	42bb      	cmp	r3, r7
 8005160:	460e      	mov	r6, r1
 8005162:	d9f4      	bls.n	800514e <_printf_i+0x116>
 8005164:	2b08      	cmp	r3, #8
 8005166:	d10b      	bne.n	8005180 <_printf_i+0x148>
 8005168:	6823      	ldr	r3, [r4, #0]
 800516a:	07de      	lsls	r6, r3, #31
 800516c:	d508      	bpl.n	8005180 <_printf_i+0x148>
 800516e:	6923      	ldr	r3, [r4, #16]
 8005170:	6861      	ldr	r1, [r4, #4]
 8005172:	4299      	cmp	r1, r3
 8005174:	bfde      	ittt	le
 8005176:	2330      	movle	r3, #48	; 0x30
 8005178:	f805 3c01 	strble.w	r3, [r5, #-1]
 800517c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005180:	1b52      	subs	r2, r2, r5
 8005182:	6122      	str	r2, [r4, #16]
 8005184:	f8cd a000 	str.w	sl, [sp]
 8005188:	464b      	mov	r3, r9
 800518a:	aa03      	add	r2, sp, #12
 800518c:	4621      	mov	r1, r4
 800518e:	4640      	mov	r0, r8
 8005190:	f7ff fee4 	bl	8004f5c <_printf_common>
 8005194:	3001      	adds	r0, #1
 8005196:	d14a      	bne.n	800522e <_printf_i+0x1f6>
 8005198:	f04f 30ff 	mov.w	r0, #4294967295
 800519c:	b004      	add	sp, #16
 800519e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051a2:	6823      	ldr	r3, [r4, #0]
 80051a4:	f043 0320 	orr.w	r3, r3, #32
 80051a8:	6023      	str	r3, [r4, #0]
 80051aa:	4833      	ldr	r0, [pc, #204]	; (8005278 <_printf_i+0x240>)
 80051ac:	2778      	movs	r7, #120	; 0x78
 80051ae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80051b2:	6823      	ldr	r3, [r4, #0]
 80051b4:	6829      	ldr	r1, [r5, #0]
 80051b6:	061f      	lsls	r7, r3, #24
 80051b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80051bc:	d402      	bmi.n	80051c4 <_printf_i+0x18c>
 80051be:	065f      	lsls	r7, r3, #25
 80051c0:	bf48      	it	mi
 80051c2:	b2b6      	uxthmi	r6, r6
 80051c4:	07df      	lsls	r7, r3, #31
 80051c6:	bf48      	it	mi
 80051c8:	f043 0320 	orrmi.w	r3, r3, #32
 80051cc:	6029      	str	r1, [r5, #0]
 80051ce:	bf48      	it	mi
 80051d0:	6023      	strmi	r3, [r4, #0]
 80051d2:	b91e      	cbnz	r6, 80051dc <_printf_i+0x1a4>
 80051d4:	6823      	ldr	r3, [r4, #0]
 80051d6:	f023 0320 	bic.w	r3, r3, #32
 80051da:	6023      	str	r3, [r4, #0]
 80051dc:	2310      	movs	r3, #16
 80051de:	e7a7      	b.n	8005130 <_printf_i+0xf8>
 80051e0:	4824      	ldr	r0, [pc, #144]	; (8005274 <_printf_i+0x23c>)
 80051e2:	e7e4      	b.n	80051ae <_printf_i+0x176>
 80051e4:	4615      	mov	r5, r2
 80051e6:	e7bd      	b.n	8005164 <_printf_i+0x12c>
 80051e8:	682b      	ldr	r3, [r5, #0]
 80051ea:	6826      	ldr	r6, [r4, #0]
 80051ec:	6961      	ldr	r1, [r4, #20]
 80051ee:	1d18      	adds	r0, r3, #4
 80051f0:	6028      	str	r0, [r5, #0]
 80051f2:	0635      	lsls	r5, r6, #24
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	d501      	bpl.n	80051fc <_printf_i+0x1c4>
 80051f8:	6019      	str	r1, [r3, #0]
 80051fa:	e002      	b.n	8005202 <_printf_i+0x1ca>
 80051fc:	0670      	lsls	r0, r6, #25
 80051fe:	d5fb      	bpl.n	80051f8 <_printf_i+0x1c0>
 8005200:	8019      	strh	r1, [r3, #0]
 8005202:	2300      	movs	r3, #0
 8005204:	6123      	str	r3, [r4, #16]
 8005206:	4615      	mov	r5, r2
 8005208:	e7bc      	b.n	8005184 <_printf_i+0x14c>
 800520a:	682b      	ldr	r3, [r5, #0]
 800520c:	1d1a      	adds	r2, r3, #4
 800520e:	602a      	str	r2, [r5, #0]
 8005210:	681d      	ldr	r5, [r3, #0]
 8005212:	6862      	ldr	r2, [r4, #4]
 8005214:	2100      	movs	r1, #0
 8005216:	4628      	mov	r0, r5
 8005218:	f7fa ffe2 	bl	80001e0 <memchr>
 800521c:	b108      	cbz	r0, 8005222 <_printf_i+0x1ea>
 800521e:	1b40      	subs	r0, r0, r5
 8005220:	6060      	str	r0, [r4, #4]
 8005222:	6863      	ldr	r3, [r4, #4]
 8005224:	6123      	str	r3, [r4, #16]
 8005226:	2300      	movs	r3, #0
 8005228:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800522c:	e7aa      	b.n	8005184 <_printf_i+0x14c>
 800522e:	6923      	ldr	r3, [r4, #16]
 8005230:	462a      	mov	r2, r5
 8005232:	4649      	mov	r1, r9
 8005234:	4640      	mov	r0, r8
 8005236:	47d0      	blx	sl
 8005238:	3001      	adds	r0, #1
 800523a:	d0ad      	beq.n	8005198 <_printf_i+0x160>
 800523c:	6823      	ldr	r3, [r4, #0]
 800523e:	079b      	lsls	r3, r3, #30
 8005240:	d413      	bmi.n	800526a <_printf_i+0x232>
 8005242:	68e0      	ldr	r0, [r4, #12]
 8005244:	9b03      	ldr	r3, [sp, #12]
 8005246:	4298      	cmp	r0, r3
 8005248:	bfb8      	it	lt
 800524a:	4618      	movlt	r0, r3
 800524c:	e7a6      	b.n	800519c <_printf_i+0x164>
 800524e:	2301      	movs	r3, #1
 8005250:	4632      	mov	r2, r6
 8005252:	4649      	mov	r1, r9
 8005254:	4640      	mov	r0, r8
 8005256:	47d0      	blx	sl
 8005258:	3001      	adds	r0, #1
 800525a:	d09d      	beq.n	8005198 <_printf_i+0x160>
 800525c:	3501      	adds	r5, #1
 800525e:	68e3      	ldr	r3, [r4, #12]
 8005260:	9903      	ldr	r1, [sp, #12]
 8005262:	1a5b      	subs	r3, r3, r1
 8005264:	42ab      	cmp	r3, r5
 8005266:	dcf2      	bgt.n	800524e <_printf_i+0x216>
 8005268:	e7eb      	b.n	8005242 <_printf_i+0x20a>
 800526a:	2500      	movs	r5, #0
 800526c:	f104 0619 	add.w	r6, r4, #25
 8005270:	e7f5      	b.n	800525e <_printf_i+0x226>
 8005272:	bf00      	nop
 8005274:	080077ea 	.word	0x080077ea
 8005278:	080077fb 	.word	0x080077fb

0800527c <std>:
 800527c:	2300      	movs	r3, #0
 800527e:	b510      	push	{r4, lr}
 8005280:	4604      	mov	r4, r0
 8005282:	e9c0 3300 	strd	r3, r3, [r0]
 8005286:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800528a:	6083      	str	r3, [r0, #8]
 800528c:	8181      	strh	r1, [r0, #12]
 800528e:	6643      	str	r3, [r0, #100]	; 0x64
 8005290:	81c2      	strh	r2, [r0, #14]
 8005292:	6183      	str	r3, [r0, #24]
 8005294:	4619      	mov	r1, r3
 8005296:	2208      	movs	r2, #8
 8005298:	305c      	adds	r0, #92	; 0x5c
 800529a:	f000 f902 	bl	80054a2 <memset>
 800529e:	4b05      	ldr	r3, [pc, #20]	; (80052b4 <std+0x38>)
 80052a0:	6263      	str	r3, [r4, #36]	; 0x24
 80052a2:	4b05      	ldr	r3, [pc, #20]	; (80052b8 <std+0x3c>)
 80052a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80052a6:	4b05      	ldr	r3, [pc, #20]	; (80052bc <std+0x40>)
 80052a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80052aa:	4b05      	ldr	r3, [pc, #20]	; (80052c0 <std+0x44>)
 80052ac:	6224      	str	r4, [r4, #32]
 80052ae:	6323      	str	r3, [r4, #48]	; 0x30
 80052b0:	bd10      	pop	{r4, pc}
 80052b2:	bf00      	nop
 80052b4:	0800541d 	.word	0x0800541d
 80052b8:	0800543f 	.word	0x0800543f
 80052bc:	08005477 	.word	0x08005477
 80052c0:	0800549b 	.word	0x0800549b

080052c4 <stdio_exit_handler>:
 80052c4:	4a02      	ldr	r2, [pc, #8]	; (80052d0 <stdio_exit_handler+0xc>)
 80052c6:	4903      	ldr	r1, [pc, #12]	; (80052d4 <stdio_exit_handler+0x10>)
 80052c8:	4803      	ldr	r0, [pc, #12]	; (80052d8 <stdio_exit_handler+0x14>)
 80052ca:	f000 b869 	b.w	80053a0 <_fwalk_sglue>
 80052ce:	bf00      	nop
 80052d0:	2000000c 	.word	0x2000000c
 80052d4:	08006f49 	.word	0x08006f49
 80052d8:	20000018 	.word	0x20000018

080052dc <cleanup_stdio>:
 80052dc:	6841      	ldr	r1, [r0, #4]
 80052de:	4b0c      	ldr	r3, [pc, #48]	; (8005310 <cleanup_stdio+0x34>)
 80052e0:	4299      	cmp	r1, r3
 80052e2:	b510      	push	{r4, lr}
 80052e4:	4604      	mov	r4, r0
 80052e6:	d001      	beq.n	80052ec <cleanup_stdio+0x10>
 80052e8:	f001 fe2e 	bl	8006f48 <_fflush_r>
 80052ec:	68a1      	ldr	r1, [r4, #8]
 80052ee:	4b09      	ldr	r3, [pc, #36]	; (8005314 <cleanup_stdio+0x38>)
 80052f0:	4299      	cmp	r1, r3
 80052f2:	d002      	beq.n	80052fa <cleanup_stdio+0x1e>
 80052f4:	4620      	mov	r0, r4
 80052f6:	f001 fe27 	bl	8006f48 <_fflush_r>
 80052fa:	68e1      	ldr	r1, [r4, #12]
 80052fc:	4b06      	ldr	r3, [pc, #24]	; (8005318 <cleanup_stdio+0x3c>)
 80052fe:	4299      	cmp	r1, r3
 8005300:	d004      	beq.n	800530c <cleanup_stdio+0x30>
 8005302:	4620      	mov	r0, r4
 8005304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005308:	f001 be1e 	b.w	8006f48 <_fflush_r>
 800530c:	bd10      	pop	{r4, pc}
 800530e:	bf00      	nop
 8005310:	200004fc 	.word	0x200004fc
 8005314:	20000564 	.word	0x20000564
 8005318:	200005cc 	.word	0x200005cc

0800531c <global_stdio_init.part.0>:
 800531c:	b510      	push	{r4, lr}
 800531e:	4b0b      	ldr	r3, [pc, #44]	; (800534c <global_stdio_init.part.0+0x30>)
 8005320:	4c0b      	ldr	r4, [pc, #44]	; (8005350 <global_stdio_init.part.0+0x34>)
 8005322:	4a0c      	ldr	r2, [pc, #48]	; (8005354 <global_stdio_init.part.0+0x38>)
 8005324:	601a      	str	r2, [r3, #0]
 8005326:	4620      	mov	r0, r4
 8005328:	2200      	movs	r2, #0
 800532a:	2104      	movs	r1, #4
 800532c:	f7ff ffa6 	bl	800527c <std>
 8005330:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005334:	2201      	movs	r2, #1
 8005336:	2109      	movs	r1, #9
 8005338:	f7ff ffa0 	bl	800527c <std>
 800533c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005340:	2202      	movs	r2, #2
 8005342:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005346:	2112      	movs	r1, #18
 8005348:	f7ff bf98 	b.w	800527c <std>
 800534c:	20000634 	.word	0x20000634
 8005350:	200004fc 	.word	0x200004fc
 8005354:	080052c5 	.word	0x080052c5

08005358 <__sfp_lock_acquire>:
 8005358:	4801      	ldr	r0, [pc, #4]	; (8005360 <__sfp_lock_acquire+0x8>)
 800535a:	f000 b91f 	b.w	800559c <__retarget_lock_acquire_recursive>
 800535e:	bf00      	nop
 8005360:	2000063d 	.word	0x2000063d

08005364 <__sfp_lock_release>:
 8005364:	4801      	ldr	r0, [pc, #4]	; (800536c <__sfp_lock_release+0x8>)
 8005366:	f000 b91a 	b.w	800559e <__retarget_lock_release_recursive>
 800536a:	bf00      	nop
 800536c:	2000063d 	.word	0x2000063d

08005370 <__sinit>:
 8005370:	b510      	push	{r4, lr}
 8005372:	4604      	mov	r4, r0
 8005374:	f7ff fff0 	bl	8005358 <__sfp_lock_acquire>
 8005378:	6a23      	ldr	r3, [r4, #32]
 800537a:	b11b      	cbz	r3, 8005384 <__sinit+0x14>
 800537c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005380:	f7ff bff0 	b.w	8005364 <__sfp_lock_release>
 8005384:	4b04      	ldr	r3, [pc, #16]	; (8005398 <__sinit+0x28>)
 8005386:	6223      	str	r3, [r4, #32]
 8005388:	4b04      	ldr	r3, [pc, #16]	; (800539c <__sinit+0x2c>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d1f5      	bne.n	800537c <__sinit+0xc>
 8005390:	f7ff ffc4 	bl	800531c <global_stdio_init.part.0>
 8005394:	e7f2      	b.n	800537c <__sinit+0xc>
 8005396:	bf00      	nop
 8005398:	080052dd 	.word	0x080052dd
 800539c:	20000634 	.word	0x20000634

080053a0 <_fwalk_sglue>:
 80053a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053a4:	4607      	mov	r7, r0
 80053a6:	4688      	mov	r8, r1
 80053a8:	4614      	mov	r4, r2
 80053aa:	2600      	movs	r6, #0
 80053ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80053b0:	f1b9 0901 	subs.w	r9, r9, #1
 80053b4:	d505      	bpl.n	80053c2 <_fwalk_sglue+0x22>
 80053b6:	6824      	ldr	r4, [r4, #0]
 80053b8:	2c00      	cmp	r4, #0
 80053ba:	d1f7      	bne.n	80053ac <_fwalk_sglue+0xc>
 80053bc:	4630      	mov	r0, r6
 80053be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053c2:	89ab      	ldrh	r3, [r5, #12]
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d907      	bls.n	80053d8 <_fwalk_sglue+0x38>
 80053c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80053cc:	3301      	adds	r3, #1
 80053ce:	d003      	beq.n	80053d8 <_fwalk_sglue+0x38>
 80053d0:	4629      	mov	r1, r5
 80053d2:	4638      	mov	r0, r7
 80053d4:	47c0      	blx	r8
 80053d6:	4306      	orrs	r6, r0
 80053d8:	3568      	adds	r5, #104	; 0x68
 80053da:	e7e9      	b.n	80053b0 <_fwalk_sglue+0x10>

080053dc <siprintf>:
 80053dc:	b40e      	push	{r1, r2, r3}
 80053de:	b500      	push	{lr}
 80053e0:	b09c      	sub	sp, #112	; 0x70
 80053e2:	ab1d      	add	r3, sp, #116	; 0x74
 80053e4:	9002      	str	r0, [sp, #8]
 80053e6:	9006      	str	r0, [sp, #24]
 80053e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80053ec:	4809      	ldr	r0, [pc, #36]	; (8005414 <siprintf+0x38>)
 80053ee:	9107      	str	r1, [sp, #28]
 80053f0:	9104      	str	r1, [sp, #16]
 80053f2:	4909      	ldr	r1, [pc, #36]	; (8005418 <siprintf+0x3c>)
 80053f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80053f8:	9105      	str	r1, [sp, #20]
 80053fa:	6800      	ldr	r0, [r0, #0]
 80053fc:	9301      	str	r3, [sp, #4]
 80053fe:	a902      	add	r1, sp, #8
 8005400:	f001 fc1e 	bl	8006c40 <_svfiprintf_r>
 8005404:	9b02      	ldr	r3, [sp, #8]
 8005406:	2200      	movs	r2, #0
 8005408:	701a      	strb	r2, [r3, #0]
 800540a:	b01c      	add	sp, #112	; 0x70
 800540c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005410:	b003      	add	sp, #12
 8005412:	4770      	bx	lr
 8005414:	20000064 	.word	0x20000064
 8005418:	ffff0208 	.word	0xffff0208

0800541c <__sread>:
 800541c:	b510      	push	{r4, lr}
 800541e:	460c      	mov	r4, r1
 8005420:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005424:	f000 f86c 	bl	8005500 <_read_r>
 8005428:	2800      	cmp	r0, #0
 800542a:	bfab      	itete	ge
 800542c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800542e:	89a3      	ldrhlt	r3, [r4, #12]
 8005430:	181b      	addge	r3, r3, r0
 8005432:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005436:	bfac      	ite	ge
 8005438:	6563      	strge	r3, [r4, #84]	; 0x54
 800543a:	81a3      	strhlt	r3, [r4, #12]
 800543c:	bd10      	pop	{r4, pc}

0800543e <__swrite>:
 800543e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005442:	461f      	mov	r7, r3
 8005444:	898b      	ldrh	r3, [r1, #12]
 8005446:	05db      	lsls	r3, r3, #23
 8005448:	4605      	mov	r5, r0
 800544a:	460c      	mov	r4, r1
 800544c:	4616      	mov	r6, r2
 800544e:	d505      	bpl.n	800545c <__swrite+0x1e>
 8005450:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005454:	2302      	movs	r3, #2
 8005456:	2200      	movs	r2, #0
 8005458:	f000 f840 	bl	80054dc <_lseek_r>
 800545c:	89a3      	ldrh	r3, [r4, #12]
 800545e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005462:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005466:	81a3      	strh	r3, [r4, #12]
 8005468:	4632      	mov	r2, r6
 800546a:	463b      	mov	r3, r7
 800546c:	4628      	mov	r0, r5
 800546e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005472:	f000 b857 	b.w	8005524 <_write_r>

08005476 <__sseek>:
 8005476:	b510      	push	{r4, lr}
 8005478:	460c      	mov	r4, r1
 800547a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800547e:	f000 f82d 	bl	80054dc <_lseek_r>
 8005482:	1c43      	adds	r3, r0, #1
 8005484:	89a3      	ldrh	r3, [r4, #12]
 8005486:	bf15      	itete	ne
 8005488:	6560      	strne	r0, [r4, #84]	; 0x54
 800548a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800548e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005492:	81a3      	strheq	r3, [r4, #12]
 8005494:	bf18      	it	ne
 8005496:	81a3      	strhne	r3, [r4, #12]
 8005498:	bd10      	pop	{r4, pc}

0800549a <__sclose>:
 800549a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800549e:	f000 b80d 	b.w	80054bc <_close_r>

080054a2 <memset>:
 80054a2:	4402      	add	r2, r0
 80054a4:	4603      	mov	r3, r0
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d100      	bne.n	80054ac <memset+0xa>
 80054aa:	4770      	bx	lr
 80054ac:	f803 1b01 	strb.w	r1, [r3], #1
 80054b0:	e7f9      	b.n	80054a6 <memset+0x4>
	...

080054b4 <_localeconv_r>:
 80054b4:	4800      	ldr	r0, [pc, #0]	; (80054b8 <_localeconv_r+0x4>)
 80054b6:	4770      	bx	lr
 80054b8:	20000158 	.word	0x20000158

080054bc <_close_r>:
 80054bc:	b538      	push	{r3, r4, r5, lr}
 80054be:	4d06      	ldr	r5, [pc, #24]	; (80054d8 <_close_r+0x1c>)
 80054c0:	2300      	movs	r3, #0
 80054c2:	4604      	mov	r4, r0
 80054c4:	4608      	mov	r0, r1
 80054c6:	602b      	str	r3, [r5, #0]
 80054c8:	f7fc fbeb 	bl	8001ca2 <_close>
 80054cc:	1c43      	adds	r3, r0, #1
 80054ce:	d102      	bne.n	80054d6 <_close_r+0x1a>
 80054d0:	682b      	ldr	r3, [r5, #0]
 80054d2:	b103      	cbz	r3, 80054d6 <_close_r+0x1a>
 80054d4:	6023      	str	r3, [r4, #0]
 80054d6:	bd38      	pop	{r3, r4, r5, pc}
 80054d8:	20000638 	.word	0x20000638

080054dc <_lseek_r>:
 80054dc:	b538      	push	{r3, r4, r5, lr}
 80054de:	4d07      	ldr	r5, [pc, #28]	; (80054fc <_lseek_r+0x20>)
 80054e0:	4604      	mov	r4, r0
 80054e2:	4608      	mov	r0, r1
 80054e4:	4611      	mov	r1, r2
 80054e6:	2200      	movs	r2, #0
 80054e8:	602a      	str	r2, [r5, #0]
 80054ea:	461a      	mov	r2, r3
 80054ec:	f7fc fc00 	bl	8001cf0 <_lseek>
 80054f0:	1c43      	adds	r3, r0, #1
 80054f2:	d102      	bne.n	80054fa <_lseek_r+0x1e>
 80054f4:	682b      	ldr	r3, [r5, #0]
 80054f6:	b103      	cbz	r3, 80054fa <_lseek_r+0x1e>
 80054f8:	6023      	str	r3, [r4, #0]
 80054fa:	bd38      	pop	{r3, r4, r5, pc}
 80054fc:	20000638 	.word	0x20000638

08005500 <_read_r>:
 8005500:	b538      	push	{r3, r4, r5, lr}
 8005502:	4d07      	ldr	r5, [pc, #28]	; (8005520 <_read_r+0x20>)
 8005504:	4604      	mov	r4, r0
 8005506:	4608      	mov	r0, r1
 8005508:	4611      	mov	r1, r2
 800550a:	2200      	movs	r2, #0
 800550c:	602a      	str	r2, [r5, #0]
 800550e:	461a      	mov	r2, r3
 8005510:	f7fc fb8e 	bl	8001c30 <_read>
 8005514:	1c43      	adds	r3, r0, #1
 8005516:	d102      	bne.n	800551e <_read_r+0x1e>
 8005518:	682b      	ldr	r3, [r5, #0]
 800551a:	b103      	cbz	r3, 800551e <_read_r+0x1e>
 800551c:	6023      	str	r3, [r4, #0]
 800551e:	bd38      	pop	{r3, r4, r5, pc}
 8005520:	20000638 	.word	0x20000638

08005524 <_write_r>:
 8005524:	b538      	push	{r3, r4, r5, lr}
 8005526:	4d07      	ldr	r5, [pc, #28]	; (8005544 <_write_r+0x20>)
 8005528:	4604      	mov	r4, r0
 800552a:	4608      	mov	r0, r1
 800552c:	4611      	mov	r1, r2
 800552e:	2200      	movs	r2, #0
 8005530:	602a      	str	r2, [r5, #0]
 8005532:	461a      	mov	r2, r3
 8005534:	f7fc fb99 	bl	8001c6a <_write>
 8005538:	1c43      	adds	r3, r0, #1
 800553a:	d102      	bne.n	8005542 <_write_r+0x1e>
 800553c:	682b      	ldr	r3, [r5, #0]
 800553e:	b103      	cbz	r3, 8005542 <_write_r+0x1e>
 8005540:	6023      	str	r3, [r4, #0]
 8005542:	bd38      	pop	{r3, r4, r5, pc}
 8005544:	20000638 	.word	0x20000638

08005548 <__errno>:
 8005548:	4b01      	ldr	r3, [pc, #4]	; (8005550 <__errno+0x8>)
 800554a:	6818      	ldr	r0, [r3, #0]
 800554c:	4770      	bx	lr
 800554e:	bf00      	nop
 8005550:	20000064 	.word	0x20000064

08005554 <__libc_init_array>:
 8005554:	b570      	push	{r4, r5, r6, lr}
 8005556:	4d0d      	ldr	r5, [pc, #52]	; (800558c <__libc_init_array+0x38>)
 8005558:	4c0d      	ldr	r4, [pc, #52]	; (8005590 <__libc_init_array+0x3c>)
 800555a:	1b64      	subs	r4, r4, r5
 800555c:	10a4      	asrs	r4, r4, #2
 800555e:	2600      	movs	r6, #0
 8005560:	42a6      	cmp	r6, r4
 8005562:	d109      	bne.n	8005578 <__libc_init_array+0x24>
 8005564:	4d0b      	ldr	r5, [pc, #44]	; (8005594 <__libc_init_array+0x40>)
 8005566:	4c0c      	ldr	r4, [pc, #48]	; (8005598 <__libc_init_array+0x44>)
 8005568:	f002 f892 	bl	8007690 <_init>
 800556c:	1b64      	subs	r4, r4, r5
 800556e:	10a4      	asrs	r4, r4, #2
 8005570:	2600      	movs	r6, #0
 8005572:	42a6      	cmp	r6, r4
 8005574:	d105      	bne.n	8005582 <__libc_init_array+0x2e>
 8005576:	bd70      	pop	{r4, r5, r6, pc}
 8005578:	f855 3b04 	ldr.w	r3, [r5], #4
 800557c:	4798      	blx	r3
 800557e:	3601      	adds	r6, #1
 8005580:	e7ee      	b.n	8005560 <__libc_init_array+0xc>
 8005582:	f855 3b04 	ldr.w	r3, [r5], #4
 8005586:	4798      	blx	r3
 8005588:	3601      	adds	r6, #1
 800558a:	e7f2      	b.n	8005572 <__libc_init_array+0x1e>
 800558c:	08007b54 	.word	0x08007b54
 8005590:	08007b54 	.word	0x08007b54
 8005594:	08007b54 	.word	0x08007b54
 8005598:	08007b58 	.word	0x08007b58

0800559c <__retarget_lock_acquire_recursive>:
 800559c:	4770      	bx	lr

0800559e <__retarget_lock_release_recursive>:
 800559e:	4770      	bx	lr

080055a0 <quorem>:
 80055a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055a4:	6903      	ldr	r3, [r0, #16]
 80055a6:	690c      	ldr	r4, [r1, #16]
 80055a8:	42a3      	cmp	r3, r4
 80055aa:	4607      	mov	r7, r0
 80055ac:	db7e      	blt.n	80056ac <quorem+0x10c>
 80055ae:	3c01      	subs	r4, #1
 80055b0:	f101 0814 	add.w	r8, r1, #20
 80055b4:	f100 0514 	add.w	r5, r0, #20
 80055b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80055bc:	9301      	str	r3, [sp, #4]
 80055be:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80055c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80055c6:	3301      	adds	r3, #1
 80055c8:	429a      	cmp	r2, r3
 80055ca:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80055ce:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80055d2:	fbb2 f6f3 	udiv	r6, r2, r3
 80055d6:	d331      	bcc.n	800563c <quorem+0x9c>
 80055d8:	f04f 0e00 	mov.w	lr, #0
 80055dc:	4640      	mov	r0, r8
 80055de:	46ac      	mov	ip, r5
 80055e0:	46f2      	mov	sl, lr
 80055e2:	f850 2b04 	ldr.w	r2, [r0], #4
 80055e6:	b293      	uxth	r3, r2
 80055e8:	fb06 e303 	mla	r3, r6, r3, lr
 80055ec:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80055f0:	0c1a      	lsrs	r2, r3, #16
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	ebaa 0303 	sub.w	r3, sl, r3
 80055f8:	f8dc a000 	ldr.w	sl, [ip]
 80055fc:	fa13 f38a 	uxtah	r3, r3, sl
 8005600:	fb06 220e 	mla	r2, r6, lr, r2
 8005604:	9300      	str	r3, [sp, #0]
 8005606:	9b00      	ldr	r3, [sp, #0]
 8005608:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800560c:	b292      	uxth	r2, r2
 800560e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005612:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005616:	f8bd 3000 	ldrh.w	r3, [sp]
 800561a:	4581      	cmp	r9, r0
 800561c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005620:	f84c 3b04 	str.w	r3, [ip], #4
 8005624:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005628:	d2db      	bcs.n	80055e2 <quorem+0x42>
 800562a:	f855 300b 	ldr.w	r3, [r5, fp]
 800562e:	b92b      	cbnz	r3, 800563c <quorem+0x9c>
 8005630:	9b01      	ldr	r3, [sp, #4]
 8005632:	3b04      	subs	r3, #4
 8005634:	429d      	cmp	r5, r3
 8005636:	461a      	mov	r2, r3
 8005638:	d32c      	bcc.n	8005694 <quorem+0xf4>
 800563a:	613c      	str	r4, [r7, #16]
 800563c:	4638      	mov	r0, r7
 800563e:	f001 f9a5 	bl	800698c <__mcmp>
 8005642:	2800      	cmp	r0, #0
 8005644:	db22      	blt.n	800568c <quorem+0xec>
 8005646:	3601      	adds	r6, #1
 8005648:	4629      	mov	r1, r5
 800564a:	2000      	movs	r0, #0
 800564c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005650:	f8d1 c000 	ldr.w	ip, [r1]
 8005654:	b293      	uxth	r3, r2
 8005656:	1ac3      	subs	r3, r0, r3
 8005658:	0c12      	lsrs	r2, r2, #16
 800565a:	fa13 f38c 	uxtah	r3, r3, ip
 800565e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005662:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005666:	b29b      	uxth	r3, r3
 8005668:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800566c:	45c1      	cmp	r9, r8
 800566e:	f841 3b04 	str.w	r3, [r1], #4
 8005672:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005676:	d2e9      	bcs.n	800564c <quorem+0xac>
 8005678:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800567c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005680:	b922      	cbnz	r2, 800568c <quorem+0xec>
 8005682:	3b04      	subs	r3, #4
 8005684:	429d      	cmp	r5, r3
 8005686:	461a      	mov	r2, r3
 8005688:	d30a      	bcc.n	80056a0 <quorem+0x100>
 800568a:	613c      	str	r4, [r7, #16]
 800568c:	4630      	mov	r0, r6
 800568e:	b003      	add	sp, #12
 8005690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005694:	6812      	ldr	r2, [r2, #0]
 8005696:	3b04      	subs	r3, #4
 8005698:	2a00      	cmp	r2, #0
 800569a:	d1ce      	bne.n	800563a <quorem+0x9a>
 800569c:	3c01      	subs	r4, #1
 800569e:	e7c9      	b.n	8005634 <quorem+0x94>
 80056a0:	6812      	ldr	r2, [r2, #0]
 80056a2:	3b04      	subs	r3, #4
 80056a4:	2a00      	cmp	r2, #0
 80056a6:	d1f0      	bne.n	800568a <quorem+0xea>
 80056a8:	3c01      	subs	r4, #1
 80056aa:	e7eb      	b.n	8005684 <quorem+0xe4>
 80056ac:	2000      	movs	r0, #0
 80056ae:	e7ee      	b.n	800568e <quorem+0xee>

080056b0 <_dtoa_r>:
 80056b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056b4:	ed2d 8b04 	vpush	{d8-d9}
 80056b8:	69c5      	ldr	r5, [r0, #28]
 80056ba:	b093      	sub	sp, #76	; 0x4c
 80056bc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80056c0:	ec57 6b10 	vmov	r6, r7, d0
 80056c4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80056c8:	9107      	str	r1, [sp, #28]
 80056ca:	4604      	mov	r4, r0
 80056cc:	920a      	str	r2, [sp, #40]	; 0x28
 80056ce:	930d      	str	r3, [sp, #52]	; 0x34
 80056d0:	b975      	cbnz	r5, 80056f0 <_dtoa_r+0x40>
 80056d2:	2010      	movs	r0, #16
 80056d4:	f000 fe2a 	bl	800632c <malloc>
 80056d8:	4602      	mov	r2, r0
 80056da:	61e0      	str	r0, [r4, #28]
 80056dc:	b920      	cbnz	r0, 80056e8 <_dtoa_r+0x38>
 80056de:	4bae      	ldr	r3, [pc, #696]	; (8005998 <_dtoa_r+0x2e8>)
 80056e0:	21ef      	movs	r1, #239	; 0xef
 80056e2:	48ae      	ldr	r0, [pc, #696]	; (800599c <_dtoa_r+0x2ec>)
 80056e4:	f001 fc90 	bl	8007008 <__assert_func>
 80056e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80056ec:	6005      	str	r5, [r0, #0]
 80056ee:	60c5      	str	r5, [r0, #12]
 80056f0:	69e3      	ldr	r3, [r4, #28]
 80056f2:	6819      	ldr	r1, [r3, #0]
 80056f4:	b151      	cbz	r1, 800570c <_dtoa_r+0x5c>
 80056f6:	685a      	ldr	r2, [r3, #4]
 80056f8:	604a      	str	r2, [r1, #4]
 80056fa:	2301      	movs	r3, #1
 80056fc:	4093      	lsls	r3, r2
 80056fe:	608b      	str	r3, [r1, #8]
 8005700:	4620      	mov	r0, r4
 8005702:	f000 ff07 	bl	8006514 <_Bfree>
 8005706:	69e3      	ldr	r3, [r4, #28]
 8005708:	2200      	movs	r2, #0
 800570a:	601a      	str	r2, [r3, #0]
 800570c:	1e3b      	subs	r3, r7, #0
 800570e:	bfbb      	ittet	lt
 8005710:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005714:	9303      	strlt	r3, [sp, #12]
 8005716:	2300      	movge	r3, #0
 8005718:	2201      	movlt	r2, #1
 800571a:	bfac      	ite	ge
 800571c:	f8c8 3000 	strge.w	r3, [r8]
 8005720:	f8c8 2000 	strlt.w	r2, [r8]
 8005724:	4b9e      	ldr	r3, [pc, #632]	; (80059a0 <_dtoa_r+0x2f0>)
 8005726:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800572a:	ea33 0308 	bics.w	r3, r3, r8
 800572e:	d11b      	bne.n	8005768 <_dtoa_r+0xb8>
 8005730:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005732:	f242 730f 	movw	r3, #9999	; 0x270f
 8005736:	6013      	str	r3, [r2, #0]
 8005738:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800573c:	4333      	orrs	r3, r6
 800573e:	f000 8593 	beq.w	8006268 <_dtoa_r+0xbb8>
 8005742:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005744:	b963      	cbnz	r3, 8005760 <_dtoa_r+0xb0>
 8005746:	4b97      	ldr	r3, [pc, #604]	; (80059a4 <_dtoa_r+0x2f4>)
 8005748:	e027      	b.n	800579a <_dtoa_r+0xea>
 800574a:	4b97      	ldr	r3, [pc, #604]	; (80059a8 <_dtoa_r+0x2f8>)
 800574c:	9300      	str	r3, [sp, #0]
 800574e:	3308      	adds	r3, #8
 8005750:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005752:	6013      	str	r3, [r2, #0]
 8005754:	9800      	ldr	r0, [sp, #0]
 8005756:	b013      	add	sp, #76	; 0x4c
 8005758:	ecbd 8b04 	vpop	{d8-d9}
 800575c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005760:	4b90      	ldr	r3, [pc, #576]	; (80059a4 <_dtoa_r+0x2f4>)
 8005762:	9300      	str	r3, [sp, #0]
 8005764:	3303      	adds	r3, #3
 8005766:	e7f3      	b.n	8005750 <_dtoa_r+0xa0>
 8005768:	ed9d 7b02 	vldr	d7, [sp, #8]
 800576c:	2200      	movs	r2, #0
 800576e:	ec51 0b17 	vmov	r0, r1, d7
 8005772:	eeb0 8a47 	vmov.f32	s16, s14
 8005776:	eef0 8a67 	vmov.f32	s17, s15
 800577a:	2300      	movs	r3, #0
 800577c:	f7fb f9ac 	bl	8000ad8 <__aeabi_dcmpeq>
 8005780:	4681      	mov	r9, r0
 8005782:	b160      	cbz	r0, 800579e <_dtoa_r+0xee>
 8005784:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005786:	2301      	movs	r3, #1
 8005788:	6013      	str	r3, [r2, #0]
 800578a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800578c:	2b00      	cmp	r3, #0
 800578e:	f000 8568 	beq.w	8006262 <_dtoa_r+0xbb2>
 8005792:	4b86      	ldr	r3, [pc, #536]	; (80059ac <_dtoa_r+0x2fc>)
 8005794:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005796:	6013      	str	r3, [r2, #0]
 8005798:	3b01      	subs	r3, #1
 800579a:	9300      	str	r3, [sp, #0]
 800579c:	e7da      	b.n	8005754 <_dtoa_r+0xa4>
 800579e:	aa10      	add	r2, sp, #64	; 0x40
 80057a0:	a911      	add	r1, sp, #68	; 0x44
 80057a2:	4620      	mov	r0, r4
 80057a4:	eeb0 0a48 	vmov.f32	s0, s16
 80057a8:	eef0 0a68 	vmov.f32	s1, s17
 80057ac:	f001 f994 	bl	8006ad8 <__d2b>
 80057b0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80057b4:	4682      	mov	sl, r0
 80057b6:	2d00      	cmp	r5, #0
 80057b8:	d07f      	beq.n	80058ba <_dtoa_r+0x20a>
 80057ba:	ee18 3a90 	vmov	r3, s17
 80057be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057c2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80057c6:	ec51 0b18 	vmov	r0, r1, d8
 80057ca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80057ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80057d2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80057d6:	4619      	mov	r1, r3
 80057d8:	2200      	movs	r2, #0
 80057da:	4b75      	ldr	r3, [pc, #468]	; (80059b0 <_dtoa_r+0x300>)
 80057dc:	f7fa fd5c 	bl	8000298 <__aeabi_dsub>
 80057e0:	a367      	add	r3, pc, #412	; (adr r3, 8005980 <_dtoa_r+0x2d0>)
 80057e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e6:	f7fa ff0f 	bl	8000608 <__aeabi_dmul>
 80057ea:	a367      	add	r3, pc, #412	; (adr r3, 8005988 <_dtoa_r+0x2d8>)
 80057ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f0:	f7fa fd54 	bl	800029c <__adddf3>
 80057f4:	4606      	mov	r6, r0
 80057f6:	4628      	mov	r0, r5
 80057f8:	460f      	mov	r7, r1
 80057fa:	f7fa fe9b 	bl	8000534 <__aeabi_i2d>
 80057fe:	a364      	add	r3, pc, #400	; (adr r3, 8005990 <_dtoa_r+0x2e0>)
 8005800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005804:	f7fa ff00 	bl	8000608 <__aeabi_dmul>
 8005808:	4602      	mov	r2, r0
 800580a:	460b      	mov	r3, r1
 800580c:	4630      	mov	r0, r6
 800580e:	4639      	mov	r1, r7
 8005810:	f7fa fd44 	bl	800029c <__adddf3>
 8005814:	4606      	mov	r6, r0
 8005816:	460f      	mov	r7, r1
 8005818:	f7fb f9a6 	bl	8000b68 <__aeabi_d2iz>
 800581c:	2200      	movs	r2, #0
 800581e:	4683      	mov	fp, r0
 8005820:	2300      	movs	r3, #0
 8005822:	4630      	mov	r0, r6
 8005824:	4639      	mov	r1, r7
 8005826:	f7fb f961 	bl	8000aec <__aeabi_dcmplt>
 800582a:	b148      	cbz	r0, 8005840 <_dtoa_r+0x190>
 800582c:	4658      	mov	r0, fp
 800582e:	f7fa fe81 	bl	8000534 <__aeabi_i2d>
 8005832:	4632      	mov	r2, r6
 8005834:	463b      	mov	r3, r7
 8005836:	f7fb f94f 	bl	8000ad8 <__aeabi_dcmpeq>
 800583a:	b908      	cbnz	r0, 8005840 <_dtoa_r+0x190>
 800583c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005840:	f1bb 0f16 	cmp.w	fp, #22
 8005844:	d857      	bhi.n	80058f6 <_dtoa_r+0x246>
 8005846:	4b5b      	ldr	r3, [pc, #364]	; (80059b4 <_dtoa_r+0x304>)
 8005848:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800584c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005850:	ec51 0b18 	vmov	r0, r1, d8
 8005854:	f7fb f94a 	bl	8000aec <__aeabi_dcmplt>
 8005858:	2800      	cmp	r0, #0
 800585a:	d04e      	beq.n	80058fa <_dtoa_r+0x24a>
 800585c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005860:	2300      	movs	r3, #0
 8005862:	930c      	str	r3, [sp, #48]	; 0x30
 8005864:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005866:	1b5b      	subs	r3, r3, r5
 8005868:	1e5a      	subs	r2, r3, #1
 800586a:	bf45      	ittet	mi
 800586c:	f1c3 0301 	rsbmi	r3, r3, #1
 8005870:	9305      	strmi	r3, [sp, #20]
 8005872:	2300      	movpl	r3, #0
 8005874:	2300      	movmi	r3, #0
 8005876:	9206      	str	r2, [sp, #24]
 8005878:	bf54      	ite	pl
 800587a:	9305      	strpl	r3, [sp, #20]
 800587c:	9306      	strmi	r3, [sp, #24]
 800587e:	f1bb 0f00 	cmp.w	fp, #0
 8005882:	db3c      	blt.n	80058fe <_dtoa_r+0x24e>
 8005884:	9b06      	ldr	r3, [sp, #24]
 8005886:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800588a:	445b      	add	r3, fp
 800588c:	9306      	str	r3, [sp, #24]
 800588e:	2300      	movs	r3, #0
 8005890:	9308      	str	r3, [sp, #32]
 8005892:	9b07      	ldr	r3, [sp, #28]
 8005894:	2b09      	cmp	r3, #9
 8005896:	d868      	bhi.n	800596a <_dtoa_r+0x2ba>
 8005898:	2b05      	cmp	r3, #5
 800589a:	bfc4      	itt	gt
 800589c:	3b04      	subgt	r3, #4
 800589e:	9307      	strgt	r3, [sp, #28]
 80058a0:	9b07      	ldr	r3, [sp, #28]
 80058a2:	f1a3 0302 	sub.w	r3, r3, #2
 80058a6:	bfcc      	ite	gt
 80058a8:	2500      	movgt	r5, #0
 80058aa:	2501      	movle	r5, #1
 80058ac:	2b03      	cmp	r3, #3
 80058ae:	f200 8085 	bhi.w	80059bc <_dtoa_r+0x30c>
 80058b2:	e8df f003 	tbb	[pc, r3]
 80058b6:	3b2e      	.short	0x3b2e
 80058b8:	5839      	.short	0x5839
 80058ba:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80058be:	441d      	add	r5, r3
 80058c0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80058c4:	2b20      	cmp	r3, #32
 80058c6:	bfc1      	itttt	gt
 80058c8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80058cc:	fa08 f803 	lslgt.w	r8, r8, r3
 80058d0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80058d4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80058d8:	bfd6      	itet	le
 80058da:	f1c3 0320 	rsble	r3, r3, #32
 80058de:	ea48 0003 	orrgt.w	r0, r8, r3
 80058e2:	fa06 f003 	lslle.w	r0, r6, r3
 80058e6:	f7fa fe15 	bl	8000514 <__aeabi_ui2d>
 80058ea:	2201      	movs	r2, #1
 80058ec:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80058f0:	3d01      	subs	r5, #1
 80058f2:	920e      	str	r2, [sp, #56]	; 0x38
 80058f4:	e76f      	b.n	80057d6 <_dtoa_r+0x126>
 80058f6:	2301      	movs	r3, #1
 80058f8:	e7b3      	b.n	8005862 <_dtoa_r+0x1b2>
 80058fa:	900c      	str	r0, [sp, #48]	; 0x30
 80058fc:	e7b2      	b.n	8005864 <_dtoa_r+0x1b4>
 80058fe:	9b05      	ldr	r3, [sp, #20]
 8005900:	eba3 030b 	sub.w	r3, r3, fp
 8005904:	9305      	str	r3, [sp, #20]
 8005906:	f1cb 0300 	rsb	r3, fp, #0
 800590a:	9308      	str	r3, [sp, #32]
 800590c:	2300      	movs	r3, #0
 800590e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005910:	e7bf      	b.n	8005892 <_dtoa_r+0x1e2>
 8005912:	2300      	movs	r3, #0
 8005914:	9309      	str	r3, [sp, #36]	; 0x24
 8005916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005918:	2b00      	cmp	r3, #0
 800591a:	dc52      	bgt.n	80059c2 <_dtoa_r+0x312>
 800591c:	2301      	movs	r3, #1
 800591e:	9301      	str	r3, [sp, #4]
 8005920:	9304      	str	r3, [sp, #16]
 8005922:	461a      	mov	r2, r3
 8005924:	920a      	str	r2, [sp, #40]	; 0x28
 8005926:	e00b      	b.n	8005940 <_dtoa_r+0x290>
 8005928:	2301      	movs	r3, #1
 800592a:	e7f3      	b.n	8005914 <_dtoa_r+0x264>
 800592c:	2300      	movs	r3, #0
 800592e:	9309      	str	r3, [sp, #36]	; 0x24
 8005930:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005932:	445b      	add	r3, fp
 8005934:	9301      	str	r3, [sp, #4]
 8005936:	3301      	adds	r3, #1
 8005938:	2b01      	cmp	r3, #1
 800593a:	9304      	str	r3, [sp, #16]
 800593c:	bfb8      	it	lt
 800593e:	2301      	movlt	r3, #1
 8005940:	69e0      	ldr	r0, [r4, #28]
 8005942:	2100      	movs	r1, #0
 8005944:	2204      	movs	r2, #4
 8005946:	f102 0614 	add.w	r6, r2, #20
 800594a:	429e      	cmp	r6, r3
 800594c:	d93d      	bls.n	80059ca <_dtoa_r+0x31a>
 800594e:	6041      	str	r1, [r0, #4]
 8005950:	4620      	mov	r0, r4
 8005952:	f000 fd9f 	bl	8006494 <_Balloc>
 8005956:	9000      	str	r0, [sp, #0]
 8005958:	2800      	cmp	r0, #0
 800595a:	d139      	bne.n	80059d0 <_dtoa_r+0x320>
 800595c:	4b16      	ldr	r3, [pc, #88]	; (80059b8 <_dtoa_r+0x308>)
 800595e:	4602      	mov	r2, r0
 8005960:	f240 11af 	movw	r1, #431	; 0x1af
 8005964:	e6bd      	b.n	80056e2 <_dtoa_r+0x32>
 8005966:	2301      	movs	r3, #1
 8005968:	e7e1      	b.n	800592e <_dtoa_r+0x27e>
 800596a:	2501      	movs	r5, #1
 800596c:	2300      	movs	r3, #0
 800596e:	9307      	str	r3, [sp, #28]
 8005970:	9509      	str	r5, [sp, #36]	; 0x24
 8005972:	f04f 33ff 	mov.w	r3, #4294967295
 8005976:	9301      	str	r3, [sp, #4]
 8005978:	9304      	str	r3, [sp, #16]
 800597a:	2200      	movs	r2, #0
 800597c:	2312      	movs	r3, #18
 800597e:	e7d1      	b.n	8005924 <_dtoa_r+0x274>
 8005980:	636f4361 	.word	0x636f4361
 8005984:	3fd287a7 	.word	0x3fd287a7
 8005988:	8b60c8b3 	.word	0x8b60c8b3
 800598c:	3fc68a28 	.word	0x3fc68a28
 8005990:	509f79fb 	.word	0x509f79fb
 8005994:	3fd34413 	.word	0x3fd34413
 8005998:	08007819 	.word	0x08007819
 800599c:	08007830 	.word	0x08007830
 80059a0:	7ff00000 	.word	0x7ff00000
 80059a4:	08007815 	.word	0x08007815
 80059a8:	0800780c 	.word	0x0800780c
 80059ac:	080077e9 	.word	0x080077e9
 80059b0:	3ff80000 	.word	0x3ff80000
 80059b4:	08007920 	.word	0x08007920
 80059b8:	08007888 	.word	0x08007888
 80059bc:	2301      	movs	r3, #1
 80059be:	9309      	str	r3, [sp, #36]	; 0x24
 80059c0:	e7d7      	b.n	8005972 <_dtoa_r+0x2c2>
 80059c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059c4:	9301      	str	r3, [sp, #4]
 80059c6:	9304      	str	r3, [sp, #16]
 80059c8:	e7ba      	b.n	8005940 <_dtoa_r+0x290>
 80059ca:	3101      	adds	r1, #1
 80059cc:	0052      	lsls	r2, r2, #1
 80059ce:	e7ba      	b.n	8005946 <_dtoa_r+0x296>
 80059d0:	69e3      	ldr	r3, [r4, #28]
 80059d2:	9a00      	ldr	r2, [sp, #0]
 80059d4:	601a      	str	r2, [r3, #0]
 80059d6:	9b04      	ldr	r3, [sp, #16]
 80059d8:	2b0e      	cmp	r3, #14
 80059da:	f200 80a8 	bhi.w	8005b2e <_dtoa_r+0x47e>
 80059de:	2d00      	cmp	r5, #0
 80059e0:	f000 80a5 	beq.w	8005b2e <_dtoa_r+0x47e>
 80059e4:	f1bb 0f00 	cmp.w	fp, #0
 80059e8:	dd38      	ble.n	8005a5c <_dtoa_r+0x3ac>
 80059ea:	4bc0      	ldr	r3, [pc, #768]	; (8005cec <_dtoa_r+0x63c>)
 80059ec:	f00b 020f 	and.w	r2, fp, #15
 80059f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059f4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80059f8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80059fc:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005a00:	d019      	beq.n	8005a36 <_dtoa_r+0x386>
 8005a02:	4bbb      	ldr	r3, [pc, #748]	; (8005cf0 <_dtoa_r+0x640>)
 8005a04:	ec51 0b18 	vmov	r0, r1, d8
 8005a08:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005a0c:	f7fa ff26 	bl	800085c <__aeabi_ddiv>
 8005a10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a14:	f008 080f 	and.w	r8, r8, #15
 8005a18:	2503      	movs	r5, #3
 8005a1a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8005cf0 <_dtoa_r+0x640>
 8005a1e:	f1b8 0f00 	cmp.w	r8, #0
 8005a22:	d10a      	bne.n	8005a3a <_dtoa_r+0x38a>
 8005a24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a28:	4632      	mov	r2, r6
 8005a2a:	463b      	mov	r3, r7
 8005a2c:	f7fa ff16 	bl	800085c <__aeabi_ddiv>
 8005a30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a34:	e02b      	b.n	8005a8e <_dtoa_r+0x3de>
 8005a36:	2502      	movs	r5, #2
 8005a38:	e7ef      	b.n	8005a1a <_dtoa_r+0x36a>
 8005a3a:	f018 0f01 	tst.w	r8, #1
 8005a3e:	d008      	beq.n	8005a52 <_dtoa_r+0x3a2>
 8005a40:	4630      	mov	r0, r6
 8005a42:	4639      	mov	r1, r7
 8005a44:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005a48:	f7fa fdde 	bl	8000608 <__aeabi_dmul>
 8005a4c:	3501      	adds	r5, #1
 8005a4e:	4606      	mov	r6, r0
 8005a50:	460f      	mov	r7, r1
 8005a52:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005a56:	f109 0908 	add.w	r9, r9, #8
 8005a5a:	e7e0      	b.n	8005a1e <_dtoa_r+0x36e>
 8005a5c:	f000 809f 	beq.w	8005b9e <_dtoa_r+0x4ee>
 8005a60:	f1cb 0600 	rsb	r6, fp, #0
 8005a64:	4ba1      	ldr	r3, [pc, #644]	; (8005cec <_dtoa_r+0x63c>)
 8005a66:	4fa2      	ldr	r7, [pc, #648]	; (8005cf0 <_dtoa_r+0x640>)
 8005a68:	f006 020f 	and.w	r2, r6, #15
 8005a6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a74:	ec51 0b18 	vmov	r0, r1, d8
 8005a78:	f7fa fdc6 	bl	8000608 <__aeabi_dmul>
 8005a7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a80:	1136      	asrs	r6, r6, #4
 8005a82:	2300      	movs	r3, #0
 8005a84:	2502      	movs	r5, #2
 8005a86:	2e00      	cmp	r6, #0
 8005a88:	d17e      	bne.n	8005b88 <_dtoa_r+0x4d8>
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d1d0      	bne.n	8005a30 <_dtoa_r+0x380>
 8005a8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a90:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	f000 8084 	beq.w	8005ba2 <_dtoa_r+0x4f2>
 8005a9a:	4b96      	ldr	r3, [pc, #600]	; (8005cf4 <_dtoa_r+0x644>)
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	4640      	mov	r0, r8
 8005aa0:	4649      	mov	r1, r9
 8005aa2:	f7fb f823 	bl	8000aec <__aeabi_dcmplt>
 8005aa6:	2800      	cmp	r0, #0
 8005aa8:	d07b      	beq.n	8005ba2 <_dtoa_r+0x4f2>
 8005aaa:	9b04      	ldr	r3, [sp, #16]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d078      	beq.n	8005ba2 <_dtoa_r+0x4f2>
 8005ab0:	9b01      	ldr	r3, [sp, #4]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	dd39      	ble.n	8005b2a <_dtoa_r+0x47a>
 8005ab6:	4b90      	ldr	r3, [pc, #576]	; (8005cf8 <_dtoa_r+0x648>)
 8005ab8:	2200      	movs	r2, #0
 8005aba:	4640      	mov	r0, r8
 8005abc:	4649      	mov	r1, r9
 8005abe:	f7fa fda3 	bl	8000608 <__aeabi_dmul>
 8005ac2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ac6:	9e01      	ldr	r6, [sp, #4]
 8005ac8:	f10b 37ff 	add.w	r7, fp, #4294967295
 8005acc:	3501      	adds	r5, #1
 8005ace:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005ad2:	4628      	mov	r0, r5
 8005ad4:	f7fa fd2e 	bl	8000534 <__aeabi_i2d>
 8005ad8:	4642      	mov	r2, r8
 8005ada:	464b      	mov	r3, r9
 8005adc:	f7fa fd94 	bl	8000608 <__aeabi_dmul>
 8005ae0:	4b86      	ldr	r3, [pc, #536]	; (8005cfc <_dtoa_r+0x64c>)
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f7fa fbda 	bl	800029c <__adddf3>
 8005ae8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005aec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005af0:	9303      	str	r3, [sp, #12]
 8005af2:	2e00      	cmp	r6, #0
 8005af4:	d158      	bne.n	8005ba8 <_dtoa_r+0x4f8>
 8005af6:	4b82      	ldr	r3, [pc, #520]	; (8005d00 <_dtoa_r+0x650>)
 8005af8:	2200      	movs	r2, #0
 8005afa:	4640      	mov	r0, r8
 8005afc:	4649      	mov	r1, r9
 8005afe:	f7fa fbcb 	bl	8000298 <__aeabi_dsub>
 8005b02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b06:	4680      	mov	r8, r0
 8005b08:	4689      	mov	r9, r1
 8005b0a:	f7fb f80d 	bl	8000b28 <__aeabi_dcmpgt>
 8005b0e:	2800      	cmp	r0, #0
 8005b10:	f040 8296 	bne.w	8006040 <_dtoa_r+0x990>
 8005b14:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005b18:	4640      	mov	r0, r8
 8005b1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005b1e:	4649      	mov	r1, r9
 8005b20:	f7fa ffe4 	bl	8000aec <__aeabi_dcmplt>
 8005b24:	2800      	cmp	r0, #0
 8005b26:	f040 8289 	bne.w	800603c <_dtoa_r+0x98c>
 8005b2a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005b2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	f2c0 814e 	blt.w	8005dd2 <_dtoa_r+0x722>
 8005b36:	f1bb 0f0e 	cmp.w	fp, #14
 8005b3a:	f300 814a 	bgt.w	8005dd2 <_dtoa_r+0x722>
 8005b3e:	4b6b      	ldr	r3, [pc, #428]	; (8005cec <_dtoa_r+0x63c>)
 8005b40:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005b44:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005b48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	f280 80dc 	bge.w	8005d08 <_dtoa_r+0x658>
 8005b50:	9b04      	ldr	r3, [sp, #16]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	f300 80d8 	bgt.w	8005d08 <_dtoa_r+0x658>
 8005b58:	f040 826f 	bne.w	800603a <_dtoa_r+0x98a>
 8005b5c:	4b68      	ldr	r3, [pc, #416]	; (8005d00 <_dtoa_r+0x650>)
 8005b5e:	2200      	movs	r2, #0
 8005b60:	4640      	mov	r0, r8
 8005b62:	4649      	mov	r1, r9
 8005b64:	f7fa fd50 	bl	8000608 <__aeabi_dmul>
 8005b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b6c:	f7fa ffd2 	bl	8000b14 <__aeabi_dcmpge>
 8005b70:	9e04      	ldr	r6, [sp, #16]
 8005b72:	4637      	mov	r7, r6
 8005b74:	2800      	cmp	r0, #0
 8005b76:	f040 8245 	bne.w	8006004 <_dtoa_r+0x954>
 8005b7a:	9d00      	ldr	r5, [sp, #0]
 8005b7c:	2331      	movs	r3, #49	; 0x31
 8005b7e:	f805 3b01 	strb.w	r3, [r5], #1
 8005b82:	f10b 0b01 	add.w	fp, fp, #1
 8005b86:	e241      	b.n	800600c <_dtoa_r+0x95c>
 8005b88:	07f2      	lsls	r2, r6, #31
 8005b8a:	d505      	bpl.n	8005b98 <_dtoa_r+0x4e8>
 8005b8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b90:	f7fa fd3a 	bl	8000608 <__aeabi_dmul>
 8005b94:	3501      	adds	r5, #1
 8005b96:	2301      	movs	r3, #1
 8005b98:	1076      	asrs	r6, r6, #1
 8005b9a:	3708      	adds	r7, #8
 8005b9c:	e773      	b.n	8005a86 <_dtoa_r+0x3d6>
 8005b9e:	2502      	movs	r5, #2
 8005ba0:	e775      	b.n	8005a8e <_dtoa_r+0x3de>
 8005ba2:	9e04      	ldr	r6, [sp, #16]
 8005ba4:	465f      	mov	r7, fp
 8005ba6:	e792      	b.n	8005ace <_dtoa_r+0x41e>
 8005ba8:	9900      	ldr	r1, [sp, #0]
 8005baa:	4b50      	ldr	r3, [pc, #320]	; (8005cec <_dtoa_r+0x63c>)
 8005bac:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005bb0:	4431      	add	r1, r6
 8005bb2:	9102      	str	r1, [sp, #8]
 8005bb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005bb6:	eeb0 9a47 	vmov.f32	s18, s14
 8005bba:	eef0 9a67 	vmov.f32	s19, s15
 8005bbe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005bc2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005bc6:	2900      	cmp	r1, #0
 8005bc8:	d044      	beq.n	8005c54 <_dtoa_r+0x5a4>
 8005bca:	494e      	ldr	r1, [pc, #312]	; (8005d04 <_dtoa_r+0x654>)
 8005bcc:	2000      	movs	r0, #0
 8005bce:	f7fa fe45 	bl	800085c <__aeabi_ddiv>
 8005bd2:	ec53 2b19 	vmov	r2, r3, d9
 8005bd6:	f7fa fb5f 	bl	8000298 <__aeabi_dsub>
 8005bda:	9d00      	ldr	r5, [sp, #0]
 8005bdc:	ec41 0b19 	vmov	d9, r0, r1
 8005be0:	4649      	mov	r1, r9
 8005be2:	4640      	mov	r0, r8
 8005be4:	f7fa ffc0 	bl	8000b68 <__aeabi_d2iz>
 8005be8:	4606      	mov	r6, r0
 8005bea:	f7fa fca3 	bl	8000534 <__aeabi_i2d>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	4640      	mov	r0, r8
 8005bf4:	4649      	mov	r1, r9
 8005bf6:	f7fa fb4f 	bl	8000298 <__aeabi_dsub>
 8005bfa:	3630      	adds	r6, #48	; 0x30
 8005bfc:	f805 6b01 	strb.w	r6, [r5], #1
 8005c00:	ec53 2b19 	vmov	r2, r3, d9
 8005c04:	4680      	mov	r8, r0
 8005c06:	4689      	mov	r9, r1
 8005c08:	f7fa ff70 	bl	8000aec <__aeabi_dcmplt>
 8005c0c:	2800      	cmp	r0, #0
 8005c0e:	d164      	bne.n	8005cda <_dtoa_r+0x62a>
 8005c10:	4642      	mov	r2, r8
 8005c12:	464b      	mov	r3, r9
 8005c14:	4937      	ldr	r1, [pc, #220]	; (8005cf4 <_dtoa_r+0x644>)
 8005c16:	2000      	movs	r0, #0
 8005c18:	f7fa fb3e 	bl	8000298 <__aeabi_dsub>
 8005c1c:	ec53 2b19 	vmov	r2, r3, d9
 8005c20:	f7fa ff64 	bl	8000aec <__aeabi_dcmplt>
 8005c24:	2800      	cmp	r0, #0
 8005c26:	f040 80b6 	bne.w	8005d96 <_dtoa_r+0x6e6>
 8005c2a:	9b02      	ldr	r3, [sp, #8]
 8005c2c:	429d      	cmp	r5, r3
 8005c2e:	f43f af7c 	beq.w	8005b2a <_dtoa_r+0x47a>
 8005c32:	4b31      	ldr	r3, [pc, #196]	; (8005cf8 <_dtoa_r+0x648>)
 8005c34:	ec51 0b19 	vmov	r0, r1, d9
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f7fa fce5 	bl	8000608 <__aeabi_dmul>
 8005c3e:	4b2e      	ldr	r3, [pc, #184]	; (8005cf8 <_dtoa_r+0x648>)
 8005c40:	ec41 0b19 	vmov	d9, r0, r1
 8005c44:	2200      	movs	r2, #0
 8005c46:	4640      	mov	r0, r8
 8005c48:	4649      	mov	r1, r9
 8005c4a:	f7fa fcdd 	bl	8000608 <__aeabi_dmul>
 8005c4e:	4680      	mov	r8, r0
 8005c50:	4689      	mov	r9, r1
 8005c52:	e7c5      	b.n	8005be0 <_dtoa_r+0x530>
 8005c54:	ec51 0b17 	vmov	r0, r1, d7
 8005c58:	f7fa fcd6 	bl	8000608 <__aeabi_dmul>
 8005c5c:	9b02      	ldr	r3, [sp, #8]
 8005c5e:	9d00      	ldr	r5, [sp, #0]
 8005c60:	930f      	str	r3, [sp, #60]	; 0x3c
 8005c62:	ec41 0b19 	vmov	d9, r0, r1
 8005c66:	4649      	mov	r1, r9
 8005c68:	4640      	mov	r0, r8
 8005c6a:	f7fa ff7d 	bl	8000b68 <__aeabi_d2iz>
 8005c6e:	4606      	mov	r6, r0
 8005c70:	f7fa fc60 	bl	8000534 <__aeabi_i2d>
 8005c74:	3630      	adds	r6, #48	; 0x30
 8005c76:	4602      	mov	r2, r0
 8005c78:	460b      	mov	r3, r1
 8005c7a:	4640      	mov	r0, r8
 8005c7c:	4649      	mov	r1, r9
 8005c7e:	f7fa fb0b 	bl	8000298 <__aeabi_dsub>
 8005c82:	f805 6b01 	strb.w	r6, [r5], #1
 8005c86:	9b02      	ldr	r3, [sp, #8]
 8005c88:	429d      	cmp	r5, r3
 8005c8a:	4680      	mov	r8, r0
 8005c8c:	4689      	mov	r9, r1
 8005c8e:	f04f 0200 	mov.w	r2, #0
 8005c92:	d124      	bne.n	8005cde <_dtoa_r+0x62e>
 8005c94:	4b1b      	ldr	r3, [pc, #108]	; (8005d04 <_dtoa_r+0x654>)
 8005c96:	ec51 0b19 	vmov	r0, r1, d9
 8005c9a:	f7fa faff 	bl	800029c <__adddf3>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	460b      	mov	r3, r1
 8005ca2:	4640      	mov	r0, r8
 8005ca4:	4649      	mov	r1, r9
 8005ca6:	f7fa ff3f 	bl	8000b28 <__aeabi_dcmpgt>
 8005caa:	2800      	cmp	r0, #0
 8005cac:	d173      	bne.n	8005d96 <_dtoa_r+0x6e6>
 8005cae:	ec53 2b19 	vmov	r2, r3, d9
 8005cb2:	4914      	ldr	r1, [pc, #80]	; (8005d04 <_dtoa_r+0x654>)
 8005cb4:	2000      	movs	r0, #0
 8005cb6:	f7fa faef 	bl	8000298 <__aeabi_dsub>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	4640      	mov	r0, r8
 8005cc0:	4649      	mov	r1, r9
 8005cc2:	f7fa ff13 	bl	8000aec <__aeabi_dcmplt>
 8005cc6:	2800      	cmp	r0, #0
 8005cc8:	f43f af2f 	beq.w	8005b2a <_dtoa_r+0x47a>
 8005ccc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005cce:	1e6b      	subs	r3, r5, #1
 8005cd0:	930f      	str	r3, [sp, #60]	; 0x3c
 8005cd2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005cd6:	2b30      	cmp	r3, #48	; 0x30
 8005cd8:	d0f8      	beq.n	8005ccc <_dtoa_r+0x61c>
 8005cda:	46bb      	mov	fp, r7
 8005cdc:	e04a      	b.n	8005d74 <_dtoa_r+0x6c4>
 8005cde:	4b06      	ldr	r3, [pc, #24]	; (8005cf8 <_dtoa_r+0x648>)
 8005ce0:	f7fa fc92 	bl	8000608 <__aeabi_dmul>
 8005ce4:	4680      	mov	r8, r0
 8005ce6:	4689      	mov	r9, r1
 8005ce8:	e7bd      	b.n	8005c66 <_dtoa_r+0x5b6>
 8005cea:	bf00      	nop
 8005cec:	08007920 	.word	0x08007920
 8005cf0:	080078f8 	.word	0x080078f8
 8005cf4:	3ff00000 	.word	0x3ff00000
 8005cf8:	40240000 	.word	0x40240000
 8005cfc:	401c0000 	.word	0x401c0000
 8005d00:	40140000 	.word	0x40140000
 8005d04:	3fe00000 	.word	0x3fe00000
 8005d08:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005d0c:	9d00      	ldr	r5, [sp, #0]
 8005d0e:	4642      	mov	r2, r8
 8005d10:	464b      	mov	r3, r9
 8005d12:	4630      	mov	r0, r6
 8005d14:	4639      	mov	r1, r7
 8005d16:	f7fa fda1 	bl	800085c <__aeabi_ddiv>
 8005d1a:	f7fa ff25 	bl	8000b68 <__aeabi_d2iz>
 8005d1e:	9001      	str	r0, [sp, #4]
 8005d20:	f7fa fc08 	bl	8000534 <__aeabi_i2d>
 8005d24:	4642      	mov	r2, r8
 8005d26:	464b      	mov	r3, r9
 8005d28:	f7fa fc6e 	bl	8000608 <__aeabi_dmul>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	460b      	mov	r3, r1
 8005d30:	4630      	mov	r0, r6
 8005d32:	4639      	mov	r1, r7
 8005d34:	f7fa fab0 	bl	8000298 <__aeabi_dsub>
 8005d38:	9e01      	ldr	r6, [sp, #4]
 8005d3a:	9f04      	ldr	r7, [sp, #16]
 8005d3c:	3630      	adds	r6, #48	; 0x30
 8005d3e:	f805 6b01 	strb.w	r6, [r5], #1
 8005d42:	9e00      	ldr	r6, [sp, #0]
 8005d44:	1bae      	subs	r6, r5, r6
 8005d46:	42b7      	cmp	r7, r6
 8005d48:	4602      	mov	r2, r0
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	d134      	bne.n	8005db8 <_dtoa_r+0x708>
 8005d4e:	f7fa faa5 	bl	800029c <__adddf3>
 8005d52:	4642      	mov	r2, r8
 8005d54:	464b      	mov	r3, r9
 8005d56:	4606      	mov	r6, r0
 8005d58:	460f      	mov	r7, r1
 8005d5a:	f7fa fee5 	bl	8000b28 <__aeabi_dcmpgt>
 8005d5e:	b9c8      	cbnz	r0, 8005d94 <_dtoa_r+0x6e4>
 8005d60:	4642      	mov	r2, r8
 8005d62:	464b      	mov	r3, r9
 8005d64:	4630      	mov	r0, r6
 8005d66:	4639      	mov	r1, r7
 8005d68:	f7fa feb6 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d6c:	b110      	cbz	r0, 8005d74 <_dtoa_r+0x6c4>
 8005d6e:	9b01      	ldr	r3, [sp, #4]
 8005d70:	07db      	lsls	r3, r3, #31
 8005d72:	d40f      	bmi.n	8005d94 <_dtoa_r+0x6e4>
 8005d74:	4651      	mov	r1, sl
 8005d76:	4620      	mov	r0, r4
 8005d78:	f000 fbcc 	bl	8006514 <_Bfree>
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005d80:	702b      	strb	r3, [r5, #0]
 8005d82:	f10b 0301 	add.w	r3, fp, #1
 8005d86:	6013      	str	r3, [r2, #0]
 8005d88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	f43f ace2 	beq.w	8005754 <_dtoa_r+0xa4>
 8005d90:	601d      	str	r5, [r3, #0]
 8005d92:	e4df      	b.n	8005754 <_dtoa_r+0xa4>
 8005d94:	465f      	mov	r7, fp
 8005d96:	462b      	mov	r3, r5
 8005d98:	461d      	mov	r5, r3
 8005d9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d9e:	2a39      	cmp	r2, #57	; 0x39
 8005da0:	d106      	bne.n	8005db0 <_dtoa_r+0x700>
 8005da2:	9a00      	ldr	r2, [sp, #0]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d1f7      	bne.n	8005d98 <_dtoa_r+0x6e8>
 8005da8:	9900      	ldr	r1, [sp, #0]
 8005daa:	2230      	movs	r2, #48	; 0x30
 8005dac:	3701      	adds	r7, #1
 8005dae:	700a      	strb	r2, [r1, #0]
 8005db0:	781a      	ldrb	r2, [r3, #0]
 8005db2:	3201      	adds	r2, #1
 8005db4:	701a      	strb	r2, [r3, #0]
 8005db6:	e790      	b.n	8005cda <_dtoa_r+0x62a>
 8005db8:	4ba3      	ldr	r3, [pc, #652]	; (8006048 <_dtoa_r+0x998>)
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f7fa fc24 	bl	8000608 <__aeabi_dmul>
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	4606      	mov	r6, r0
 8005dc6:	460f      	mov	r7, r1
 8005dc8:	f7fa fe86 	bl	8000ad8 <__aeabi_dcmpeq>
 8005dcc:	2800      	cmp	r0, #0
 8005dce:	d09e      	beq.n	8005d0e <_dtoa_r+0x65e>
 8005dd0:	e7d0      	b.n	8005d74 <_dtoa_r+0x6c4>
 8005dd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005dd4:	2a00      	cmp	r2, #0
 8005dd6:	f000 80ca 	beq.w	8005f6e <_dtoa_r+0x8be>
 8005dda:	9a07      	ldr	r2, [sp, #28]
 8005ddc:	2a01      	cmp	r2, #1
 8005dde:	f300 80ad 	bgt.w	8005f3c <_dtoa_r+0x88c>
 8005de2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005de4:	2a00      	cmp	r2, #0
 8005de6:	f000 80a5 	beq.w	8005f34 <_dtoa_r+0x884>
 8005dea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005dee:	9e08      	ldr	r6, [sp, #32]
 8005df0:	9d05      	ldr	r5, [sp, #20]
 8005df2:	9a05      	ldr	r2, [sp, #20]
 8005df4:	441a      	add	r2, r3
 8005df6:	9205      	str	r2, [sp, #20]
 8005df8:	9a06      	ldr	r2, [sp, #24]
 8005dfa:	2101      	movs	r1, #1
 8005dfc:	441a      	add	r2, r3
 8005dfe:	4620      	mov	r0, r4
 8005e00:	9206      	str	r2, [sp, #24]
 8005e02:	f000 fc3d 	bl	8006680 <__i2b>
 8005e06:	4607      	mov	r7, r0
 8005e08:	b165      	cbz	r5, 8005e24 <_dtoa_r+0x774>
 8005e0a:	9b06      	ldr	r3, [sp, #24]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	dd09      	ble.n	8005e24 <_dtoa_r+0x774>
 8005e10:	42ab      	cmp	r3, r5
 8005e12:	9a05      	ldr	r2, [sp, #20]
 8005e14:	bfa8      	it	ge
 8005e16:	462b      	movge	r3, r5
 8005e18:	1ad2      	subs	r2, r2, r3
 8005e1a:	9205      	str	r2, [sp, #20]
 8005e1c:	9a06      	ldr	r2, [sp, #24]
 8005e1e:	1aed      	subs	r5, r5, r3
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	9306      	str	r3, [sp, #24]
 8005e24:	9b08      	ldr	r3, [sp, #32]
 8005e26:	b1f3      	cbz	r3, 8005e66 <_dtoa_r+0x7b6>
 8005e28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	f000 80a3 	beq.w	8005f76 <_dtoa_r+0x8c6>
 8005e30:	2e00      	cmp	r6, #0
 8005e32:	dd10      	ble.n	8005e56 <_dtoa_r+0x7a6>
 8005e34:	4639      	mov	r1, r7
 8005e36:	4632      	mov	r2, r6
 8005e38:	4620      	mov	r0, r4
 8005e3a:	f000 fce1 	bl	8006800 <__pow5mult>
 8005e3e:	4652      	mov	r2, sl
 8005e40:	4601      	mov	r1, r0
 8005e42:	4607      	mov	r7, r0
 8005e44:	4620      	mov	r0, r4
 8005e46:	f000 fc31 	bl	80066ac <__multiply>
 8005e4a:	4651      	mov	r1, sl
 8005e4c:	4680      	mov	r8, r0
 8005e4e:	4620      	mov	r0, r4
 8005e50:	f000 fb60 	bl	8006514 <_Bfree>
 8005e54:	46c2      	mov	sl, r8
 8005e56:	9b08      	ldr	r3, [sp, #32]
 8005e58:	1b9a      	subs	r2, r3, r6
 8005e5a:	d004      	beq.n	8005e66 <_dtoa_r+0x7b6>
 8005e5c:	4651      	mov	r1, sl
 8005e5e:	4620      	mov	r0, r4
 8005e60:	f000 fcce 	bl	8006800 <__pow5mult>
 8005e64:	4682      	mov	sl, r0
 8005e66:	2101      	movs	r1, #1
 8005e68:	4620      	mov	r0, r4
 8005e6a:	f000 fc09 	bl	8006680 <__i2b>
 8005e6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	4606      	mov	r6, r0
 8005e74:	f340 8081 	ble.w	8005f7a <_dtoa_r+0x8ca>
 8005e78:	461a      	mov	r2, r3
 8005e7a:	4601      	mov	r1, r0
 8005e7c:	4620      	mov	r0, r4
 8005e7e:	f000 fcbf 	bl	8006800 <__pow5mult>
 8005e82:	9b07      	ldr	r3, [sp, #28]
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	4606      	mov	r6, r0
 8005e88:	dd7a      	ble.n	8005f80 <_dtoa_r+0x8d0>
 8005e8a:	f04f 0800 	mov.w	r8, #0
 8005e8e:	6933      	ldr	r3, [r6, #16]
 8005e90:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005e94:	6918      	ldr	r0, [r3, #16]
 8005e96:	f000 fba5 	bl	80065e4 <__hi0bits>
 8005e9a:	f1c0 0020 	rsb	r0, r0, #32
 8005e9e:	9b06      	ldr	r3, [sp, #24]
 8005ea0:	4418      	add	r0, r3
 8005ea2:	f010 001f 	ands.w	r0, r0, #31
 8005ea6:	f000 8094 	beq.w	8005fd2 <_dtoa_r+0x922>
 8005eaa:	f1c0 0320 	rsb	r3, r0, #32
 8005eae:	2b04      	cmp	r3, #4
 8005eb0:	f340 8085 	ble.w	8005fbe <_dtoa_r+0x90e>
 8005eb4:	9b05      	ldr	r3, [sp, #20]
 8005eb6:	f1c0 001c 	rsb	r0, r0, #28
 8005eba:	4403      	add	r3, r0
 8005ebc:	9305      	str	r3, [sp, #20]
 8005ebe:	9b06      	ldr	r3, [sp, #24]
 8005ec0:	4403      	add	r3, r0
 8005ec2:	4405      	add	r5, r0
 8005ec4:	9306      	str	r3, [sp, #24]
 8005ec6:	9b05      	ldr	r3, [sp, #20]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	dd05      	ble.n	8005ed8 <_dtoa_r+0x828>
 8005ecc:	4651      	mov	r1, sl
 8005ece:	461a      	mov	r2, r3
 8005ed0:	4620      	mov	r0, r4
 8005ed2:	f000 fcef 	bl	80068b4 <__lshift>
 8005ed6:	4682      	mov	sl, r0
 8005ed8:	9b06      	ldr	r3, [sp, #24]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	dd05      	ble.n	8005eea <_dtoa_r+0x83a>
 8005ede:	4631      	mov	r1, r6
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	4620      	mov	r0, r4
 8005ee4:	f000 fce6 	bl	80068b4 <__lshift>
 8005ee8:	4606      	mov	r6, r0
 8005eea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d072      	beq.n	8005fd6 <_dtoa_r+0x926>
 8005ef0:	4631      	mov	r1, r6
 8005ef2:	4650      	mov	r0, sl
 8005ef4:	f000 fd4a 	bl	800698c <__mcmp>
 8005ef8:	2800      	cmp	r0, #0
 8005efa:	da6c      	bge.n	8005fd6 <_dtoa_r+0x926>
 8005efc:	2300      	movs	r3, #0
 8005efe:	4651      	mov	r1, sl
 8005f00:	220a      	movs	r2, #10
 8005f02:	4620      	mov	r0, r4
 8005f04:	f000 fb28 	bl	8006558 <__multadd>
 8005f08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f0a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005f0e:	4682      	mov	sl, r0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	f000 81b0 	beq.w	8006276 <_dtoa_r+0xbc6>
 8005f16:	2300      	movs	r3, #0
 8005f18:	4639      	mov	r1, r7
 8005f1a:	220a      	movs	r2, #10
 8005f1c:	4620      	mov	r0, r4
 8005f1e:	f000 fb1b 	bl	8006558 <__multadd>
 8005f22:	9b01      	ldr	r3, [sp, #4]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	4607      	mov	r7, r0
 8005f28:	f300 8096 	bgt.w	8006058 <_dtoa_r+0x9a8>
 8005f2c:	9b07      	ldr	r3, [sp, #28]
 8005f2e:	2b02      	cmp	r3, #2
 8005f30:	dc59      	bgt.n	8005fe6 <_dtoa_r+0x936>
 8005f32:	e091      	b.n	8006058 <_dtoa_r+0x9a8>
 8005f34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005f36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005f3a:	e758      	b.n	8005dee <_dtoa_r+0x73e>
 8005f3c:	9b04      	ldr	r3, [sp, #16]
 8005f3e:	1e5e      	subs	r6, r3, #1
 8005f40:	9b08      	ldr	r3, [sp, #32]
 8005f42:	42b3      	cmp	r3, r6
 8005f44:	bfbf      	itttt	lt
 8005f46:	9b08      	ldrlt	r3, [sp, #32]
 8005f48:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8005f4a:	9608      	strlt	r6, [sp, #32]
 8005f4c:	1af3      	sublt	r3, r6, r3
 8005f4e:	bfb4      	ite	lt
 8005f50:	18d2      	addlt	r2, r2, r3
 8005f52:	1b9e      	subge	r6, r3, r6
 8005f54:	9b04      	ldr	r3, [sp, #16]
 8005f56:	bfbc      	itt	lt
 8005f58:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8005f5a:	2600      	movlt	r6, #0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	bfb7      	itett	lt
 8005f60:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8005f64:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8005f68:	1a9d      	sublt	r5, r3, r2
 8005f6a:	2300      	movlt	r3, #0
 8005f6c:	e741      	b.n	8005df2 <_dtoa_r+0x742>
 8005f6e:	9e08      	ldr	r6, [sp, #32]
 8005f70:	9d05      	ldr	r5, [sp, #20]
 8005f72:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005f74:	e748      	b.n	8005e08 <_dtoa_r+0x758>
 8005f76:	9a08      	ldr	r2, [sp, #32]
 8005f78:	e770      	b.n	8005e5c <_dtoa_r+0x7ac>
 8005f7a:	9b07      	ldr	r3, [sp, #28]
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	dc19      	bgt.n	8005fb4 <_dtoa_r+0x904>
 8005f80:	9b02      	ldr	r3, [sp, #8]
 8005f82:	b9bb      	cbnz	r3, 8005fb4 <_dtoa_r+0x904>
 8005f84:	9b03      	ldr	r3, [sp, #12]
 8005f86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f8a:	b99b      	cbnz	r3, 8005fb4 <_dtoa_r+0x904>
 8005f8c:	9b03      	ldr	r3, [sp, #12]
 8005f8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f92:	0d1b      	lsrs	r3, r3, #20
 8005f94:	051b      	lsls	r3, r3, #20
 8005f96:	b183      	cbz	r3, 8005fba <_dtoa_r+0x90a>
 8005f98:	9b05      	ldr	r3, [sp, #20]
 8005f9a:	3301      	adds	r3, #1
 8005f9c:	9305      	str	r3, [sp, #20]
 8005f9e:	9b06      	ldr	r3, [sp, #24]
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	9306      	str	r3, [sp, #24]
 8005fa4:	f04f 0801 	mov.w	r8, #1
 8005fa8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	f47f af6f 	bne.w	8005e8e <_dtoa_r+0x7de>
 8005fb0:	2001      	movs	r0, #1
 8005fb2:	e774      	b.n	8005e9e <_dtoa_r+0x7ee>
 8005fb4:	f04f 0800 	mov.w	r8, #0
 8005fb8:	e7f6      	b.n	8005fa8 <_dtoa_r+0x8f8>
 8005fba:	4698      	mov	r8, r3
 8005fbc:	e7f4      	b.n	8005fa8 <_dtoa_r+0x8f8>
 8005fbe:	d082      	beq.n	8005ec6 <_dtoa_r+0x816>
 8005fc0:	9a05      	ldr	r2, [sp, #20]
 8005fc2:	331c      	adds	r3, #28
 8005fc4:	441a      	add	r2, r3
 8005fc6:	9205      	str	r2, [sp, #20]
 8005fc8:	9a06      	ldr	r2, [sp, #24]
 8005fca:	441a      	add	r2, r3
 8005fcc:	441d      	add	r5, r3
 8005fce:	9206      	str	r2, [sp, #24]
 8005fd0:	e779      	b.n	8005ec6 <_dtoa_r+0x816>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	e7f4      	b.n	8005fc0 <_dtoa_r+0x910>
 8005fd6:	9b04      	ldr	r3, [sp, #16]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	dc37      	bgt.n	800604c <_dtoa_r+0x99c>
 8005fdc:	9b07      	ldr	r3, [sp, #28]
 8005fde:	2b02      	cmp	r3, #2
 8005fe0:	dd34      	ble.n	800604c <_dtoa_r+0x99c>
 8005fe2:	9b04      	ldr	r3, [sp, #16]
 8005fe4:	9301      	str	r3, [sp, #4]
 8005fe6:	9b01      	ldr	r3, [sp, #4]
 8005fe8:	b963      	cbnz	r3, 8006004 <_dtoa_r+0x954>
 8005fea:	4631      	mov	r1, r6
 8005fec:	2205      	movs	r2, #5
 8005fee:	4620      	mov	r0, r4
 8005ff0:	f000 fab2 	bl	8006558 <__multadd>
 8005ff4:	4601      	mov	r1, r0
 8005ff6:	4606      	mov	r6, r0
 8005ff8:	4650      	mov	r0, sl
 8005ffa:	f000 fcc7 	bl	800698c <__mcmp>
 8005ffe:	2800      	cmp	r0, #0
 8006000:	f73f adbb 	bgt.w	8005b7a <_dtoa_r+0x4ca>
 8006004:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006006:	9d00      	ldr	r5, [sp, #0]
 8006008:	ea6f 0b03 	mvn.w	fp, r3
 800600c:	f04f 0800 	mov.w	r8, #0
 8006010:	4631      	mov	r1, r6
 8006012:	4620      	mov	r0, r4
 8006014:	f000 fa7e 	bl	8006514 <_Bfree>
 8006018:	2f00      	cmp	r7, #0
 800601a:	f43f aeab 	beq.w	8005d74 <_dtoa_r+0x6c4>
 800601e:	f1b8 0f00 	cmp.w	r8, #0
 8006022:	d005      	beq.n	8006030 <_dtoa_r+0x980>
 8006024:	45b8      	cmp	r8, r7
 8006026:	d003      	beq.n	8006030 <_dtoa_r+0x980>
 8006028:	4641      	mov	r1, r8
 800602a:	4620      	mov	r0, r4
 800602c:	f000 fa72 	bl	8006514 <_Bfree>
 8006030:	4639      	mov	r1, r7
 8006032:	4620      	mov	r0, r4
 8006034:	f000 fa6e 	bl	8006514 <_Bfree>
 8006038:	e69c      	b.n	8005d74 <_dtoa_r+0x6c4>
 800603a:	2600      	movs	r6, #0
 800603c:	4637      	mov	r7, r6
 800603e:	e7e1      	b.n	8006004 <_dtoa_r+0x954>
 8006040:	46bb      	mov	fp, r7
 8006042:	4637      	mov	r7, r6
 8006044:	e599      	b.n	8005b7a <_dtoa_r+0x4ca>
 8006046:	bf00      	nop
 8006048:	40240000 	.word	0x40240000
 800604c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800604e:	2b00      	cmp	r3, #0
 8006050:	f000 80c8 	beq.w	80061e4 <_dtoa_r+0xb34>
 8006054:	9b04      	ldr	r3, [sp, #16]
 8006056:	9301      	str	r3, [sp, #4]
 8006058:	2d00      	cmp	r5, #0
 800605a:	dd05      	ble.n	8006068 <_dtoa_r+0x9b8>
 800605c:	4639      	mov	r1, r7
 800605e:	462a      	mov	r2, r5
 8006060:	4620      	mov	r0, r4
 8006062:	f000 fc27 	bl	80068b4 <__lshift>
 8006066:	4607      	mov	r7, r0
 8006068:	f1b8 0f00 	cmp.w	r8, #0
 800606c:	d05b      	beq.n	8006126 <_dtoa_r+0xa76>
 800606e:	6879      	ldr	r1, [r7, #4]
 8006070:	4620      	mov	r0, r4
 8006072:	f000 fa0f 	bl	8006494 <_Balloc>
 8006076:	4605      	mov	r5, r0
 8006078:	b928      	cbnz	r0, 8006086 <_dtoa_r+0x9d6>
 800607a:	4b83      	ldr	r3, [pc, #524]	; (8006288 <_dtoa_r+0xbd8>)
 800607c:	4602      	mov	r2, r0
 800607e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006082:	f7ff bb2e 	b.w	80056e2 <_dtoa_r+0x32>
 8006086:	693a      	ldr	r2, [r7, #16]
 8006088:	3202      	adds	r2, #2
 800608a:	0092      	lsls	r2, r2, #2
 800608c:	f107 010c 	add.w	r1, r7, #12
 8006090:	300c      	adds	r0, #12
 8006092:	f000 ffab 	bl	8006fec <memcpy>
 8006096:	2201      	movs	r2, #1
 8006098:	4629      	mov	r1, r5
 800609a:	4620      	mov	r0, r4
 800609c:	f000 fc0a 	bl	80068b4 <__lshift>
 80060a0:	9b00      	ldr	r3, [sp, #0]
 80060a2:	3301      	adds	r3, #1
 80060a4:	9304      	str	r3, [sp, #16]
 80060a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060aa:	4413      	add	r3, r2
 80060ac:	9308      	str	r3, [sp, #32]
 80060ae:	9b02      	ldr	r3, [sp, #8]
 80060b0:	f003 0301 	and.w	r3, r3, #1
 80060b4:	46b8      	mov	r8, r7
 80060b6:	9306      	str	r3, [sp, #24]
 80060b8:	4607      	mov	r7, r0
 80060ba:	9b04      	ldr	r3, [sp, #16]
 80060bc:	4631      	mov	r1, r6
 80060be:	3b01      	subs	r3, #1
 80060c0:	4650      	mov	r0, sl
 80060c2:	9301      	str	r3, [sp, #4]
 80060c4:	f7ff fa6c 	bl	80055a0 <quorem>
 80060c8:	4641      	mov	r1, r8
 80060ca:	9002      	str	r0, [sp, #8]
 80060cc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80060d0:	4650      	mov	r0, sl
 80060d2:	f000 fc5b 	bl	800698c <__mcmp>
 80060d6:	463a      	mov	r2, r7
 80060d8:	9005      	str	r0, [sp, #20]
 80060da:	4631      	mov	r1, r6
 80060dc:	4620      	mov	r0, r4
 80060de:	f000 fc71 	bl	80069c4 <__mdiff>
 80060e2:	68c2      	ldr	r2, [r0, #12]
 80060e4:	4605      	mov	r5, r0
 80060e6:	bb02      	cbnz	r2, 800612a <_dtoa_r+0xa7a>
 80060e8:	4601      	mov	r1, r0
 80060ea:	4650      	mov	r0, sl
 80060ec:	f000 fc4e 	bl	800698c <__mcmp>
 80060f0:	4602      	mov	r2, r0
 80060f2:	4629      	mov	r1, r5
 80060f4:	4620      	mov	r0, r4
 80060f6:	9209      	str	r2, [sp, #36]	; 0x24
 80060f8:	f000 fa0c 	bl	8006514 <_Bfree>
 80060fc:	9b07      	ldr	r3, [sp, #28]
 80060fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006100:	9d04      	ldr	r5, [sp, #16]
 8006102:	ea43 0102 	orr.w	r1, r3, r2
 8006106:	9b06      	ldr	r3, [sp, #24]
 8006108:	4319      	orrs	r1, r3
 800610a:	d110      	bne.n	800612e <_dtoa_r+0xa7e>
 800610c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006110:	d029      	beq.n	8006166 <_dtoa_r+0xab6>
 8006112:	9b05      	ldr	r3, [sp, #20]
 8006114:	2b00      	cmp	r3, #0
 8006116:	dd02      	ble.n	800611e <_dtoa_r+0xa6e>
 8006118:	9b02      	ldr	r3, [sp, #8]
 800611a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800611e:	9b01      	ldr	r3, [sp, #4]
 8006120:	f883 9000 	strb.w	r9, [r3]
 8006124:	e774      	b.n	8006010 <_dtoa_r+0x960>
 8006126:	4638      	mov	r0, r7
 8006128:	e7ba      	b.n	80060a0 <_dtoa_r+0x9f0>
 800612a:	2201      	movs	r2, #1
 800612c:	e7e1      	b.n	80060f2 <_dtoa_r+0xa42>
 800612e:	9b05      	ldr	r3, [sp, #20]
 8006130:	2b00      	cmp	r3, #0
 8006132:	db04      	blt.n	800613e <_dtoa_r+0xa8e>
 8006134:	9907      	ldr	r1, [sp, #28]
 8006136:	430b      	orrs	r3, r1
 8006138:	9906      	ldr	r1, [sp, #24]
 800613a:	430b      	orrs	r3, r1
 800613c:	d120      	bne.n	8006180 <_dtoa_r+0xad0>
 800613e:	2a00      	cmp	r2, #0
 8006140:	dded      	ble.n	800611e <_dtoa_r+0xa6e>
 8006142:	4651      	mov	r1, sl
 8006144:	2201      	movs	r2, #1
 8006146:	4620      	mov	r0, r4
 8006148:	f000 fbb4 	bl	80068b4 <__lshift>
 800614c:	4631      	mov	r1, r6
 800614e:	4682      	mov	sl, r0
 8006150:	f000 fc1c 	bl	800698c <__mcmp>
 8006154:	2800      	cmp	r0, #0
 8006156:	dc03      	bgt.n	8006160 <_dtoa_r+0xab0>
 8006158:	d1e1      	bne.n	800611e <_dtoa_r+0xa6e>
 800615a:	f019 0f01 	tst.w	r9, #1
 800615e:	d0de      	beq.n	800611e <_dtoa_r+0xa6e>
 8006160:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006164:	d1d8      	bne.n	8006118 <_dtoa_r+0xa68>
 8006166:	9a01      	ldr	r2, [sp, #4]
 8006168:	2339      	movs	r3, #57	; 0x39
 800616a:	7013      	strb	r3, [r2, #0]
 800616c:	462b      	mov	r3, r5
 800616e:	461d      	mov	r5, r3
 8006170:	3b01      	subs	r3, #1
 8006172:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006176:	2a39      	cmp	r2, #57	; 0x39
 8006178:	d06c      	beq.n	8006254 <_dtoa_r+0xba4>
 800617a:	3201      	adds	r2, #1
 800617c:	701a      	strb	r2, [r3, #0]
 800617e:	e747      	b.n	8006010 <_dtoa_r+0x960>
 8006180:	2a00      	cmp	r2, #0
 8006182:	dd07      	ble.n	8006194 <_dtoa_r+0xae4>
 8006184:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006188:	d0ed      	beq.n	8006166 <_dtoa_r+0xab6>
 800618a:	9a01      	ldr	r2, [sp, #4]
 800618c:	f109 0301 	add.w	r3, r9, #1
 8006190:	7013      	strb	r3, [r2, #0]
 8006192:	e73d      	b.n	8006010 <_dtoa_r+0x960>
 8006194:	9b04      	ldr	r3, [sp, #16]
 8006196:	9a08      	ldr	r2, [sp, #32]
 8006198:	f803 9c01 	strb.w	r9, [r3, #-1]
 800619c:	4293      	cmp	r3, r2
 800619e:	d043      	beq.n	8006228 <_dtoa_r+0xb78>
 80061a0:	4651      	mov	r1, sl
 80061a2:	2300      	movs	r3, #0
 80061a4:	220a      	movs	r2, #10
 80061a6:	4620      	mov	r0, r4
 80061a8:	f000 f9d6 	bl	8006558 <__multadd>
 80061ac:	45b8      	cmp	r8, r7
 80061ae:	4682      	mov	sl, r0
 80061b0:	f04f 0300 	mov.w	r3, #0
 80061b4:	f04f 020a 	mov.w	r2, #10
 80061b8:	4641      	mov	r1, r8
 80061ba:	4620      	mov	r0, r4
 80061bc:	d107      	bne.n	80061ce <_dtoa_r+0xb1e>
 80061be:	f000 f9cb 	bl	8006558 <__multadd>
 80061c2:	4680      	mov	r8, r0
 80061c4:	4607      	mov	r7, r0
 80061c6:	9b04      	ldr	r3, [sp, #16]
 80061c8:	3301      	adds	r3, #1
 80061ca:	9304      	str	r3, [sp, #16]
 80061cc:	e775      	b.n	80060ba <_dtoa_r+0xa0a>
 80061ce:	f000 f9c3 	bl	8006558 <__multadd>
 80061d2:	4639      	mov	r1, r7
 80061d4:	4680      	mov	r8, r0
 80061d6:	2300      	movs	r3, #0
 80061d8:	220a      	movs	r2, #10
 80061da:	4620      	mov	r0, r4
 80061dc:	f000 f9bc 	bl	8006558 <__multadd>
 80061e0:	4607      	mov	r7, r0
 80061e2:	e7f0      	b.n	80061c6 <_dtoa_r+0xb16>
 80061e4:	9b04      	ldr	r3, [sp, #16]
 80061e6:	9301      	str	r3, [sp, #4]
 80061e8:	9d00      	ldr	r5, [sp, #0]
 80061ea:	4631      	mov	r1, r6
 80061ec:	4650      	mov	r0, sl
 80061ee:	f7ff f9d7 	bl	80055a0 <quorem>
 80061f2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80061f6:	9b00      	ldr	r3, [sp, #0]
 80061f8:	f805 9b01 	strb.w	r9, [r5], #1
 80061fc:	1aea      	subs	r2, r5, r3
 80061fe:	9b01      	ldr	r3, [sp, #4]
 8006200:	4293      	cmp	r3, r2
 8006202:	dd07      	ble.n	8006214 <_dtoa_r+0xb64>
 8006204:	4651      	mov	r1, sl
 8006206:	2300      	movs	r3, #0
 8006208:	220a      	movs	r2, #10
 800620a:	4620      	mov	r0, r4
 800620c:	f000 f9a4 	bl	8006558 <__multadd>
 8006210:	4682      	mov	sl, r0
 8006212:	e7ea      	b.n	80061ea <_dtoa_r+0xb3a>
 8006214:	9b01      	ldr	r3, [sp, #4]
 8006216:	2b00      	cmp	r3, #0
 8006218:	bfc8      	it	gt
 800621a:	461d      	movgt	r5, r3
 800621c:	9b00      	ldr	r3, [sp, #0]
 800621e:	bfd8      	it	le
 8006220:	2501      	movle	r5, #1
 8006222:	441d      	add	r5, r3
 8006224:	f04f 0800 	mov.w	r8, #0
 8006228:	4651      	mov	r1, sl
 800622a:	2201      	movs	r2, #1
 800622c:	4620      	mov	r0, r4
 800622e:	f000 fb41 	bl	80068b4 <__lshift>
 8006232:	4631      	mov	r1, r6
 8006234:	4682      	mov	sl, r0
 8006236:	f000 fba9 	bl	800698c <__mcmp>
 800623a:	2800      	cmp	r0, #0
 800623c:	dc96      	bgt.n	800616c <_dtoa_r+0xabc>
 800623e:	d102      	bne.n	8006246 <_dtoa_r+0xb96>
 8006240:	f019 0f01 	tst.w	r9, #1
 8006244:	d192      	bne.n	800616c <_dtoa_r+0xabc>
 8006246:	462b      	mov	r3, r5
 8006248:	461d      	mov	r5, r3
 800624a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800624e:	2a30      	cmp	r2, #48	; 0x30
 8006250:	d0fa      	beq.n	8006248 <_dtoa_r+0xb98>
 8006252:	e6dd      	b.n	8006010 <_dtoa_r+0x960>
 8006254:	9a00      	ldr	r2, [sp, #0]
 8006256:	429a      	cmp	r2, r3
 8006258:	d189      	bne.n	800616e <_dtoa_r+0xabe>
 800625a:	f10b 0b01 	add.w	fp, fp, #1
 800625e:	2331      	movs	r3, #49	; 0x31
 8006260:	e796      	b.n	8006190 <_dtoa_r+0xae0>
 8006262:	4b0a      	ldr	r3, [pc, #40]	; (800628c <_dtoa_r+0xbdc>)
 8006264:	f7ff ba99 	b.w	800579a <_dtoa_r+0xea>
 8006268:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800626a:	2b00      	cmp	r3, #0
 800626c:	f47f aa6d 	bne.w	800574a <_dtoa_r+0x9a>
 8006270:	4b07      	ldr	r3, [pc, #28]	; (8006290 <_dtoa_r+0xbe0>)
 8006272:	f7ff ba92 	b.w	800579a <_dtoa_r+0xea>
 8006276:	9b01      	ldr	r3, [sp, #4]
 8006278:	2b00      	cmp	r3, #0
 800627a:	dcb5      	bgt.n	80061e8 <_dtoa_r+0xb38>
 800627c:	9b07      	ldr	r3, [sp, #28]
 800627e:	2b02      	cmp	r3, #2
 8006280:	f73f aeb1 	bgt.w	8005fe6 <_dtoa_r+0x936>
 8006284:	e7b0      	b.n	80061e8 <_dtoa_r+0xb38>
 8006286:	bf00      	nop
 8006288:	08007888 	.word	0x08007888
 800628c:	080077e8 	.word	0x080077e8
 8006290:	0800780c 	.word	0x0800780c

08006294 <_free_r>:
 8006294:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006296:	2900      	cmp	r1, #0
 8006298:	d044      	beq.n	8006324 <_free_r+0x90>
 800629a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800629e:	9001      	str	r0, [sp, #4]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	f1a1 0404 	sub.w	r4, r1, #4
 80062a6:	bfb8      	it	lt
 80062a8:	18e4      	addlt	r4, r4, r3
 80062aa:	f000 f8e7 	bl	800647c <__malloc_lock>
 80062ae:	4a1e      	ldr	r2, [pc, #120]	; (8006328 <_free_r+0x94>)
 80062b0:	9801      	ldr	r0, [sp, #4]
 80062b2:	6813      	ldr	r3, [r2, #0]
 80062b4:	b933      	cbnz	r3, 80062c4 <_free_r+0x30>
 80062b6:	6063      	str	r3, [r4, #4]
 80062b8:	6014      	str	r4, [r2, #0]
 80062ba:	b003      	add	sp, #12
 80062bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80062c0:	f000 b8e2 	b.w	8006488 <__malloc_unlock>
 80062c4:	42a3      	cmp	r3, r4
 80062c6:	d908      	bls.n	80062da <_free_r+0x46>
 80062c8:	6825      	ldr	r5, [r4, #0]
 80062ca:	1961      	adds	r1, r4, r5
 80062cc:	428b      	cmp	r3, r1
 80062ce:	bf01      	itttt	eq
 80062d0:	6819      	ldreq	r1, [r3, #0]
 80062d2:	685b      	ldreq	r3, [r3, #4]
 80062d4:	1949      	addeq	r1, r1, r5
 80062d6:	6021      	streq	r1, [r4, #0]
 80062d8:	e7ed      	b.n	80062b6 <_free_r+0x22>
 80062da:	461a      	mov	r2, r3
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	b10b      	cbz	r3, 80062e4 <_free_r+0x50>
 80062e0:	42a3      	cmp	r3, r4
 80062e2:	d9fa      	bls.n	80062da <_free_r+0x46>
 80062e4:	6811      	ldr	r1, [r2, #0]
 80062e6:	1855      	adds	r5, r2, r1
 80062e8:	42a5      	cmp	r5, r4
 80062ea:	d10b      	bne.n	8006304 <_free_r+0x70>
 80062ec:	6824      	ldr	r4, [r4, #0]
 80062ee:	4421      	add	r1, r4
 80062f0:	1854      	adds	r4, r2, r1
 80062f2:	42a3      	cmp	r3, r4
 80062f4:	6011      	str	r1, [r2, #0]
 80062f6:	d1e0      	bne.n	80062ba <_free_r+0x26>
 80062f8:	681c      	ldr	r4, [r3, #0]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	6053      	str	r3, [r2, #4]
 80062fe:	440c      	add	r4, r1
 8006300:	6014      	str	r4, [r2, #0]
 8006302:	e7da      	b.n	80062ba <_free_r+0x26>
 8006304:	d902      	bls.n	800630c <_free_r+0x78>
 8006306:	230c      	movs	r3, #12
 8006308:	6003      	str	r3, [r0, #0]
 800630a:	e7d6      	b.n	80062ba <_free_r+0x26>
 800630c:	6825      	ldr	r5, [r4, #0]
 800630e:	1961      	adds	r1, r4, r5
 8006310:	428b      	cmp	r3, r1
 8006312:	bf04      	itt	eq
 8006314:	6819      	ldreq	r1, [r3, #0]
 8006316:	685b      	ldreq	r3, [r3, #4]
 8006318:	6063      	str	r3, [r4, #4]
 800631a:	bf04      	itt	eq
 800631c:	1949      	addeq	r1, r1, r5
 800631e:	6021      	streq	r1, [r4, #0]
 8006320:	6054      	str	r4, [r2, #4]
 8006322:	e7ca      	b.n	80062ba <_free_r+0x26>
 8006324:	b003      	add	sp, #12
 8006326:	bd30      	pop	{r4, r5, pc}
 8006328:	20000640 	.word	0x20000640

0800632c <malloc>:
 800632c:	4b02      	ldr	r3, [pc, #8]	; (8006338 <malloc+0xc>)
 800632e:	4601      	mov	r1, r0
 8006330:	6818      	ldr	r0, [r3, #0]
 8006332:	f000 b823 	b.w	800637c <_malloc_r>
 8006336:	bf00      	nop
 8006338:	20000064 	.word	0x20000064

0800633c <sbrk_aligned>:
 800633c:	b570      	push	{r4, r5, r6, lr}
 800633e:	4e0e      	ldr	r6, [pc, #56]	; (8006378 <sbrk_aligned+0x3c>)
 8006340:	460c      	mov	r4, r1
 8006342:	6831      	ldr	r1, [r6, #0]
 8006344:	4605      	mov	r5, r0
 8006346:	b911      	cbnz	r1, 800634e <sbrk_aligned+0x12>
 8006348:	f000 fe40 	bl	8006fcc <_sbrk_r>
 800634c:	6030      	str	r0, [r6, #0]
 800634e:	4621      	mov	r1, r4
 8006350:	4628      	mov	r0, r5
 8006352:	f000 fe3b 	bl	8006fcc <_sbrk_r>
 8006356:	1c43      	adds	r3, r0, #1
 8006358:	d00a      	beq.n	8006370 <sbrk_aligned+0x34>
 800635a:	1cc4      	adds	r4, r0, #3
 800635c:	f024 0403 	bic.w	r4, r4, #3
 8006360:	42a0      	cmp	r0, r4
 8006362:	d007      	beq.n	8006374 <sbrk_aligned+0x38>
 8006364:	1a21      	subs	r1, r4, r0
 8006366:	4628      	mov	r0, r5
 8006368:	f000 fe30 	bl	8006fcc <_sbrk_r>
 800636c:	3001      	adds	r0, #1
 800636e:	d101      	bne.n	8006374 <sbrk_aligned+0x38>
 8006370:	f04f 34ff 	mov.w	r4, #4294967295
 8006374:	4620      	mov	r0, r4
 8006376:	bd70      	pop	{r4, r5, r6, pc}
 8006378:	20000644 	.word	0x20000644

0800637c <_malloc_r>:
 800637c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006380:	1ccd      	adds	r5, r1, #3
 8006382:	f025 0503 	bic.w	r5, r5, #3
 8006386:	3508      	adds	r5, #8
 8006388:	2d0c      	cmp	r5, #12
 800638a:	bf38      	it	cc
 800638c:	250c      	movcc	r5, #12
 800638e:	2d00      	cmp	r5, #0
 8006390:	4607      	mov	r7, r0
 8006392:	db01      	blt.n	8006398 <_malloc_r+0x1c>
 8006394:	42a9      	cmp	r1, r5
 8006396:	d905      	bls.n	80063a4 <_malloc_r+0x28>
 8006398:	230c      	movs	r3, #12
 800639a:	603b      	str	r3, [r7, #0]
 800639c:	2600      	movs	r6, #0
 800639e:	4630      	mov	r0, r6
 80063a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063a4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006478 <_malloc_r+0xfc>
 80063a8:	f000 f868 	bl	800647c <__malloc_lock>
 80063ac:	f8d8 3000 	ldr.w	r3, [r8]
 80063b0:	461c      	mov	r4, r3
 80063b2:	bb5c      	cbnz	r4, 800640c <_malloc_r+0x90>
 80063b4:	4629      	mov	r1, r5
 80063b6:	4638      	mov	r0, r7
 80063b8:	f7ff ffc0 	bl	800633c <sbrk_aligned>
 80063bc:	1c43      	adds	r3, r0, #1
 80063be:	4604      	mov	r4, r0
 80063c0:	d155      	bne.n	800646e <_malloc_r+0xf2>
 80063c2:	f8d8 4000 	ldr.w	r4, [r8]
 80063c6:	4626      	mov	r6, r4
 80063c8:	2e00      	cmp	r6, #0
 80063ca:	d145      	bne.n	8006458 <_malloc_r+0xdc>
 80063cc:	2c00      	cmp	r4, #0
 80063ce:	d048      	beq.n	8006462 <_malloc_r+0xe6>
 80063d0:	6823      	ldr	r3, [r4, #0]
 80063d2:	4631      	mov	r1, r6
 80063d4:	4638      	mov	r0, r7
 80063d6:	eb04 0903 	add.w	r9, r4, r3
 80063da:	f000 fdf7 	bl	8006fcc <_sbrk_r>
 80063de:	4581      	cmp	r9, r0
 80063e0:	d13f      	bne.n	8006462 <_malloc_r+0xe6>
 80063e2:	6821      	ldr	r1, [r4, #0]
 80063e4:	1a6d      	subs	r5, r5, r1
 80063e6:	4629      	mov	r1, r5
 80063e8:	4638      	mov	r0, r7
 80063ea:	f7ff ffa7 	bl	800633c <sbrk_aligned>
 80063ee:	3001      	adds	r0, #1
 80063f0:	d037      	beq.n	8006462 <_malloc_r+0xe6>
 80063f2:	6823      	ldr	r3, [r4, #0]
 80063f4:	442b      	add	r3, r5
 80063f6:	6023      	str	r3, [r4, #0]
 80063f8:	f8d8 3000 	ldr.w	r3, [r8]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d038      	beq.n	8006472 <_malloc_r+0xf6>
 8006400:	685a      	ldr	r2, [r3, #4]
 8006402:	42a2      	cmp	r2, r4
 8006404:	d12b      	bne.n	800645e <_malloc_r+0xe2>
 8006406:	2200      	movs	r2, #0
 8006408:	605a      	str	r2, [r3, #4]
 800640a:	e00f      	b.n	800642c <_malloc_r+0xb0>
 800640c:	6822      	ldr	r2, [r4, #0]
 800640e:	1b52      	subs	r2, r2, r5
 8006410:	d41f      	bmi.n	8006452 <_malloc_r+0xd6>
 8006412:	2a0b      	cmp	r2, #11
 8006414:	d917      	bls.n	8006446 <_malloc_r+0xca>
 8006416:	1961      	adds	r1, r4, r5
 8006418:	42a3      	cmp	r3, r4
 800641a:	6025      	str	r5, [r4, #0]
 800641c:	bf18      	it	ne
 800641e:	6059      	strne	r1, [r3, #4]
 8006420:	6863      	ldr	r3, [r4, #4]
 8006422:	bf08      	it	eq
 8006424:	f8c8 1000 	streq.w	r1, [r8]
 8006428:	5162      	str	r2, [r4, r5]
 800642a:	604b      	str	r3, [r1, #4]
 800642c:	4638      	mov	r0, r7
 800642e:	f104 060b 	add.w	r6, r4, #11
 8006432:	f000 f829 	bl	8006488 <__malloc_unlock>
 8006436:	f026 0607 	bic.w	r6, r6, #7
 800643a:	1d23      	adds	r3, r4, #4
 800643c:	1af2      	subs	r2, r6, r3
 800643e:	d0ae      	beq.n	800639e <_malloc_r+0x22>
 8006440:	1b9b      	subs	r3, r3, r6
 8006442:	50a3      	str	r3, [r4, r2]
 8006444:	e7ab      	b.n	800639e <_malloc_r+0x22>
 8006446:	42a3      	cmp	r3, r4
 8006448:	6862      	ldr	r2, [r4, #4]
 800644a:	d1dd      	bne.n	8006408 <_malloc_r+0x8c>
 800644c:	f8c8 2000 	str.w	r2, [r8]
 8006450:	e7ec      	b.n	800642c <_malloc_r+0xb0>
 8006452:	4623      	mov	r3, r4
 8006454:	6864      	ldr	r4, [r4, #4]
 8006456:	e7ac      	b.n	80063b2 <_malloc_r+0x36>
 8006458:	4634      	mov	r4, r6
 800645a:	6876      	ldr	r6, [r6, #4]
 800645c:	e7b4      	b.n	80063c8 <_malloc_r+0x4c>
 800645e:	4613      	mov	r3, r2
 8006460:	e7cc      	b.n	80063fc <_malloc_r+0x80>
 8006462:	230c      	movs	r3, #12
 8006464:	603b      	str	r3, [r7, #0]
 8006466:	4638      	mov	r0, r7
 8006468:	f000 f80e 	bl	8006488 <__malloc_unlock>
 800646c:	e797      	b.n	800639e <_malloc_r+0x22>
 800646e:	6025      	str	r5, [r4, #0]
 8006470:	e7dc      	b.n	800642c <_malloc_r+0xb0>
 8006472:	605b      	str	r3, [r3, #4]
 8006474:	deff      	udf	#255	; 0xff
 8006476:	bf00      	nop
 8006478:	20000640 	.word	0x20000640

0800647c <__malloc_lock>:
 800647c:	4801      	ldr	r0, [pc, #4]	; (8006484 <__malloc_lock+0x8>)
 800647e:	f7ff b88d 	b.w	800559c <__retarget_lock_acquire_recursive>
 8006482:	bf00      	nop
 8006484:	2000063c 	.word	0x2000063c

08006488 <__malloc_unlock>:
 8006488:	4801      	ldr	r0, [pc, #4]	; (8006490 <__malloc_unlock+0x8>)
 800648a:	f7ff b888 	b.w	800559e <__retarget_lock_release_recursive>
 800648e:	bf00      	nop
 8006490:	2000063c 	.word	0x2000063c

08006494 <_Balloc>:
 8006494:	b570      	push	{r4, r5, r6, lr}
 8006496:	69c6      	ldr	r6, [r0, #28]
 8006498:	4604      	mov	r4, r0
 800649a:	460d      	mov	r5, r1
 800649c:	b976      	cbnz	r6, 80064bc <_Balloc+0x28>
 800649e:	2010      	movs	r0, #16
 80064a0:	f7ff ff44 	bl	800632c <malloc>
 80064a4:	4602      	mov	r2, r0
 80064a6:	61e0      	str	r0, [r4, #28]
 80064a8:	b920      	cbnz	r0, 80064b4 <_Balloc+0x20>
 80064aa:	4b18      	ldr	r3, [pc, #96]	; (800650c <_Balloc+0x78>)
 80064ac:	4818      	ldr	r0, [pc, #96]	; (8006510 <_Balloc+0x7c>)
 80064ae:	216b      	movs	r1, #107	; 0x6b
 80064b0:	f000 fdaa 	bl	8007008 <__assert_func>
 80064b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80064b8:	6006      	str	r6, [r0, #0]
 80064ba:	60c6      	str	r6, [r0, #12]
 80064bc:	69e6      	ldr	r6, [r4, #28]
 80064be:	68f3      	ldr	r3, [r6, #12]
 80064c0:	b183      	cbz	r3, 80064e4 <_Balloc+0x50>
 80064c2:	69e3      	ldr	r3, [r4, #28]
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80064ca:	b9b8      	cbnz	r0, 80064fc <_Balloc+0x68>
 80064cc:	2101      	movs	r1, #1
 80064ce:	fa01 f605 	lsl.w	r6, r1, r5
 80064d2:	1d72      	adds	r2, r6, #5
 80064d4:	0092      	lsls	r2, r2, #2
 80064d6:	4620      	mov	r0, r4
 80064d8:	f000 fdb4 	bl	8007044 <_calloc_r>
 80064dc:	b160      	cbz	r0, 80064f8 <_Balloc+0x64>
 80064de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80064e2:	e00e      	b.n	8006502 <_Balloc+0x6e>
 80064e4:	2221      	movs	r2, #33	; 0x21
 80064e6:	2104      	movs	r1, #4
 80064e8:	4620      	mov	r0, r4
 80064ea:	f000 fdab 	bl	8007044 <_calloc_r>
 80064ee:	69e3      	ldr	r3, [r4, #28]
 80064f0:	60f0      	str	r0, [r6, #12]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d1e4      	bne.n	80064c2 <_Balloc+0x2e>
 80064f8:	2000      	movs	r0, #0
 80064fa:	bd70      	pop	{r4, r5, r6, pc}
 80064fc:	6802      	ldr	r2, [r0, #0]
 80064fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006502:	2300      	movs	r3, #0
 8006504:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006508:	e7f7      	b.n	80064fa <_Balloc+0x66>
 800650a:	bf00      	nop
 800650c:	08007819 	.word	0x08007819
 8006510:	08007899 	.word	0x08007899

08006514 <_Bfree>:
 8006514:	b570      	push	{r4, r5, r6, lr}
 8006516:	69c6      	ldr	r6, [r0, #28]
 8006518:	4605      	mov	r5, r0
 800651a:	460c      	mov	r4, r1
 800651c:	b976      	cbnz	r6, 800653c <_Bfree+0x28>
 800651e:	2010      	movs	r0, #16
 8006520:	f7ff ff04 	bl	800632c <malloc>
 8006524:	4602      	mov	r2, r0
 8006526:	61e8      	str	r0, [r5, #28]
 8006528:	b920      	cbnz	r0, 8006534 <_Bfree+0x20>
 800652a:	4b09      	ldr	r3, [pc, #36]	; (8006550 <_Bfree+0x3c>)
 800652c:	4809      	ldr	r0, [pc, #36]	; (8006554 <_Bfree+0x40>)
 800652e:	218f      	movs	r1, #143	; 0x8f
 8006530:	f000 fd6a 	bl	8007008 <__assert_func>
 8006534:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006538:	6006      	str	r6, [r0, #0]
 800653a:	60c6      	str	r6, [r0, #12]
 800653c:	b13c      	cbz	r4, 800654e <_Bfree+0x3a>
 800653e:	69eb      	ldr	r3, [r5, #28]
 8006540:	6862      	ldr	r2, [r4, #4]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006548:	6021      	str	r1, [r4, #0]
 800654a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800654e:	bd70      	pop	{r4, r5, r6, pc}
 8006550:	08007819 	.word	0x08007819
 8006554:	08007899 	.word	0x08007899

08006558 <__multadd>:
 8006558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800655c:	690d      	ldr	r5, [r1, #16]
 800655e:	4607      	mov	r7, r0
 8006560:	460c      	mov	r4, r1
 8006562:	461e      	mov	r6, r3
 8006564:	f101 0c14 	add.w	ip, r1, #20
 8006568:	2000      	movs	r0, #0
 800656a:	f8dc 3000 	ldr.w	r3, [ip]
 800656e:	b299      	uxth	r1, r3
 8006570:	fb02 6101 	mla	r1, r2, r1, r6
 8006574:	0c1e      	lsrs	r6, r3, #16
 8006576:	0c0b      	lsrs	r3, r1, #16
 8006578:	fb02 3306 	mla	r3, r2, r6, r3
 800657c:	b289      	uxth	r1, r1
 800657e:	3001      	adds	r0, #1
 8006580:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006584:	4285      	cmp	r5, r0
 8006586:	f84c 1b04 	str.w	r1, [ip], #4
 800658a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800658e:	dcec      	bgt.n	800656a <__multadd+0x12>
 8006590:	b30e      	cbz	r6, 80065d6 <__multadd+0x7e>
 8006592:	68a3      	ldr	r3, [r4, #8]
 8006594:	42ab      	cmp	r3, r5
 8006596:	dc19      	bgt.n	80065cc <__multadd+0x74>
 8006598:	6861      	ldr	r1, [r4, #4]
 800659a:	4638      	mov	r0, r7
 800659c:	3101      	adds	r1, #1
 800659e:	f7ff ff79 	bl	8006494 <_Balloc>
 80065a2:	4680      	mov	r8, r0
 80065a4:	b928      	cbnz	r0, 80065b2 <__multadd+0x5a>
 80065a6:	4602      	mov	r2, r0
 80065a8:	4b0c      	ldr	r3, [pc, #48]	; (80065dc <__multadd+0x84>)
 80065aa:	480d      	ldr	r0, [pc, #52]	; (80065e0 <__multadd+0x88>)
 80065ac:	21ba      	movs	r1, #186	; 0xba
 80065ae:	f000 fd2b 	bl	8007008 <__assert_func>
 80065b2:	6922      	ldr	r2, [r4, #16]
 80065b4:	3202      	adds	r2, #2
 80065b6:	f104 010c 	add.w	r1, r4, #12
 80065ba:	0092      	lsls	r2, r2, #2
 80065bc:	300c      	adds	r0, #12
 80065be:	f000 fd15 	bl	8006fec <memcpy>
 80065c2:	4621      	mov	r1, r4
 80065c4:	4638      	mov	r0, r7
 80065c6:	f7ff ffa5 	bl	8006514 <_Bfree>
 80065ca:	4644      	mov	r4, r8
 80065cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80065d0:	3501      	adds	r5, #1
 80065d2:	615e      	str	r6, [r3, #20]
 80065d4:	6125      	str	r5, [r4, #16]
 80065d6:	4620      	mov	r0, r4
 80065d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065dc:	08007888 	.word	0x08007888
 80065e0:	08007899 	.word	0x08007899

080065e4 <__hi0bits>:
 80065e4:	0c03      	lsrs	r3, r0, #16
 80065e6:	041b      	lsls	r3, r3, #16
 80065e8:	b9d3      	cbnz	r3, 8006620 <__hi0bits+0x3c>
 80065ea:	0400      	lsls	r0, r0, #16
 80065ec:	2310      	movs	r3, #16
 80065ee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80065f2:	bf04      	itt	eq
 80065f4:	0200      	lsleq	r0, r0, #8
 80065f6:	3308      	addeq	r3, #8
 80065f8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80065fc:	bf04      	itt	eq
 80065fe:	0100      	lsleq	r0, r0, #4
 8006600:	3304      	addeq	r3, #4
 8006602:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006606:	bf04      	itt	eq
 8006608:	0080      	lsleq	r0, r0, #2
 800660a:	3302      	addeq	r3, #2
 800660c:	2800      	cmp	r0, #0
 800660e:	db05      	blt.n	800661c <__hi0bits+0x38>
 8006610:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006614:	f103 0301 	add.w	r3, r3, #1
 8006618:	bf08      	it	eq
 800661a:	2320      	moveq	r3, #32
 800661c:	4618      	mov	r0, r3
 800661e:	4770      	bx	lr
 8006620:	2300      	movs	r3, #0
 8006622:	e7e4      	b.n	80065ee <__hi0bits+0xa>

08006624 <__lo0bits>:
 8006624:	6803      	ldr	r3, [r0, #0]
 8006626:	f013 0207 	ands.w	r2, r3, #7
 800662a:	d00c      	beq.n	8006646 <__lo0bits+0x22>
 800662c:	07d9      	lsls	r1, r3, #31
 800662e:	d422      	bmi.n	8006676 <__lo0bits+0x52>
 8006630:	079a      	lsls	r2, r3, #30
 8006632:	bf49      	itett	mi
 8006634:	085b      	lsrmi	r3, r3, #1
 8006636:	089b      	lsrpl	r3, r3, #2
 8006638:	6003      	strmi	r3, [r0, #0]
 800663a:	2201      	movmi	r2, #1
 800663c:	bf5c      	itt	pl
 800663e:	6003      	strpl	r3, [r0, #0]
 8006640:	2202      	movpl	r2, #2
 8006642:	4610      	mov	r0, r2
 8006644:	4770      	bx	lr
 8006646:	b299      	uxth	r1, r3
 8006648:	b909      	cbnz	r1, 800664e <__lo0bits+0x2a>
 800664a:	0c1b      	lsrs	r3, r3, #16
 800664c:	2210      	movs	r2, #16
 800664e:	b2d9      	uxtb	r1, r3
 8006650:	b909      	cbnz	r1, 8006656 <__lo0bits+0x32>
 8006652:	3208      	adds	r2, #8
 8006654:	0a1b      	lsrs	r3, r3, #8
 8006656:	0719      	lsls	r1, r3, #28
 8006658:	bf04      	itt	eq
 800665a:	091b      	lsreq	r3, r3, #4
 800665c:	3204      	addeq	r2, #4
 800665e:	0799      	lsls	r1, r3, #30
 8006660:	bf04      	itt	eq
 8006662:	089b      	lsreq	r3, r3, #2
 8006664:	3202      	addeq	r2, #2
 8006666:	07d9      	lsls	r1, r3, #31
 8006668:	d403      	bmi.n	8006672 <__lo0bits+0x4e>
 800666a:	085b      	lsrs	r3, r3, #1
 800666c:	f102 0201 	add.w	r2, r2, #1
 8006670:	d003      	beq.n	800667a <__lo0bits+0x56>
 8006672:	6003      	str	r3, [r0, #0]
 8006674:	e7e5      	b.n	8006642 <__lo0bits+0x1e>
 8006676:	2200      	movs	r2, #0
 8006678:	e7e3      	b.n	8006642 <__lo0bits+0x1e>
 800667a:	2220      	movs	r2, #32
 800667c:	e7e1      	b.n	8006642 <__lo0bits+0x1e>
	...

08006680 <__i2b>:
 8006680:	b510      	push	{r4, lr}
 8006682:	460c      	mov	r4, r1
 8006684:	2101      	movs	r1, #1
 8006686:	f7ff ff05 	bl	8006494 <_Balloc>
 800668a:	4602      	mov	r2, r0
 800668c:	b928      	cbnz	r0, 800669a <__i2b+0x1a>
 800668e:	4b05      	ldr	r3, [pc, #20]	; (80066a4 <__i2b+0x24>)
 8006690:	4805      	ldr	r0, [pc, #20]	; (80066a8 <__i2b+0x28>)
 8006692:	f240 1145 	movw	r1, #325	; 0x145
 8006696:	f000 fcb7 	bl	8007008 <__assert_func>
 800669a:	2301      	movs	r3, #1
 800669c:	6144      	str	r4, [r0, #20]
 800669e:	6103      	str	r3, [r0, #16]
 80066a0:	bd10      	pop	{r4, pc}
 80066a2:	bf00      	nop
 80066a4:	08007888 	.word	0x08007888
 80066a8:	08007899 	.word	0x08007899

080066ac <__multiply>:
 80066ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066b0:	4691      	mov	r9, r2
 80066b2:	690a      	ldr	r2, [r1, #16]
 80066b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80066b8:	429a      	cmp	r2, r3
 80066ba:	bfb8      	it	lt
 80066bc:	460b      	movlt	r3, r1
 80066be:	460c      	mov	r4, r1
 80066c0:	bfbc      	itt	lt
 80066c2:	464c      	movlt	r4, r9
 80066c4:	4699      	movlt	r9, r3
 80066c6:	6927      	ldr	r7, [r4, #16]
 80066c8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80066cc:	68a3      	ldr	r3, [r4, #8]
 80066ce:	6861      	ldr	r1, [r4, #4]
 80066d0:	eb07 060a 	add.w	r6, r7, sl
 80066d4:	42b3      	cmp	r3, r6
 80066d6:	b085      	sub	sp, #20
 80066d8:	bfb8      	it	lt
 80066da:	3101      	addlt	r1, #1
 80066dc:	f7ff feda 	bl	8006494 <_Balloc>
 80066e0:	b930      	cbnz	r0, 80066f0 <__multiply+0x44>
 80066e2:	4602      	mov	r2, r0
 80066e4:	4b44      	ldr	r3, [pc, #272]	; (80067f8 <__multiply+0x14c>)
 80066e6:	4845      	ldr	r0, [pc, #276]	; (80067fc <__multiply+0x150>)
 80066e8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80066ec:	f000 fc8c 	bl	8007008 <__assert_func>
 80066f0:	f100 0514 	add.w	r5, r0, #20
 80066f4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80066f8:	462b      	mov	r3, r5
 80066fa:	2200      	movs	r2, #0
 80066fc:	4543      	cmp	r3, r8
 80066fe:	d321      	bcc.n	8006744 <__multiply+0x98>
 8006700:	f104 0314 	add.w	r3, r4, #20
 8006704:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006708:	f109 0314 	add.w	r3, r9, #20
 800670c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006710:	9202      	str	r2, [sp, #8]
 8006712:	1b3a      	subs	r2, r7, r4
 8006714:	3a15      	subs	r2, #21
 8006716:	f022 0203 	bic.w	r2, r2, #3
 800671a:	3204      	adds	r2, #4
 800671c:	f104 0115 	add.w	r1, r4, #21
 8006720:	428f      	cmp	r7, r1
 8006722:	bf38      	it	cc
 8006724:	2204      	movcc	r2, #4
 8006726:	9201      	str	r2, [sp, #4]
 8006728:	9a02      	ldr	r2, [sp, #8]
 800672a:	9303      	str	r3, [sp, #12]
 800672c:	429a      	cmp	r2, r3
 800672e:	d80c      	bhi.n	800674a <__multiply+0x9e>
 8006730:	2e00      	cmp	r6, #0
 8006732:	dd03      	ble.n	800673c <__multiply+0x90>
 8006734:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006738:	2b00      	cmp	r3, #0
 800673a:	d05b      	beq.n	80067f4 <__multiply+0x148>
 800673c:	6106      	str	r6, [r0, #16]
 800673e:	b005      	add	sp, #20
 8006740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006744:	f843 2b04 	str.w	r2, [r3], #4
 8006748:	e7d8      	b.n	80066fc <__multiply+0x50>
 800674a:	f8b3 a000 	ldrh.w	sl, [r3]
 800674e:	f1ba 0f00 	cmp.w	sl, #0
 8006752:	d024      	beq.n	800679e <__multiply+0xf2>
 8006754:	f104 0e14 	add.w	lr, r4, #20
 8006758:	46a9      	mov	r9, r5
 800675a:	f04f 0c00 	mov.w	ip, #0
 800675e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006762:	f8d9 1000 	ldr.w	r1, [r9]
 8006766:	fa1f fb82 	uxth.w	fp, r2
 800676a:	b289      	uxth	r1, r1
 800676c:	fb0a 110b 	mla	r1, sl, fp, r1
 8006770:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006774:	f8d9 2000 	ldr.w	r2, [r9]
 8006778:	4461      	add	r1, ip
 800677a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800677e:	fb0a c20b 	mla	r2, sl, fp, ip
 8006782:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006786:	b289      	uxth	r1, r1
 8006788:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800678c:	4577      	cmp	r7, lr
 800678e:	f849 1b04 	str.w	r1, [r9], #4
 8006792:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006796:	d8e2      	bhi.n	800675e <__multiply+0xb2>
 8006798:	9a01      	ldr	r2, [sp, #4]
 800679a:	f845 c002 	str.w	ip, [r5, r2]
 800679e:	9a03      	ldr	r2, [sp, #12]
 80067a0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80067a4:	3304      	adds	r3, #4
 80067a6:	f1b9 0f00 	cmp.w	r9, #0
 80067aa:	d021      	beq.n	80067f0 <__multiply+0x144>
 80067ac:	6829      	ldr	r1, [r5, #0]
 80067ae:	f104 0c14 	add.w	ip, r4, #20
 80067b2:	46ae      	mov	lr, r5
 80067b4:	f04f 0a00 	mov.w	sl, #0
 80067b8:	f8bc b000 	ldrh.w	fp, [ip]
 80067bc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80067c0:	fb09 220b 	mla	r2, r9, fp, r2
 80067c4:	4452      	add	r2, sl
 80067c6:	b289      	uxth	r1, r1
 80067c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80067cc:	f84e 1b04 	str.w	r1, [lr], #4
 80067d0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80067d4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80067d8:	f8be 1000 	ldrh.w	r1, [lr]
 80067dc:	fb09 110a 	mla	r1, r9, sl, r1
 80067e0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80067e4:	4567      	cmp	r7, ip
 80067e6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80067ea:	d8e5      	bhi.n	80067b8 <__multiply+0x10c>
 80067ec:	9a01      	ldr	r2, [sp, #4]
 80067ee:	50a9      	str	r1, [r5, r2]
 80067f0:	3504      	adds	r5, #4
 80067f2:	e799      	b.n	8006728 <__multiply+0x7c>
 80067f4:	3e01      	subs	r6, #1
 80067f6:	e79b      	b.n	8006730 <__multiply+0x84>
 80067f8:	08007888 	.word	0x08007888
 80067fc:	08007899 	.word	0x08007899

08006800 <__pow5mult>:
 8006800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006804:	4615      	mov	r5, r2
 8006806:	f012 0203 	ands.w	r2, r2, #3
 800680a:	4606      	mov	r6, r0
 800680c:	460f      	mov	r7, r1
 800680e:	d007      	beq.n	8006820 <__pow5mult+0x20>
 8006810:	4c25      	ldr	r4, [pc, #148]	; (80068a8 <__pow5mult+0xa8>)
 8006812:	3a01      	subs	r2, #1
 8006814:	2300      	movs	r3, #0
 8006816:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800681a:	f7ff fe9d 	bl	8006558 <__multadd>
 800681e:	4607      	mov	r7, r0
 8006820:	10ad      	asrs	r5, r5, #2
 8006822:	d03d      	beq.n	80068a0 <__pow5mult+0xa0>
 8006824:	69f4      	ldr	r4, [r6, #28]
 8006826:	b97c      	cbnz	r4, 8006848 <__pow5mult+0x48>
 8006828:	2010      	movs	r0, #16
 800682a:	f7ff fd7f 	bl	800632c <malloc>
 800682e:	4602      	mov	r2, r0
 8006830:	61f0      	str	r0, [r6, #28]
 8006832:	b928      	cbnz	r0, 8006840 <__pow5mult+0x40>
 8006834:	4b1d      	ldr	r3, [pc, #116]	; (80068ac <__pow5mult+0xac>)
 8006836:	481e      	ldr	r0, [pc, #120]	; (80068b0 <__pow5mult+0xb0>)
 8006838:	f240 11b3 	movw	r1, #435	; 0x1b3
 800683c:	f000 fbe4 	bl	8007008 <__assert_func>
 8006840:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006844:	6004      	str	r4, [r0, #0]
 8006846:	60c4      	str	r4, [r0, #12]
 8006848:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800684c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006850:	b94c      	cbnz	r4, 8006866 <__pow5mult+0x66>
 8006852:	f240 2171 	movw	r1, #625	; 0x271
 8006856:	4630      	mov	r0, r6
 8006858:	f7ff ff12 	bl	8006680 <__i2b>
 800685c:	2300      	movs	r3, #0
 800685e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006862:	4604      	mov	r4, r0
 8006864:	6003      	str	r3, [r0, #0]
 8006866:	f04f 0900 	mov.w	r9, #0
 800686a:	07eb      	lsls	r3, r5, #31
 800686c:	d50a      	bpl.n	8006884 <__pow5mult+0x84>
 800686e:	4639      	mov	r1, r7
 8006870:	4622      	mov	r2, r4
 8006872:	4630      	mov	r0, r6
 8006874:	f7ff ff1a 	bl	80066ac <__multiply>
 8006878:	4639      	mov	r1, r7
 800687a:	4680      	mov	r8, r0
 800687c:	4630      	mov	r0, r6
 800687e:	f7ff fe49 	bl	8006514 <_Bfree>
 8006882:	4647      	mov	r7, r8
 8006884:	106d      	asrs	r5, r5, #1
 8006886:	d00b      	beq.n	80068a0 <__pow5mult+0xa0>
 8006888:	6820      	ldr	r0, [r4, #0]
 800688a:	b938      	cbnz	r0, 800689c <__pow5mult+0x9c>
 800688c:	4622      	mov	r2, r4
 800688e:	4621      	mov	r1, r4
 8006890:	4630      	mov	r0, r6
 8006892:	f7ff ff0b 	bl	80066ac <__multiply>
 8006896:	6020      	str	r0, [r4, #0]
 8006898:	f8c0 9000 	str.w	r9, [r0]
 800689c:	4604      	mov	r4, r0
 800689e:	e7e4      	b.n	800686a <__pow5mult+0x6a>
 80068a0:	4638      	mov	r0, r7
 80068a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068a6:	bf00      	nop
 80068a8:	080079e8 	.word	0x080079e8
 80068ac:	08007819 	.word	0x08007819
 80068b0:	08007899 	.word	0x08007899

080068b4 <__lshift>:
 80068b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068b8:	460c      	mov	r4, r1
 80068ba:	6849      	ldr	r1, [r1, #4]
 80068bc:	6923      	ldr	r3, [r4, #16]
 80068be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80068c2:	68a3      	ldr	r3, [r4, #8]
 80068c4:	4607      	mov	r7, r0
 80068c6:	4691      	mov	r9, r2
 80068c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80068cc:	f108 0601 	add.w	r6, r8, #1
 80068d0:	42b3      	cmp	r3, r6
 80068d2:	db0b      	blt.n	80068ec <__lshift+0x38>
 80068d4:	4638      	mov	r0, r7
 80068d6:	f7ff fddd 	bl	8006494 <_Balloc>
 80068da:	4605      	mov	r5, r0
 80068dc:	b948      	cbnz	r0, 80068f2 <__lshift+0x3e>
 80068de:	4602      	mov	r2, r0
 80068e0:	4b28      	ldr	r3, [pc, #160]	; (8006984 <__lshift+0xd0>)
 80068e2:	4829      	ldr	r0, [pc, #164]	; (8006988 <__lshift+0xd4>)
 80068e4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80068e8:	f000 fb8e 	bl	8007008 <__assert_func>
 80068ec:	3101      	adds	r1, #1
 80068ee:	005b      	lsls	r3, r3, #1
 80068f0:	e7ee      	b.n	80068d0 <__lshift+0x1c>
 80068f2:	2300      	movs	r3, #0
 80068f4:	f100 0114 	add.w	r1, r0, #20
 80068f8:	f100 0210 	add.w	r2, r0, #16
 80068fc:	4618      	mov	r0, r3
 80068fe:	4553      	cmp	r3, sl
 8006900:	db33      	blt.n	800696a <__lshift+0xb6>
 8006902:	6920      	ldr	r0, [r4, #16]
 8006904:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006908:	f104 0314 	add.w	r3, r4, #20
 800690c:	f019 091f 	ands.w	r9, r9, #31
 8006910:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006914:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006918:	d02b      	beq.n	8006972 <__lshift+0xbe>
 800691a:	f1c9 0e20 	rsb	lr, r9, #32
 800691e:	468a      	mov	sl, r1
 8006920:	2200      	movs	r2, #0
 8006922:	6818      	ldr	r0, [r3, #0]
 8006924:	fa00 f009 	lsl.w	r0, r0, r9
 8006928:	4310      	orrs	r0, r2
 800692a:	f84a 0b04 	str.w	r0, [sl], #4
 800692e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006932:	459c      	cmp	ip, r3
 8006934:	fa22 f20e 	lsr.w	r2, r2, lr
 8006938:	d8f3      	bhi.n	8006922 <__lshift+0x6e>
 800693a:	ebac 0304 	sub.w	r3, ip, r4
 800693e:	3b15      	subs	r3, #21
 8006940:	f023 0303 	bic.w	r3, r3, #3
 8006944:	3304      	adds	r3, #4
 8006946:	f104 0015 	add.w	r0, r4, #21
 800694a:	4584      	cmp	ip, r0
 800694c:	bf38      	it	cc
 800694e:	2304      	movcc	r3, #4
 8006950:	50ca      	str	r2, [r1, r3]
 8006952:	b10a      	cbz	r2, 8006958 <__lshift+0xa4>
 8006954:	f108 0602 	add.w	r6, r8, #2
 8006958:	3e01      	subs	r6, #1
 800695a:	4638      	mov	r0, r7
 800695c:	612e      	str	r6, [r5, #16]
 800695e:	4621      	mov	r1, r4
 8006960:	f7ff fdd8 	bl	8006514 <_Bfree>
 8006964:	4628      	mov	r0, r5
 8006966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800696a:	f842 0f04 	str.w	r0, [r2, #4]!
 800696e:	3301      	adds	r3, #1
 8006970:	e7c5      	b.n	80068fe <__lshift+0x4a>
 8006972:	3904      	subs	r1, #4
 8006974:	f853 2b04 	ldr.w	r2, [r3], #4
 8006978:	f841 2f04 	str.w	r2, [r1, #4]!
 800697c:	459c      	cmp	ip, r3
 800697e:	d8f9      	bhi.n	8006974 <__lshift+0xc0>
 8006980:	e7ea      	b.n	8006958 <__lshift+0xa4>
 8006982:	bf00      	nop
 8006984:	08007888 	.word	0x08007888
 8006988:	08007899 	.word	0x08007899

0800698c <__mcmp>:
 800698c:	b530      	push	{r4, r5, lr}
 800698e:	6902      	ldr	r2, [r0, #16]
 8006990:	690c      	ldr	r4, [r1, #16]
 8006992:	1b12      	subs	r2, r2, r4
 8006994:	d10e      	bne.n	80069b4 <__mcmp+0x28>
 8006996:	f100 0314 	add.w	r3, r0, #20
 800699a:	3114      	adds	r1, #20
 800699c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80069a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80069a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80069a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80069ac:	42a5      	cmp	r5, r4
 80069ae:	d003      	beq.n	80069b8 <__mcmp+0x2c>
 80069b0:	d305      	bcc.n	80069be <__mcmp+0x32>
 80069b2:	2201      	movs	r2, #1
 80069b4:	4610      	mov	r0, r2
 80069b6:	bd30      	pop	{r4, r5, pc}
 80069b8:	4283      	cmp	r3, r0
 80069ba:	d3f3      	bcc.n	80069a4 <__mcmp+0x18>
 80069bc:	e7fa      	b.n	80069b4 <__mcmp+0x28>
 80069be:	f04f 32ff 	mov.w	r2, #4294967295
 80069c2:	e7f7      	b.n	80069b4 <__mcmp+0x28>

080069c4 <__mdiff>:
 80069c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069c8:	460c      	mov	r4, r1
 80069ca:	4606      	mov	r6, r0
 80069cc:	4611      	mov	r1, r2
 80069ce:	4620      	mov	r0, r4
 80069d0:	4690      	mov	r8, r2
 80069d2:	f7ff ffdb 	bl	800698c <__mcmp>
 80069d6:	1e05      	subs	r5, r0, #0
 80069d8:	d110      	bne.n	80069fc <__mdiff+0x38>
 80069da:	4629      	mov	r1, r5
 80069dc:	4630      	mov	r0, r6
 80069de:	f7ff fd59 	bl	8006494 <_Balloc>
 80069e2:	b930      	cbnz	r0, 80069f2 <__mdiff+0x2e>
 80069e4:	4b3a      	ldr	r3, [pc, #232]	; (8006ad0 <__mdiff+0x10c>)
 80069e6:	4602      	mov	r2, r0
 80069e8:	f240 2137 	movw	r1, #567	; 0x237
 80069ec:	4839      	ldr	r0, [pc, #228]	; (8006ad4 <__mdiff+0x110>)
 80069ee:	f000 fb0b 	bl	8007008 <__assert_func>
 80069f2:	2301      	movs	r3, #1
 80069f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80069f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069fc:	bfa4      	itt	ge
 80069fe:	4643      	movge	r3, r8
 8006a00:	46a0      	movge	r8, r4
 8006a02:	4630      	mov	r0, r6
 8006a04:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006a08:	bfa6      	itte	ge
 8006a0a:	461c      	movge	r4, r3
 8006a0c:	2500      	movge	r5, #0
 8006a0e:	2501      	movlt	r5, #1
 8006a10:	f7ff fd40 	bl	8006494 <_Balloc>
 8006a14:	b920      	cbnz	r0, 8006a20 <__mdiff+0x5c>
 8006a16:	4b2e      	ldr	r3, [pc, #184]	; (8006ad0 <__mdiff+0x10c>)
 8006a18:	4602      	mov	r2, r0
 8006a1a:	f240 2145 	movw	r1, #581	; 0x245
 8006a1e:	e7e5      	b.n	80069ec <__mdiff+0x28>
 8006a20:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006a24:	6926      	ldr	r6, [r4, #16]
 8006a26:	60c5      	str	r5, [r0, #12]
 8006a28:	f104 0914 	add.w	r9, r4, #20
 8006a2c:	f108 0514 	add.w	r5, r8, #20
 8006a30:	f100 0e14 	add.w	lr, r0, #20
 8006a34:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006a38:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006a3c:	f108 0210 	add.w	r2, r8, #16
 8006a40:	46f2      	mov	sl, lr
 8006a42:	2100      	movs	r1, #0
 8006a44:	f859 3b04 	ldr.w	r3, [r9], #4
 8006a48:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006a4c:	fa11 f88b 	uxtah	r8, r1, fp
 8006a50:	b299      	uxth	r1, r3
 8006a52:	0c1b      	lsrs	r3, r3, #16
 8006a54:	eba8 0801 	sub.w	r8, r8, r1
 8006a58:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006a5c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006a60:	fa1f f888 	uxth.w	r8, r8
 8006a64:	1419      	asrs	r1, r3, #16
 8006a66:	454e      	cmp	r6, r9
 8006a68:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006a6c:	f84a 3b04 	str.w	r3, [sl], #4
 8006a70:	d8e8      	bhi.n	8006a44 <__mdiff+0x80>
 8006a72:	1b33      	subs	r3, r6, r4
 8006a74:	3b15      	subs	r3, #21
 8006a76:	f023 0303 	bic.w	r3, r3, #3
 8006a7a:	3304      	adds	r3, #4
 8006a7c:	3415      	adds	r4, #21
 8006a7e:	42a6      	cmp	r6, r4
 8006a80:	bf38      	it	cc
 8006a82:	2304      	movcc	r3, #4
 8006a84:	441d      	add	r5, r3
 8006a86:	4473      	add	r3, lr
 8006a88:	469e      	mov	lr, r3
 8006a8a:	462e      	mov	r6, r5
 8006a8c:	4566      	cmp	r6, ip
 8006a8e:	d30e      	bcc.n	8006aae <__mdiff+0xea>
 8006a90:	f10c 0203 	add.w	r2, ip, #3
 8006a94:	1b52      	subs	r2, r2, r5
 8006a96:	f022 0203 	bic.w	r2, r2, #3
 8006a9a:	3d03      	subs	r5, #3
 8006a9c:	45ac      	cmp	ip, r5
 8006a9e:	bf38      	it	cc
 8006aa0:	2200      	movcc	r2, #0
 8006aa2:	4413      	add	r3, r2
 8006aa4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006aa8:	b17a      	cbz	r2, 8006aca <__mdiff+0x106>
 8006aaa:	6107      	str	r7, [r0, #16]
 8006aac:	e7a4      	b.n	80069f8 <__mdiff+0x34>
 8006aae:	f856 8b04 	ldr.w	r8, [r6], #4
 8006ab2:	fa11 f288 	uxtah	r2, r1, r8
 8006ab6:	1414      	asrs	r4, r2, #16
 8006ab8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006abc:	b292      	uxth	r2, r2
 8006abe:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006ac2:	f84e 2b04 	str.w	r2, [lr], #4
 8006ac6:	1421      	asrs	r1, r4, #16
 8006ac8:	e7e0      	b.n	8006a8c <__mdiff+0xc8>
 8006aca:	3f01      	subs	r7, #1
 8006acc:	e7ea      	b.n	8006aa4 <__mdiff+0xe0>
 8006ace:	bf00      	nop
 8006ad0:	08007888 	.word	0x08007888
 8006ad4:	08007899 	.word	0x08007899

08006ad8 <__d2b>:
 8006ad8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006adc:	460f      	mov	r7, r1
 8006ade:	2101      	movs	r1, #1
 8006ae0:	ec59 8b10 	vmov	r8, r9, d0
 8006ae4:	4616      	mov	r6, r2
 8006ae6:	f7ff fcd5 	bl	8006494 <_Balloc>
 8006aea:	4604      	mov	r4, r0
 8006aec:	b930      	cbnz	r0, 8006afc <__d2b+0x24>
 8006aee:	4602      	mov	r2, r0
 8006af0:	4b24      	ldr	r3, [pc, #144]	; (8006b84 <__d2b+0xac>)
 8006af2:	4825      	ldr	r0, [pc, #148]	; (8006b88 <__d2b+0xb0>)
 8006af4:	f240 310f 	movw	r1, #783	; 0x30f
 8006af8:	f000 fa86 	bl	8007008 <__assert_func>
 8006afc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006b00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006b04:	bb2d      	cbnz	r5, 8006b52 <__d2b+0x7a>
 8006b06:	9301      	str	r3, [sp, #4]
 8006b08:	f1b8 0300 	subs.w	r3, r8, #0
 8006b0c:	d026      	beq.n	8006b5c <__d2b+0x84>
 8006b0e:	4668      	mov	r0, sp
 8006b10:	9300      	str	r3, [sp, #0]
 8006b12:	f7ff fd87 	bl	8006624 <__lo0bits>
 8006b16:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006b1a:	b1e8      	cbz	r0, 8006b58 <__d2b+0x80>
 8006b1c:	f1c0 0320 	rsb	r3, r0, #32
 8006b20:	fa02 f303 	lsl.w	r3, r2, r3
 8006b24:	430b      	orrs	r3, r1
 8006b26:	40c2      	lsrs	r2, r0
 8006b28:	6163      	str	r3, [r4, #20]
 8006b2a:	9201      	str	r2, [sp, #4]
 8006b2c:	9b01      	ldr	r3, [sp, #4]
 8006b2e:	61a3      	str	r3, [r4, #24]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	bf14      	ite	ne
 8006b34:	2202      	movne	r2, #2
 8006b36:	2201      	moveq	r2, #1
 8006b38:	6122      	str	r2, [r4, #16]
 8006b3a:	b1bd      	cbz	r5, 8006b6c <__d2b+0x94>
 8006b3c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006b40:	4405      	add	r5, r0
 8006b42:	603d      	str	r5, [r7, #0]
 8006b44:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006b48:	6030      	str	r0, [r6, #0]
 8006b4a:	4620      	mov	r0, r4
 8006b4c:	b003      	add	sp, #12
 8006b4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b56:	e7d6      	b.n	8006b06 <__d2b+0x2e>
 8006b58:	6161      	str	r1, [r4, #20]
 8006b5a:	e7e7      	b.n	8006b2c <__d2b+0x54>
 8006b5c:	a801      	add	r0, sp, #4
 8006b5e:	f7ff fd61 	bl	8006624 <__lo0bits>
 8006b62:	9b01      	ldr	r3, [sp, #4]
 8006b64:	6163      	str	r3, [r4, #20]
 8006b66:	3020      	adds	r0, #32
 8006b68:	2201      	movs	r2, #1
 8006b6a:	e7e5      	b.n	8006b38 <__d2b+0x60>
 8006b6c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006b70:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006b74:	6038      	str	r0, [r7, #0]
 8006b76:	6918      	ldr	r0, [r3, #16]
 8006b78:	f7ff fd34 	bl	80065e4 <__hi0bits>
 8006b7c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006b80:	e7e2      	b.n	8006b48 <__d2b+0x70>
 8006b82:	bf00      	nop
 8006b84:	08007888 	.word	0x08007888
 8006b88:	08007899 	.word	0x08007899

08006b8c <__ssputs_r>:
 8006b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b90:	688e      	ldr	r6, [r1, #8]
 8006b92:	461f      	mov	r7, r3
 8006b94:	42be      	cmp	r6, r7
 8006b96:	680b      	ldr	r3, [r1, #0]
 8006b98:	4682      	mov	sl, r0
 8006b9a:	460c      	mov	r4, r1
 8006b9c:	4690      	mov	r8, r2
 8006b9e:	d82c      	bhi.n	8006bfa <__ssputs_r+0x6e>
 8006ba0:	898a      	ldrh	r2, [r1, #12]
 8006ba2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006ba6:	d026      	beq.n	8006bf6 <__ssputs_r+0x6a>
 8006ba8:	6965      	ldr	r5, [r4, #20]
 8006baa:	6909      	ldr	r1, [r1, #16]
 8006bac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006bb0:	eba3 0901 	sub.w	r9, r3, r1
 8006bb4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006bb8:	1c7b      	adds	r3, r7, #1
 8006bba:	444b      	add	r3, r9
 8006bbc:	106d      	asrs	r5, r5, #1
 8006bbe:	429d      	cmp	r5, r3
 8006bc0:	bf38      	it	cc
 8006bc2:	461d      	movcc	r5, r3
 8006bc4:	0553      	lsls	r3, r2, #21
 8006bc6:	d527      	bpl.n	8006c18 <__ssputs_r+0x8c>
 8006bc8:	4629      	mov	r1, r5
 8006bca:	f7ff fbd7 	bl	800637c <_malloc_r>
 8006bce:	4606      	mov	r6, r0
 8006bd0:	b360      	cbz	r0, 8006c2c <__ssputs_r+0xa0>
 8006bd2:	6921      	ldr	r1, [r4, #16]
 8006bd4:	464a      	mov	r2, r9
 8006bd6:	f000 fa09 	bl	8006fec <memcpy>
 8006bda:	89a3      	ldrh	r3, [r4, #12]
 8006bdc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006be0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006be4:	81a3      	strh	r3, [r4, #12]
 8006be6:	6126      	str	r6, [r4, #16]
 8006be8:	6165      	str	r5, [r4, #20]
 8006bea:	444e      	add	r6, r9
 8006bec:	eba5 0509 	sub.w	r5, r5, r9
 8006bf0:	6026      	str	r6, [r4, #0]
 8006bf2:	60a5      	str	r5, [r4, #8]
 8006bf4:	463e      	mov	r6, r7
 8006bf6:	42be      	cmp	r6, r7
 8006bf8:	d900      	bls.n	8006bfc <__ssputs_r+0x70>
 8006bfa:	463e      	mov	r6, r7
 8006bfc:	6820      	ldr	r0, [r4, #0]
 8006bfe:	4632      	mov	r2, r6
 8006c00:	4641      	mov	r1, r8
 8006c02:	f000 f9c9 	bl	8006f98 <memmove>
 8006c06:	68a3      	ldr	r3, [r4, #8]
 8006c08:	1b9b      	subs	r3, r3, r6
 8006c0a:	60a3      	str	r3, [r4, #8]
 8006c0c:	6823      	ldr	r3, [r4, #0]
 8006c0e:	4433      	add	r3, r6
 8006c10:	6023      	str	r3, [r4, #0]
 8006c12:	2000      	movs	r0, #0
 8006c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c18:	462a      	mov	r2, r5
 8006c1a:	f000 fa3b 	bl	8007094 <_realloc_r>
 8006c1e:	4606      	mov	r6, r0
 8006c20:	2800      	cmp	r0, #0
 8006c22:	d1e0      	bne.n	8006be6 <__ssputs_r+0x5a>
 8006c24:	6921      	ldr	r1, [r4, #16]
 8006c26:	4650      	mov	r0, sl
 8006c28:	f7ff fb34 	bl	8006294 <_free_r>
 8006c2c:	230c      	movs	r3, #12
 8006c2e:	f8ca 3000 	str.w	r3, [sl]
 8006c32:	89a3      	ldrh	r3, [r4, #12]
 8006c34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c38:	81a3      	strh	r3, [r4, #12]
 8006c3a:	f04f 30ff 	mov.w	r0, #4294967295
 8006c3e:	e7e9      	b.n	8006c14 <__ssputs_r+0x88>

08006c40 <_svfiprintf_r>:
 8006c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c44:	4698      	mov	r8, r3
 8006c46:	898b      	ldrh	r3, [r1, #12]
 8006c48:	061b      	lsls	r3, r3, #24
 8006c4a:	b09d      	sub	sp, #116	; 0x74
 8006c4c:	4607      	mov	r7, r0
 8006c4e:	460d      	mov	r5, r1
 8006c50:	4614      	mov	r4, r2
 8006c52:	d50e      	bpl.n	8006c72 <_svfiprintf_r+0x32>
 8006c54:	690b      	ldr	r3, [r1, #16]
 8006c56:	b963      	cbnz	r3, 8006c72 <_svfiprintf_r+0x32>
 8006c58:	2140      	movs	r1, #64	; 0x40
 8006c5a:	f7ff fb8f 	bl	800637c <_malloc_r>
 8006c5e:	6028      	str	r0, [r5, #0]
 8006c60:	6128      	str	r0, [r5, #16]
 8006c62:	b920      	cbnz	r0, 8006c6e <_svfiprintf_r+0x2e>
 8006c64:	230c      	movs	r3, #12
 8006c66:	603b      	str	r3, [r7, #0]
 8006c68:	f04f 30ff 	mov.w	r0, #4294967295
 8006c6c:	e0d0      	b.n	8006e10 <_svfiprintf_r+0x1d0>
 8006c6e:	2340      	movs	r3, #64	; 0x40
 8006c70:	616b      	str	r3, [r5, #20]
 8006c72:	2300      	movs	r3, #0
 8006c74:	9309      	str	r3, [sp, #36]	; 0x24
 8006c76:	2320      	movs	r3, #32
 8006c78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c80:	2330      	movs	r3, #48	; 0x30
 8006c82:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006e28 <_svfiprintf_r+0x1e8>
 8006c86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c8a:	f04f 0901 	mov.w	r9, #1
 8006c8e:	4623      	mov	r3, r4
 8006c90:	469a      	mov	sl, r3
 8006c92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c96:	b10a      	cbz	r2, 8006c9c <_svfiprintf_r+0x5c>
 8006c98:	2a25      	cmp	r2, #37	; 0x25
 8006c9a:	d1f9      	bne.n	8006c90 <_svfiprintf_r+0x50>
 8006c9c:	ebba 0b04 	subs.w	fp, sl, r4
 8006ca0:	d00b      	beq.n	8006cba <_svfiprintf_r+0x7a>
 8006ca2:	465b      	mov	r3, fp
 8006ca4:	4622      	mov	r2, r4
 8006ca6:	4629      	mov	r1, r5
 8006ca8:	4638      	mov	r0, r7
 8006caa:	f7ff ff6f 	bl	8006b8c <__ssputs_r>
 8006cae:	3001      	adds	r0, #1
 8006cb0:	f000 80a9 	beq.w	8006e06 <_svfiprintf_r+0x1c6>
 8006cb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cb6:	445a      	add	r2, fp
 8006cb8:	9209      	str	r2, [sp, #36]	; 0x24
 8006cba:	f89a 3000 	ldrb.w	r3, [sl]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	f000 80a1 	beq.w	8006e06 <_svfiprintf_r+0x1c6>
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8006cca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cce:	f10a 0a01 	add.w	sl, sl, #1
 8006cd2:	9304      	str	r3, [sp, #16]
 8006cd4:	9307      	str	r3, [sp, #28]
 8006cd6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006cda:	931a      	str	r3, [sp, #104]	; 0x68
 8006cdc:	4654      	mov	r4, sl
 8006cde:	2205      	movs	r2, #5
 8006ce0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ce4:	4850      	ldr	r0, [pc, #320]	; (8006e28 <_svfiprintf_r+0x1e8>)
 8006ce6:	f7f9 fa7b 	bl	80001e0 <memchr>
 8006cea:	9a04      	ldr	r2, [sp, #16]
 8006cec:	b9d8      	cbnz	r0, 8006d26 <_svfiprintf_r+0xe6>
 8006cee:	06d0      	lsls	r0, r2, #27
 8006cf0:	bf44      	itt	mi
 8006cf2:	2320      	movmi	r3, #32
 8006cf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cf8:	0711      	lsls	r1, r2, #28
 8006cfa:	bf44      	itt	mi
 8006cfc:	232b      	movmi	r3, #43	; 0x2b
 8006cfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d02:	f89a 3000 	ldrb.w	r3, [sl]
 8006d06:	2b2a      	cmp	r3, #42	; 0x2a
 8006d08:	d015      	beq.n	8006d36 <_svfiprintf_r+0xf6>
 8006d0a:	9a07      	ldr	r2, [sp, #28]
 8006d0c:	4654      	mov	r4, sl
 8006d0e:	2000      	movs	r0, #0
 8006d10:	f04f 0c0a 	mov.w	ip, #10
 8006d14:	4621      	mov	r1, r4
 8006d16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d1a:	3b30      	subs	r3, #48	; 0x30
 8006d1c:	2b09      	cmp	r3, #9
 8006d1e:	d94d      	bls.n	8006dbc <_svfiprintf_r+0x17c>
 8006d20:	b1b0      	cbz	r0, 8006d50 <_svfiprintf_r+0x110>
 8006d22:	9207      	str	r2, [sp, #28]
 8006d24:	e014      	b.n	8006d50 <_svfiprintf_r+0x110>
 8006d26:	eba0 0308 	sub.w	r3, r0, r8
 8006d2a:	fa09 f303 	lsl.w	r3, r9, r3
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	9304      	str	r3, [sp, #16]
 8006d32:	46a2      	mov	sl, r4
 8006d34:	e7d2      	b.n	8006cdc <_svfiprintf_r+0x9c>
 8006d36:	9b03      	ldr	r3, [sp, #12]
 8006d38:	1d19      	adds	r1, r3, #4
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	9103      	str	r1, [sp, #12]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	bfbb      	ittet	lt
 8006d42:	425b      	neglt	r3, r3
 8006d44:	f042 0202 	orrlt.w	r2, r2, #2
 8006d48:	9307      	strge	r3, [sp, #28]
 8006d4a:	9307      	strlt	r3, [sp, #28]
 8006d4c:	bfb8      	it	lt
 8006d4e:	9204      	strlt	r2, [sp, #16]
 8006d50:	7823      	ldrb	r3, [r4, #0]
 8006d52:	2b2e      	cmp	r3, #46	; 0x2e
 8006d54:	d10c      	bne.n	8006d70 <_svfiprintf_r+0x130>
 8006d56:	7863      	ldrb	r3, [r4, #1]
 8006d58:	2b2a      	cmp	r3, #42	; 0x2a
 8006d5a:	d134      	bne.n	8006dc6 <_svfiprintf_r+0x186>
 8006d5c:	9b03      	ldr	r3, [sp, #12]
 8006d5e:	1d1a      	adds	r2, r3, #4
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	9203      	str	r2, [sp, #12]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	bfb8      	it	lt
 8006d68:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d6c:	3402      	adds	r4, #2
 8006d6e:	9305      	str	r3, [sp, #20]
 8006d70:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006e38 <_svfiprintf_r+0x1f8>
 8006d74:	7821      	ldrb	r1, [r4, #0]
 8006d76:	2203      	movs	r2, #3
 8006d78:	4650      	mov	r0, sl
 8006d7a:	f7f9 fa31 	bl	80001e0 <memchr>
 8006d7e:	b138      	cbz	r0, 8006d90 <_svfiprintf_r+0x150>
 8006d80:	9b04      	ldr	r3, [sp, #16]
 8006d82:	eba0 000a 	sub.w	r0, r0, sl
 8006d86:	2240      	movs	r2, #64	; 0x40
 8006d88:	4082      	lsls	r2, r0
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	3401      	adds	r4, #1
 8006d8e:	9304      	str	r3, [sp, #16]
 8006d90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d94:	4825      	ldr	r0, [pc, #148]	; (8006e2c <_svfiprintf_r+0x1ec>)
 8006d96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d9a:	2206      	movs	r2, #6
 8006d9c:	f7f9 fa20 	bl	80001e0 <memchr>
 8006da0:	2800      	cmp	r0, #0
 8006da2:	d038      	beq.n	8006e16 <_svfiprintf_r+0x1d6>
 8006da4:	4b22      	ldr	r3, [pc, #136]	; (8006e30 <_svfiprintf_r+0x1f0>)
 8006da6:	bb1b      	cbnz	r3, 8006df0 <_svfiprintf_r+0x1b0>
 8006da8:	9b03      	ldr	r3, [sp, #12]
 8006daa:	3307      	adds	r3, #7
 8006dac:	f023 0307 	bic.w	r3, r3, #7
 8006db0:	3308      	adds	r3, #8
 8006db2:	9303      	str	r3, [sp, #12]
 8006db4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006db6:	4433      	add	r3, r6
 8006db8:	9309      	str	r3, [sp, #36]	; 0x24
 8006dba:	e768      	b.n	8006c8e <_svfiprintf_r+0x4e>
 8006dbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8006dc0:	460c      	mov	r4, r1
 8006dc2:	2001      	movs	r0, #1
 8006dc4:	e7a6      	b.n	8006d14 <_svfiprintf_r+0xd4>
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	3401      	adds	r4, #1
 8006dca:	9305      	str	r3, [sp, #20]
 8006dcc:	4619      	mov	r1, r3
 8006dce:	f04f 0c0a 	mov.w	ip, #10
 8006dd2:	4620      	mov	r0, r4
 8006dd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006dd8:	3a30      	subs	r2, #48	; 0x30
 8006dda:	2a09      	cmp	r2, #9
 8006ddc:	d903      	bls.n	8006de6 <_svfiprintf_r+0x1a6>
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d0c6      	beq.n	8006d70 <_svfiprintf_r+0x130>
 8006de2:	9105      	str	r1, [sp, #20]
 8006de4:	e7c4      	b.n	8006d70 <_svfiprintf_r+0x130>
 8006de6:	fb0c 2101 	mla	r1, ip, r1, r2
 8006dea:	4604      	mov	r4, r0
 8006dec:	2301      	movs	r3, #1
 8006dee:	e7f0      	b.n	8006dd2 <_svfiprintf_r+0x192>
 8006df0:	ab03      	add	r3, sp, #12
 8006df2:	9300      	str	r3, [sp, #0]
 8006df4:	462a      	mov	r2, r5
 8006df6:	4b0f      	ldr	r3, [pc, #60]	; (8006e34 <_svfiprintf_r+0x1f4>)
 8006df8:	a904      	add	r1, sp, #16
 8006dfa:	4638      	mov	r0, r7
 8006dfc:	f7fd fe78 	bl	8004af0 <_printf_float>
 8006e00:	1c42      	adds	r2, r0, #1
 8006e02:	4606      	mov	r6, r0
 8006e04:	d1d6      	bne.n	8006db4 <_svfiprintf_r+0x174>
 8006e06:	89ab      	ldrh	r3, [r5, #12]
 8006e08:	065b      	lsls	r3, r3, #25
 8006e0a:	f53f af2d 	bmi.w	8006c68 <_svfiprintf_r+0x28>
 8006e0e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e10:	b01d      	add	sp, #116	; 0x74
 8006e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e16:	ab03      	add	r3, sp, #12
 8006e18:	9300      	str	r3, [sp, #0]
 8006e1a:	462a      	mov	r2, r5
 8006e1c:	4b05      	ldr	r3, [pc, #20]	; (8006e34 <_svfiprintf_r+0x1f4>)
 8006e1e:	a904      	add	r1, sp, #16
 8006e20:	4638      	mov	r0, r7
 8006e22:	f7fe f909 	bl	8005038 <_printf_i>
 8006e26:	e7eb      	b.n	8006e00 <_svfiprintf_r+0x1c0>
 8006e28:	080079f4 	.word	0x080079f4
 8006e2c:	080079fe 	.word	0x080079fe
 8006e30:	08004af1 	.word	0x08004af1
 8006e34:	08006b8d 	.word	0x08006b8d
 8006e38:	080079fa 	.word	0x080079fa

08006e3c <__sflush_r>:
 8006e3c:	898a      	ldrh	r2, [r1, #12]
 8006e3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e42:	4605      	mov	r5, r0
 8006e44:	0710      	lsls	r0, r2, #28
 8006e46:	460c      	mov	r4, r1
 8006e48:	d458      	bmi.n	8006efc <__sflush_r+0xc0>
 8006e4a:	684b      	ldr	r3, [r1, #4]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	dc05      	bgt.n	8006e5c <__sflush_r+0x20>
 8006e50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	dc02      	bgt.n	8006e5c <__sflush_r+0x20>
 8006e56:	2000      	movs	r0, #0
 8006e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e5e:	2e00      	cmp	r6, #0
 8006e60:	d0f9      	beq.n	8006e56 <__sflush_r+0x1a>
 8006e62:	2300      	movs	r3, #0
 8006e64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006e68:	682f      	ldr	r7, [r5, #0]
 8006e6a:	6a21      	ldr	r1, [r4, #32]
 8006e6c:	602b      	str	r3, [r5, #0]
 8006e6e:	d032      	beq.n	8006ed6 <__sflush_r+0x9a>
 8006e70:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006e72:	89a3      	ldrh	r3, [r4, #12]
 8006e74:	075a      	lsls	r2, r3, #29
 8006e76:	d505      	bpl.n	8006e84 <__sflush_r+0x48>
 8006e78:	6863      	ldr	r3, [r4, #4]
 8006e7a:	1ac0      	subs	r0, r0, r3
 8006e7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006e7e:	b10b      	cbz	r3, 8006e84 <__sflush_r+0x48>
 8006e80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006e82:	1ac0      	subs	r0, r0, r3
 8006e84:	2300      	movs	r3, #0
 8006e86:	4602      	mov	r2, r0
 8006e88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e8a:	6a21      	ldr	r1, [r4, #32]
 8006e8c:	4628      	mov	r0, r5
 8006e8e:	47b0      	blx	r6
 8006e90:	1c43      	adds	r3, r0, #1
 8006e92:	89a3      	ldrh	r3, [r4, #12]
 8006e94:	d106      	bne.n	8006ea4 <__sflush_r+0x68>
 8006e96:	6829      	ldr	r1, [r5, #0]
 8006e98:	291d      	cmp	r1, #29
 8006e9a:	d82b      	bhi.n	8006ef4 <__sflush_r+0xb8>
 8006e9c:	4a29      	ldr	r2, [pc, #164]	; (8006f44 <__sflush_r+0x108>)
 8006e9e:	410a      	asrs	r2, r1
 8006ea0:	07d6      	lsls	r6, r2, #31
 8006ea2:	d427      	bmi.n	8006ef4 <__sflush_r+0xb8>
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	6062      	str	r2, [r4, #4]
 8006ea8:	04d9      	lsls	r1, r3, #19
 8006eaa:	6922      	ldr	r2, [r4, #16]
 8006eac:	6022      	str	r2, [r4, #0]
 8006eae:	d504      	bpl.n	8006eba <__sflush_r+0x7e>
 8006eb0:	1c42      	adds	r2, r0, #1
 8006eb2:	d101      	bne.n	8006eb8 <__sflush_r+0x7c>
 8006eb4:	682b      	ldr	r3, [r5, #0]
 8006eb6:	b903      	cbnz	r3, 8006eba <__sflush_r+0x7e>
 8006eb8:	6560      	str	r0, [r4, #84]	; 0x54
 8006eba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ebc:	602f      	str	r7, [r5, #0]
 8006ebe:	2900      	cmp	r1, #0
 8006ec0:	d0c9      	beq.n	8006e56 <__sflush_r+0x1a>
 8006ec2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ec6:	4299      	cmp	r1, r3
 8006ec8:	d002      	beq.n	8006ed0 <__sflush_r+0x94>
 8006eca:	4628      	mov	r0, r5
 8006ecc:	f7ff f9e2 	bl	8006294 <_free_r>
 8006ed0:	2000      	movs	r0, #0
 8006ed2:	6360      	str	r0, [r4, #52]	; 0x34
 8006ed4:	e7c0      	b.n	8006e58 <__sflush_r+0x1c>
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	4628      	mov	r0, r5
 8006eda:	47b0      	blx	r6
 8006edc:	1c41      	adds	r1, r0, #1
 8006ede:	d1c8      	bne.n	8006e72 <__sflush_r+0x36>
 8006ee0:	682b      	ldr	r3, [r5, #0]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d0c5      	beq.n	8006e72 <__sflush_r+0x36>
 8006ee6:	2b1d      	cmp	r3, #29
 8006ee8:	d001      	beq.n	8006eee <__sflush_r+0xb2>
 8006eea:	2b16      	cmp	r3, #22
 8006eec:	d101      	bne.n	8006ef2 <__sflush_r+0xb6>
 8006eee:	602f      	str	r7, [r5, #0]
 8006ef0:	e7b1      	b.n	8006e56 <__sflush_r+0x1a>
 8006ef2:	89a3      	ldrh	r3, [r4, #12]
 8006ef4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ef8:	81a3      	strh	r3, [r4, #12]
 8006efa:	e7ad      	b.n	8006e58 <__sflush_r+0x1c>
 8006efc:	690f      	ldr	r7, [r1, #16]
 8006efe:	2f00      	cmp	r7, #0
 8006f00:	d0a9      	beq.n	8006e56 <__sflush_r+0x1a>
 8006f02:	0793      	lsls	r3, r2, #30
 8006f04:	680e      	ldr	r6, [r1, #0]
 8006f06:	bf08      	it	eq
 8006f08:	694b      	ldreq	r3, [r1, #20]
 8006f0a:	600f      	str	r7, [r1, #0]
 8006f0c:	bf18      	it	ne
 8006f0e:	2300      	movne	r3, #0
 8006f10:	eba6 0807 	sub.w	r8, r6, r7
 8006f14:	608b      	str	r3, [r1, #8]
 8006f16:	f1b8 0f00 	cmp.w	r8, #0
 8006f1a:	dd9c      	ble.n	8006e56 <__sflush_r+0x1a>
 8006f1c:	6a21      	ldr	r1, [r4, #32]
 8006f1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006f20:	4643      	mov	r3, r8
 8006f22:	463a      	mov	r2, r7
 8006f24:	4628      	mov	r0, r5
 8006f26:	47b0      	blx	r6
 8006f28:	2800      	cmp	r0, #0
 8006f2a:	dc06      	bgt.n	8006f3a <__sflush_r+0xfe>
 8006f2c:	89a3      	ldrh	r3, [r4, #12]
 8006f2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f32:	81a3      	strh	r3, [r4, #12]
 8006f34:	f04f 30ff 	mov.w	r0, #4294967295
 8006f38:	e78e      	b.n	8006e58 <__sflush_r+0x1c>
 8006f3a:	4407      	add	r7, r0
 8006f3c:	eba8 0800 	sub.w	r8, r8, r0
 8006f40:	e7e9      	b.n	8006f16 <__sflush_r+0xda>
 8006f42:	bf00      	nop
 8006f44:	dfbffffe 	.word	0xdfbffffe

08006f48 <_fflush_r>:
 8006f48:	b538      	push	{r3, r4, r5, lr}
 8006f4a:	690b      	ldr	r3, [r1, #16]
 8006f4c:	4605      	mov	r5, r0
 8006f4e:	460c      	mov	r4, r1
 8006f50:	b913      	cbnz	r3, 8006f58 <_fflush_r+0x10>
 8006f52:	2500      	movs	r5, #0
 8006f54:	4628      	mov	r0, r5
 8006f56:	bd38      	pop	{r3, r4, r5, pc}
 8006f58:	b118      	cbz	r0, 8006f62 <_fflush_r+0x1a>
 8006f5a:	6a03      	ldr	r3, [r0, #32]
 8006f5c:	b90b      	cbnz	r3, 8006f62 <_fflush_r+0x1a>
 8006f5e:	f7fe fa07 	bl	8005370 <__sinit>
 8006f62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d0f3      	beq.n	8006f52 <_fflush_r+0xa>
 8006f6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006f6c:	07d0      	lsls	r0, r2, #31
 8006f6e:	d404      	bmi.n	8006f7a <_fflush_r+0x32>
 8006f70:	0599      	lsls	r1, r3, #22
 8006f72:	d402      	bmi.n	8006f7a <_fflush_r+0x32>
 8006f74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f76:	f7fe fb11 	bl	800559c <__retarget_lock_acquire_recursive>
 8006f7a:	4628      	mov	r0, r5
 8006f7c:	4621      	mov	r1, r4
 8006f7e:	f7ff ff5d 	bl	8006e3c <__sflush_r>
 8006f82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f84:	07da      	lsls	r2, r3, #31
 8006f86:	4605      	mov	r5, r0
 8006f88:	d4e4      	bmi.n	8006f54 <_fflush_r+0xc>
 8006f8a:	89a3      	ldrh	r3, [r4, #12]
 8006f8c:	059b      	lsls	r3, r3, #22
 8006f8e:	d4e1      	bmi.n	8006f54 <_fflush_r+0xc>
 8006f90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f92:	f7fe fb04 	bl	800559e <__retarget_lock_release_recursive>
 8006f96:	e7dd      	b.n	8006f54 <_fflush_r+0xc>

08006f98 <memmove>:
 8006f98:	4288      	cmp	r0, r1
 8006f9a:	b510      	push	{r4, lr}
 8006f9c:	eb01 0402 	add.w	r4, r1, r2
 8006fa0:	d902      	bls.n	8006fa8 <memmove+0x10>
 8006fa2:	4284      	cmp	r4, r0
 8006fa4:	4623      	mov	r3, r4
 8006fa6:	d807      	bhi.n	8006fb8 <memmove+0x20>
 8006fa8:	1e43      	subs	r3, r0, #1
 8006faa:	42a1      	cmp	r1, r4
 8006fac:	d008      	beq.n	8006fc0 <memmove+0x28>
 8006fae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006fb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006fb6:	e7f8      	b.n	8006faa <memmove+0x12>
 8006fb8:	4402      	add	r2, r0
 8006fba:	4601      	mov	r1, r0
 8006fbc:	428a      	cmp	r2, r1
 8006fbe:	d100      	bne.n	8006fc2 <memmove+0x2a>
 8006fc0:	bd10      	pop	{r4, pc}
 8006fc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006fc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006fca:	e7f7      	b.n	8006fbc <memmove+0x24>

08006fcc <_sbrk_r>:
 8006fcc:	b538      	push	{r3, r4, r5, lr}
 8006fce:	4d06      	ldr	r5, [pc, #24]	; (8006fe8 <_sbrk_r+0x1c>)
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	4604      	mov	r4, r0
 8006fd4:	4608      	mov	r0, r1
 8006fd6:	602b      	str	r3, [r5, #0]
 8006fd8:	f7fa fe98 	bl	8001d0c <_sbrk>
 8006fdc:	1c43      	adds	r3, r0, #1
 8006fde:	d102      	bne.n	8006fe6 <_sbrk_r+0x1a>
 8006fe0:	682b      	ldr	r3, [r5, #0]
 8006fe2:	b103      	cbz	r3, 8006fe6 <_sbrk_r+0x1a>
 8006fe4:	6023      	str	r3, [r4, #0]
 8006fe6:	bd38      	pop	{r3, r4, r5, pc}
 8006fe8:	20000638 	.word	0x20000638

08006fec <memcpy>:
 8006fec:	440a      	add	r2, r1
 8006fee:	4291      	cmp	r1, r2
 8006ff0:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ff4:	d100      	bne.n	8006ff8 <memcpy+0xc>
 8006ff6:	4770      	bx	lr
 8006ff8:	b510      	push	{r4, lr}
 8006ffa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ffe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007002:	4291      	cmp	r1, r2
 8007004:	d1f9      	bne.n	8006ffa <memcpy+0xe>
 8007006:	bd10      	pop	{r4, pc}

08007008 <__assert_func>:
 8007008:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800700a:	4614      	mov	r4, r2
 800700c:	461a      	mov	r2, r3
 800700e:	4b09      	ldr	r3, [pc, #36]	; (8007034 <__assert_func+0x2c>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4605      	mov	r5, r0
 8007014:	68d8      	ldr	r0, [r3, #12]
 8007016:	b14c      	cbz	r4, 800702c <__assert_func+0x24>
 8007018:	4b07      	ldr	r3, [pc, #28]	; (8007038 <__assert_func+0x30>)
 800701a:	9100      	str	r1, [sp, #0]
 800701c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007020:	4906      	ldr	r1, [pc, #24]	; (800703c <__assert_func+0x34>)
 8007022:	462b      	mov	r3, r5
 8007024:	f000 f872 	bl	800710c <fiprintf>
 8007028:	f000 f882 	bl	8007130 <abort>
 800702c:	4b04      	ldr	r3, [pc, #16]	; (8007040 <__assert_func+0x38>)
 800702e:	461c      	mov	r4, r3
 8007030:	e7f3      	b.n	800701a <__assert_func+0x12>
 8007032:	bf00      	nop
 8007034:	20000064 	.word	0x20000064
 8007038:	08007a0f 	.word	0x08007a0f
 800703c:	08007a1c 	.word	0x08007a1c
 8007040:	08007a4a 	.word	0x08007a4a

08007044 <_calloc_r>:
 8007044:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007046:	fba1 2402 	umull	r2, r4, r1, r2
 800704a:	b94c      	cbnz	r4, 8007060 <_calloc_r+0x1c>
 800704c:	4611      	mov	r1, r2
 800704e:	9201      	str	r2, [sp, #4]
 8007050:	f7ff f994 	bl	800637c <_malloc_r>
 8007054:	9a01      	ldr	r2, [sp, #4]
 8007056:	4605      	mov	r5, r0
 8007058:	b930      	cbnz	r0, 8007068 <_calloc_r+0x24>
 800705a:	4628      	mov	r0, r5
 800705c:	b003      	add	sp, #12
 800705e:	bd30      	pop	{r4, r5, pc}
 8007060:	220c      	movs	r2, #12
 8007062:	6002      	str	r2, [r0, #0]
 8007064:	2500      	movs	r5, #0
 8007066:	e7f8      	b.n	800705a <_calloc_r+0x16>
 8007068:	4621      	mov	r1, r4
 800706a:	f7fe fa1a 	bl	80054a2 <memset>
 800706e:	e7f4      	b.n	800705a <_calloc_r+0x16>

08007070 <__ascii_mbtowc>:
 8007070:	b082      	sub	sp, #8
 8007072:	b901      	cbnz	r1, 8007076 <__ascii_mbtowc+0x6>
 8007074:	a901      	add	r1, sp, #4
 8007076:	b142      	cbz	r2, 800708a <__ascii_mbtowc+0x1a>
 8007078:	b14b      	cbz	r3, 800708e <__ascii_mbtowc+0x1e>
 800707a:	7813      	ldrb	r3, [r2, #0]
 800707c:	600b      	str	r3, [r1, #0]
 800707e:	7812      	ldrb	r2, [r2, #0]
 8007080:	1e10      	subs	r0, r2, #0
 8007082:	bf18      	it	ne
 8007084:	2001      	movne	r0, #1
 8007086:	b002      	add	sp, #8
 8007088:	4770      	bx	lr
 800708a:	4610      	mov	r0, r2
 800708c:	e7fb      	b.n	8007086 <__ascii_mbtowc+0x16>
 800708e:	f06f 0001 	mvn.w	r0, #1
 8007092:	e7f8      	b.n	8007086 <__ascii_mbtowc+0x16>

08007094 <_realloc_r>:
 8007094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007098:	4680      	mov	r8, r0
 800709a:	4614      	mov	r4, r2
 800709c:	460e      	mov	r6, r1
 800709e:	b921      	cbnz	r1, 80070aa <_realloc_r+0x16>
 80070a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070a4:	4611      	mov	r1, r2
 80070a6:	f7ff b969 	b.w	800637c <_malloc_r>
 80070aa:	b92a      	cbnz	r2, 80070b8 <_realloc_r+0x24>
 80070ac:	f7ff f8f2 	bl	8006294 <_free_r>
 80070b0:	4625      	mov	r5, r4
 80070b2:	4628      	mov	r0, r5
 80070b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070b8:	f000 f841 	bl	800713e <_malloc_usable_size_r>
 80070bc:	4284      	cmp	r4, r0
 80070be:	4607      	mov	r7, r0
 80070c0:	d802      	bhi.n	80070c8 <_realloc_r+0x34>
 80070c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80070c6:	d812      	bhi.n	80070ee <_realloc_r+0x5a>
 80070c8:	4621      	mov	r1, r4
 80070ca:	4640      	mov	r0, r8
 80070cc:	f7ff f956 	bl	800637c <_malloc_r>
 80070d0:	4605      	mov	r5, r0
 80070d2:	2800      	cmp	r0, #0
 80070d4:	d0ed      	beq.n	80070b2 <_realloc_r+0x1e>
 80070d6:	42bc      	cmp	r4, r7
 80070d8:	4622      	mov	r2, r4
 80070da:	4631      	mov	r1, r6
 80070dc:	bf28      	it	cs
 80070de:	463a      	movcs	r2, r7
 80070e0:	f7ff ff84 	bl	8006fec <memcpy>
 80070e4:	4631      	mov	r1, r6
 80070e6:	4640      	mov	r0, r8
 80070e8:	f7ff f8d4 	bl	8006294 <_free_r>
 80070ec:	e7e1      	b.n	80070b2 <_realloc_r+0x1e>
 80070ee:	4635      	mov	r5, r6
 80070f0:	e7df      	b.n	80070b2 <_realloc_r+0x1e>

080070f2 <__ascii_wctomb>:
 80070f2:	b149      	cbz	r1, 8007108 <__ascii_wctomb+0x16>
 80070f4:	2aff      	cmp	r2, #255	; 0xff
 80070f6:	bf85      	ittet	hi
 80070f8:	238a      	movhi	r3, #138	; 0x8a
 80070fa:	6003      	strhi	r3, [r0, #0]
 80070fc:	700a      	strbls	r2, [r1, #0]
 80070fe:	f04f 30ff 	movhi.w	r0, #4294967295
 8007102:	bf98      	it	ls
 8007104:	2001      	movls	r0, #1
 8007106:	4770      	bx	lr
 8007108:	4608      	mov	r0, r1
 800710a:	4770      	bx	lr

0800710c <fiprintf>:
 800710c:	b40e      	push	{r1, r2, r3}
 800710e:	b503      	push	{r0, r1, lr}
 8007110:	4601      	mov	r1, r0
 8007112:	ab03      	add	r3, sp, #12
 8007114:	4805      	ldr	r0, [pc, #20]	; (800712c <fiprintf+0x20>)
 8007116:	f853 2b04 	ldr.w	r2, [r3], #4
 800711a:	6800      	ldr	r0, [r0, #0]
 800711c:	9301      	str	r3, [sp, #4]
 800711e:	f000 f83f 	bl	80071a0 <_vfiprintf_r>
 8007122:	b002      	add	sp, #8
 8007124:	f85d eb04 	ldr.w	lr, [sp], #4
 8007128:	b003      	add	sp, #12
 800712a:	4770      	bx	lr
 800712c:	20000064 	.word	0x20000064

08007130 <abort>:
 8007130:	b508      	push	{r3, lr}
 8007132:	2006      	movs	r0, #6
 8007134:	f000 fa0c 	bl	8007550 <raise>
 8007138:	2001      	movs	r0, #1
 800713a:	f7fa fd6f 	bl	8001c1c <_exit>

0800713e <_malloc_usable_size_r>:
 800713e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007142:	1f18      	subs	r0, r3, #4
 8007144:	2b00      	cmp	r3, #0
 8007146:	bfbc      	itt	lt
 8007148:	580b      	ldrlt	r3, [r1, r0]
 800714a:	18c0      	addlt	r0, r0, r3
 800714c:	4770      	bx	lr

0800714e <__sfputc_r>:
 800714e:	6893      	ldr	r3, [r2, #8]
 8007150:	3b01      	subs	r3, #1
 8007152:	2b00      	cmp	r3, #0
 8007154:	b410      	push	{r4}
 8007156:	6093      	str	r3, [r2, #8]
 8007158:	da08      	bge.n	800716c <__sfputc_r+0x1e>
 800715a:	6994      	ldr	r4, [r2, #24]
 800715c:	42a3      	cmp	r3, r4
 800715e:	db01      	blt.n	8007164 <__sfputc_r+0x16>
 8007160:	290a      	cmp	r1, #10
 8007162:	d103      	bne.n	800716c <__sfputc_r+0x1e>
 8007164:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007168:	f000 b934 	b.w	80073d4 <__swbuf_r>
 800716c:	6813      	ldr	r3, [r2, #0]
 800716e:	1c58      	adds	r0, r3, #1
 8007170:	6010      	str	r0, [r2, #0]
 8007172:	7019      	strb	r1, [r3, #0]
 8007174:	4608      	mov	r0, r1
 8007176:	f85d 4b04 	ldr.w	r4, [sp], #4
 800717a:	4770      	bx	lr

0800717c <__sfputs_r>:
 800717c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800717e:	4606      	mov	r6, r0
 8007180:	460f      	mov	r7, r1
 8007182:	4614      	mov	r4, r2
 8007184:	18d5      	adds	r5, r2, r3
 8007186:	42ac      	cmp	r4, r5
 8007188:	d101      	bne.n	800718e <__sfputs_r+0x12>
 800718a:	2000      	movs	r0, #0
 800718c:	e007      	b.n	800719e <__sfputs_r+0x22>
 800718e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007192:	463a      	mov	r2, r7
 8007194:	4630      	mov	r0, r6
 8007196:	f7ff ffda 	bl	800714e <__sfputc_r>
 800719a:	1c43      	adds	r3, r0, #1
 800719c:	d1f3      	bne.n	8007186 <__sfputs_r+0xa>
 800719e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080071a0 <_vfiprintf_r>:
 80071a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071a4:	460d      	mov	r5, r1
 80071a6:	b09d      	sub	sp, #116	; 0x74
 80071a8:	4614      	mov	r4, r2
 80071aa:	4698      	mov	r8, r3
 80071ac:	4606      	mov	r6, r0
 80071ae:	b118      	cbz	r0, 80071b8 <_vfiprintf_r+0x18>
 80071b0:	6a03      	ldr	r3, [r0, #32]
 80071b2:	b90b      	cbnz	r3, 80071b8 <_vfiprintf_r+0x18>
 80071b4:	f7fe f8dc 	bl	8005370 <__sinit>
 80071b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071ba:	07d9      	lsls	r1, r3, #31
 80071bc:	d405      	bmi.n	80071ca <_vfiprintf_r+0x2a>
 80071be:	89ab      	ldrh	r3, [r5, #12]
 80071c0:	059a      	lsls	r2, r3, #22
 80071c2:	d402      	bmi.n	80071ca <_vfiprintf_r+0x2a>
 80071c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071c6:	f7fe f9e9 	bl	800559c <__retarget_lock_acquire_recursive>
 80071ca:	89ab      	ldrh	r3, [r5, #12]
 80071cc:	071b      	lsls	r3, r3, #28
 80071ce:	d501      	bpl.n	80071d4 <_vfiprintf_r+0x34>
 80071d0:	692b      	ldr	r3, [r5, #16]
 80071d2:	b99b      	cbnz	r3, 80071fc <_vfiprintf_r+0x5c>
 80071d4:	4629      	mov	r1, r5
 80071d6:	4630      	mov	r0, r6
 80071d8:	f000 f93a 	bl	8007450 <__swsetup_r>
 80071dc:	b170      	cbz	r0, 80071fc <_vfiprintf_r+0x5c>
 80071de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071e0:	07dc      	lsls	r4, r3, #31
 80071e2:	d504      	bpl.n	80071ee <_vfiprintf_r+0x4e>
 80071e4:	f04f 30ff 	mov.w	r0, #4294967295
 80071e8:	b01d      	add	sp, #116	; 0x74
 80071ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ee:	89ab      	ldrh	r3, [r5, #12]
 80071f0:	0598      	lsls	r0, r3, #22
 80071f2:	d4f7      	bmi.n	80071e4 <_vfiprintf_r+0x44>
 80071f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071f6:	f7fe f9d2 	bl	800559e <__retarget_lock_release_recursive>
 80071fa:	e7f3      	b.n	80071e4 <_vfiprintf_r+0x44>
 80071fc:	2300      	movs	r3, #0
 80071fe:	9309      	str	r3, [sp, #36]	; 0x24
 8007200:	2320      	movs	r3, #32
 8007202:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007206:	f8cd 800c 	str.w	r8, [sp, #12]
 800720a:	2330      	movs	r3, #48	; 0x30
 800720c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80073c0 <_vfiprintf_r+0x220>
 8007210:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007214:	f04f 0901 	mov.w	r9, #1
 8007218:	4623      	mov	r3, r4
 800721a:	469a      	mov	sl, r3
 800721c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007220:	b10a      	cbz	r2, 8007226 <_vfiprintf_r+0x86>
 8007222:	2a25      	cmp	r2, #37	; 0x25
 8007224:	d1f9      	bne.n	800721a <_vfiprintf_r+0x7a>
 8007226:	ebba 0b04 	subs.w	fp, sl, r4
 800722a:	d00b      	beq.n	8007244 <_vfiprintf_r+0xa4>
 800722c:	465b      	mov	r3, fp
 800722e:	4622      	mov	r2, r4
 8007230:	4629      	mov	r1, r5
 8007232:	4630      	mov	r0, r6
 8007234:	f7ff ffa2 	bl	800717c <__sfputs_r>
 8007238:	3001      	adds	r0, #1
 800723a:	f000 80a9 	beq.w	8007390 <_vfiprintf_r+0x1f0>
 800723e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007240:	445a      	add	r2, fp
 8007242:	9209      	str	r2, [sp, #36]	; 0x24
 8007244:	f89a 3000 	ldrb.w	r3, [sl]
 8007248:	2b00      	cmp	r3, #0
 800724a:	f000 80a1 	beq.w	8007390 <_vfiprintf_r+0x1f0>
 800724e:	2300      	movs	r3, #0
 8007250:	f04f 32ff 	mov.w	r2, #4294967295
 8007254:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007258:	f10a 0a01 	add.w	sl, sl, #1
 800725c:	9304      	str	r3, [sp, #16]
 800725e:	9307      	str	r3, [sp, #28]
 8007260:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007264:	931a      	str	r3, [sp, #104]	; 0x68
 8007266:	4654      	mov	r4, sl
 8007268:	2205      	movs	r2, #5
 800726a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800726e:	4854      	ldr	r0, [pc, #336]	; (80073c0 <_vfiprintf_r+0x220>)
 8007270:	f7f8 ffb6 	bl	80001e0 <memchr>
 8007274:	9a04      	ldr	r2, [sp, #16]
 8007276:	b9d8      	cbnz	r0, 80072b0 <_vfiprintf_r+0x110>
 8007278:	06d1      	lsls	r1, r2, #27
 800727a:	bf44      	itt	mi
 800727c:	2320      	movmi	r3, #32
 800727e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007282:	0713      	lsls	r3, r2, #28
 8007284:	bf44      	itt	mi
 8007286:	232b      	movmi	r3, #43	; 0x2b
 8007288:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800728c:	f89a 3000 	ldrb.w	r3, [sl]
 8007290:	2b2a      	cmp	r3, #42	; 0x2a
 8007292:	d015      	beq.n	80072c0 <_vfiprintf_r+0x120>
 8007294:	9a07      	ldr	r2, [sp, #28]
 8007296:	4654      	mov	r4, sl
 8007298:	2000      	movs	r0, #0
 800729a:	f04f 0c0a 	mov.w	ip, #10
 800729e:	4621      	mov	r1, r4
 80072a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072a4:	3b30      	subs	r3, #48	; 0x30
 80072a6:	2b09      	cmp	r3, #9
 80072a8:	d94d      	bls.n	8007346 <_vfiprintf_r+0x1a6>
 80072aa:	b1b0      	cbz	r0, 80072da <_vfiprintf_r+0x13a>
 80072ac:	9207      	str	r2, [sp, #28]
 80072ae:	e014      	b.n	80072da <_vfiprintf_r+0x13a>
 80072b0:	eba0 0308 	sub.w	r3, r0, r8
 80072b4:	fa09 f303 	lsl.w	r3, r9, r3
 80072b8:	4313      	orrs	r3, r2
 80072ba:	9304      	str	r3, [sp, #16]
 80072bc:	46a2      	mov	sl, r4
 80072be:	e7d2      	b.n	8007266 <_vfiprintf_r+0xc6>
 80072c0:	9b03      	ldr	r3, [sp, #12]
 80072c2:	1d19      	adds	r1, r3, #4
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	9103      	str	r1, [sp, #12]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	bfbb      	ittet	lt
 80072cc:	425b      	neglt	r3, r3
 80072ce:	f042 0202 	orrlt.w	r2, r2, #2
 80072d2:	9307      	strge	r3, [sp, #28]
 80072d4:	9307      	strlt	r3, [sp, #28]
 80072d6:	bfb8      	it	lt
 80072d8:	9204      	strlt	r2, [sp, #16]
 80072da:	7823      	ldrb	r3, [r4, #0]
 80072dc:	2b2e      	cmp	r3, #46	; 0x2e
 80072de:	d10c      	bne.n	80072fa <_vfiprintf_r+0x15a>
 80072e0:	7863      	ldrb	r3, [r4, #1]
 80072e2:	2b2a      	cmp	r3, #42	; 0x2a
 80072e4:	d134      	bne.n	8007350 <_vfiprintf_r+0x1b0>
 80072e6:	9b03      	ldr	r3, [sp, #12]
 80072e8:	1d1a      	adds	r2, r3, #4
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	9203      	str	r2, [sp, #12]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	bfb8      	it	lt
 80072f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80072f6:	3402      	adds	r4, #2
 80072f8:	9305      	str	r3, [sp, #20]
 80072fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80073d0 <_vfiprintf_r+0x230>
 80072fe:	7821      	ldrb	r1, [r4, #0]
 8007300:	2203      	movs	r2, #3
 8007302:	4650      	mov	r0, sl
 8007304:	f7f8 ff6c 	bl	80001e0 <memchr>
 8007308:	b138      	cbz	r0, 800731a <_vfiprintf_r+0x17a>
 800730a:	9b04      	ldr	r3, [sp, #16]
 800730c:	eba0 000a 	sub.w	r0, r0, sl
 8007310:	2240      	movs	r2, #64	; 0x40
 8007312:	4082      	lsls	r2, r0
 8007314:	4313      	orrs	r3, r2
 8007316:	3401      	adds	r4, #1
 8007318:	9304      	str	r3, [sp, #16]
 800731a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800731e:	4829      	ldr	r0, [pc, #164]	; (80073c4 <_vfiprintf_r+0x224>)
 8007320:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007324:	2206      	movs	r2, #6
 8007326:	f7f8 ff5b 	bl	80001e0 <memchr>
 800732a:	2800      	cmp	r0, #0
 800732c:	d03f      	beq.n	80073ae <_vfiprintf_r+0x20e>
 800732e:	4b26      	ldr	r3, [pc, #152]	; (80073c8 <_vfiprintf_r+0x228>)
 8007330:	bb1b      	cbnz	r3, 800737a <_vfiprintf_r+0x1da>
 8007332:	9b03      	ldr	r3, [sp, #12]
 8007334:	3307      	adds	r3, #7
 8007336:	f023 0307 	bic.w	r3, r3, #7
 800733a:	3308      	adds	r3, #8
 800733c:	9303      	str	r3, [sp, #12]
 800733e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007340:	443b      	add	r3, r7
 8007342:	9309      	str	r3, [sp, #36]	; 0x24
 8007344:	e768      	b.n	8007218 <_vfiprintf_r+0x78>
 8007346:	fb0c 3202 	mla	r2, ip, r2, r3
 800734a:	460c      	mov	r4, r1
 800734c:	2001      	movs	r0, #1
 800734e:	e7a6      	b.n	800729e <_vfiprintf_r+0xfe>
 8007350:	2300      	movs	r3, #0
 8007352:	3401      	adds	r4, #1
 8007354:	9305      	str	r3, [sp, #20]
 8007356:	4619      	mov	r1, r3
 8007358:	f04f 0c0a 	mov.w	ip, #10
 800735c:	4620      	mov	r0, r4
 800735e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007362:	3a30      	subs	r2, #48	; 0x30
 8007364:	2a09      	cmp	r2, #9
 8007366:	d903      	bls.n	8007370 <_vfiprintf_r+0x1d0>
 8007368:	2b00      	cmp	r3, #0
 800736a:	d0c6      	beq.n	80072fa <_vfiprintf_r+0x15a>
 800736c:	9105      	str	r1, [sp, #20]
 800736e:	e7c4      	b.n	80072fa <_vfiprintf_r+0x15a>
 8007370:	fb0c 2101 	mla	r1, ip, r1, r2
 8007374:	4604      	mov	r4, r0
 8007376:	2301      	movs	r3, #1
 8007378:	e7f0      	b.n	800735c <_vfiprintf_r+0x1bc>
 800737a:	ab03      	add	r3, sp, #12
 800737c:	9300      	str	r3, [sp, #0]
 800737e:	462a      	mov	r2, r5
 8007380:	4b12      	ldr	r3, [pc, #72]	; (80073cc <_vfiprintf_r+0x22c>)
 8007382:	a904      	add	r1, sp, #16
 8007384:	4630      	mov	r0, r6
 8007386:	f7fd fbb3 	bl	8004af0 <_printf_float>
 800738a:	4607      	mov	r7, r0
 800738c:	1c78      	adds	r0, r7, #1
 800738e:	d1d6      	bne.n	800733e <_vfiprintf_r+0x19e>
 8007390:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007392:	07d9      	lsls	r1, r3, #31
 8007394:	d405      	bmi.n	80073a2 <_vfiprintf_r+0x202>
 8007396:	89ab      	ldrh	r3, [r5, #12]
 8007398:	059a      	lsls	r2, r3, #22
 800739a:	d402      	bmi.n	80073a2 <_vfiprintf_r+0x202>
 800739c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800739e:	f7fe f8fe 	bl	800559e <__retarget_lock_release_recursive>
 80073a2:	89ab      	ldrh	r3, [r5, #12]
 80073a4:	065b      	lsls	r3, r3, #25
 80073a6:	f53f af1d 	bmi.w	80071e4 <_vfiprintf_r+0x44>
 80073aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073ac:	e71c      	b.n	80071e8 <_vfiprintf_r+0x48>
 80073ae:	ab03      	add	r3, sp, #12
 80073b0:	9300      	str	r3, [sp, #0]
 80073b2:	462a      	mov	r2, r5
 80073b4:	4b05      	ldr	r3, [pc, #20]	; (80073cc <_vfiprintf_r+0x22c>)
 80073b6:	a904      	add	r1, sp, #16
 80073b8:	4630      	mov	r0, r6
 80073ba:	f7fd fe3d 	bl	8005038 <_printf_i>
 80073be:	e7e4      	b.n	800738a <_vfiprintf_r+0x1ea>
 80073c0:	080079f4 	.word	0x080079f4
 80073c4:	080079fe 	.word	0x080079fe
 80073c8:	08004af1 	.word	0x08004af1
 80073cc:	0800717d 	.word	0x0800717d
 80073d0:	080079fa 	.word	0x080079fa

080073d4 <__swbuf_r>:
 80073d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073d6:	460e      	mov	r6, r1
 80073d8:	4614      	mov	r4, r2
 80073da:	4605      	mov	r5, r0
 80073dc:	b118      	cbz	r0, 80073e6 <__swbuf_r+0x12>
 80073de:	6a03      	ldr	r3, [r0, #32]
 80073e0:	b90b      	cbnz	r3, 80073e6 <__swbuf_r+0x12>
 80073e2:	f7fd ffc5 	bl	8005370 <__sinit>
 80073e6:	69a3      	ldr	r3, [r4, #24]
 80073e8:	60a3      	str	r3, [r4, #8]
 80073ea:	89a3      	ldrh	r3, [r4, #12]
 80073ec:	071a      	lsls	r2, r3, #28
 80073ee:	d525      	bpl.n	800743c <__swbuf_r+0x68>
 80073f0:	6923      	ldr	r3, [r4, #16]
 80073f2:	b31b      	cbz	r3, 800743c <__swbuf_r+0x68>
 80073f4:	6823      	ldr	r3, [r4, #0]
 80073f6:	6922      	ldr	r2, [r4, #16]
 80073f8:	1a98      	subs	r0, r3, r2
 80073fa:	6963      	ldr	r3, [r4, #20]
 80073fc:	b2f6      	uxtb	r6, r6
 80073fe:	4283      	cmp	r3, r0
 8007400:	4637      	mov	r7, r6
 8007402:	dc04      	bgt.n	800740e <__swbuf_r+0x3a>
 8007404:	4621      	mov	r1, r4
 8007406:	4628      	mov	r0, r5
 8007408:	f7ff fd9e 	bl	8006f48 <_fflush_r>
 800740c:	b9e0      	cbnz	r0, 8007448 <__swbuf_r+0x74>
 800740e:	68a3      	ldr	r3, [r4, #8]
 8007410:	3b01      	subs	r3, #1
 8007412:	60a3      	str	r3, [r4, #8]
 8007414:	6823      	ldr	r3, [r4, #0]
 8007416:	1c5a      	adds	r2, r3, #1
 8007418:	6022      	str	r2, [r4, #0]
 800741a:	701e      	strb	r6, [r3, #0]
 800741c:	6962      	ldr	r2, [r4, #20]
 800741e:	1c43      	adds	r3, r0, #1
 8007420:	429a      	cmp	r2, r3
 8007422:	d004      	beq.n	800742e <__swbuf_r+0x5a>
 8007424:	89a3      	ldrh	r3, [r4, #12]
 8007426:	07db      	lsls	r3, r3, #31
 8007428:	d506      	bpl.n	8007438 <__swbuf_r+0x64>
 800742a:	2e0a      	cmp	r6, #10
 800742c:	d104      	bne.n	8007438 <__swbuf_r+0x64>
 800742e:	4621      	mov	r1, r4
 8007430:	4628      	mov	r0, r5
 8007432:	f7ff fd89 	bl	8006f48 <_fflush_r>
 8007436:	b938      	cbnz	r0, 8007448 <__swbuf_r+0x74>
 8007438:	4638      	mov	r0, r7
 800743a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800743c:	4621      	mov	r1, r4
 800743e:	4628      	mov	r0, r5
 8007440:	f000 f806 	bl	8007450 <__swsetup_r>
 8007444:	2800      	cmp	r0, #0
 8007446:	d0d5      	beq.n	80073f4 <__swbuf_r+0x20>
 8007448:	f04f 37ff 	mov.w	r7, #4294967295
 800744c:	e7f4      	b.n	8007438 <__swbuf_r+0x64>
	...

08007450 <__swsetup_r>:
 8007450:	b538      	push	{r3, r4, r5, lr}
 8007452:	4b2a      	ldr	r3, [pc, #168]	; (80074fc <__swsetup_r+0xac>)
 8007454:	4605      	mov	r5, r0
 8007456:	6818      	ldr	r0, [r3, #0]
 8007458:	460c      	mov	r4, r1
 800745a:	b118      	cbz	r0, 8007464 <__swsetup_r+0x14>
 800745c:	6a03      	ldr	r3, [r0, #32]
 800745e:	b90b      	cbnz	r3, 8007464 <__swsetup_r+0x14>
 8007460:	f7fd ff86 	bl	8005370 <__sinit>
 8007464:	89a3      	ldrh	r3, [r4, #12]
 8007466:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800746a:	0718      	lsls	r0, r3, #28
 800746c:	d422      	bmi.n	80074b4 <__swsetup_r+0x64>
 800746e:	06d9      	lsls	r1, r3, #27
 8007470:	d407      	bmi.n	8007482 <__swsetup_r+0x32>
 8007472:	2309      	movs	r3, #9
 8007474:	602b      	str	r3, [r5, #0]
 8007476:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800747a:	81a3      	strh	r3, [r4, #12]
 800747c:	f04f 30ff 	mov.w	r0, #4294967295
 8007480:	e034      	b.n	80074ec <__swsetup_r+0x9c>
 8007482:	0758      	lsls	r0, r3, #29
 8007484:	d512      	bpl.n	80074ac <__swsetup_r+0x5c>
 8007486:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007488:	b141      	cbz	r1, 800749c <__swsetup_r+0x4c>
 800748a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800748e:	4299      	cmp	r1, r3
 8007490:	d002      	beq.n	8007498 <__swsetup_r+0x48>
 8007492:	4628      	mov	r0, r5
 8007494:	f7fe fefe 	bl	8006294 <_free_r>
 8007498:	2300      	movs	r3, #0
 800749a:	6363      	str	r3, [r4, #52]	; 0x34
 800749c:	89a3      	ldrh	r3, [r4, #12]
 800749e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80074a2:	81a3      	strh	r3, [r4, #12]
 80074a4:	2300      	movs	r3, #0
 80074a6:	6063      	str	r3, [r4, #4]
 80074a8:	6923      	ldr	r3, [r4, #16]
 80074aa:	6023      	str	r3, [r4, #0]
 80074ac:	89a3      	ldrh	r3, [r4, #12]
 80074ae:	f043 0308 	orr.w	r3, r3, #8
 80074b2:	81a3      	strh	r3, [r4, #12]
 80074b4:	6923      	ldr	r3, [r4, #16]
 80074b6:	b94b      	cbnz	r3, 80074cc <__swsetup_r+0x7c>
 80074b8:	89a3      	ldrh	r3, [r4, #12]
 80074ba:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80074be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074c2:	d003      	beq.n	80074cc <__swsetup_r+0x7c>
 80074c4:	4621      	mov	r1, r4
 80074c6:	4628      	mov	r0, r5
 80074c8:	f000 f884 	bl	80075d4 <__smakebuf_r>
 80074cc:	89a0      	ldrh	r0, [r4, #12]
 80074ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80074d2:	f010 0301 	ands.w	r3, r0, #1
 80074d6:	d00a      	beq.n	80074ee <__swsetup_r+0x9e>
 80074d8:	2300      	movs	r3, #0
 80074da:	60a3      	str	r3, [r4, #8]
 80074dc:	6963      	ldr	r3, [r4, #20]
 80074de:	425b      	negs	r3, r3
 80074e0:	61a3      	str	r3, [r4, #24]
 80074e2:	6923      	ldr	r3, [r4, #16]
 80074e4:	b943      	cbnz	r3, 80074f8 <__swsetup_r+0xa8>
 80074e6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80074ea:	d1c4      	bne.n	8007476 <__swsetup_r+0x26>
 80074ec:	bd38      	pop	{r3, r4, r5, pc}
 80074ee:	0781      	lsls	r1, r0, #30
 80074f0:	bf58      	it	pl
 80074f2:	6963      	ldrpl	r3, [r4, #20]
 80074f4:	60a3      	str	r3, [r4, #8]
 80074f6:	e7f4      	b.n	80074e2 <__swsetup_r+0x92>
 80074f8:	2000      	movs	r0, #0
 80074fa:	e7f7      	b.n	80074ec <__swsetup_r+0x9c>
 80074fc:	20000064 	.word	0x20000064

08007500 <_raise_r>:
 8007500:	291f      	cmp	r1, #31
 8007502:	b538      	push	{r3, r4, r5, lr}
 8007504:	4604      	mov	r4, r0
 8007506:	460d      	mov	r5, r1
 8007508:	d904      	bls.n	8007514 <_raise_r+0x14>
 800750a:	2316      	movs	r3, #22
 800750c:	6003      	str	r3, [r0, #0]
 800750e:	f04f 30ff 	mov.w	r0, #4294967295
 8007512:	bd38      	pop	{r3, r4, r5, pc}
 8007514:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007516:	b112      	cbz	r2, 800751e <_raise_r+0x1e>
 8007518:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800751c:	b94b      	cbnz	r3, 8007532 <_raise_r+0x32>
 800751e:	4620      	mov	r0, r4
 8007520:	f000 f830 	bl	8007584 <_getpid_r>
 8007524:	462a      	mov	r2, r5
 8007526:	4601      	mov	r1, r0
 8007528:	4620      	mov	r0, r4
 800752a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800752e:	f000 b817 	b.w	8007560 <_kill_r>
 8007532:	2b01      	cmp	r3, #1
 8007534:	d00a      	beq.n	800754c <_raise_r+0x4c>
 8007536:	1c59      	adds	r1, r3, #1
 8007538:	d103      	bne.n	8007542 <_raise_r+0x42>
 800753a:	2316      	movs	r3, #22
 800753c:	6003      	str	r3, [r0, #0]
 800753e:	2001      	movs	r0, #1
 8007540:	e7e7      	b.n	8007512 <_raise_r+0x12>
 8007542:	2400      	movs	r4, #0
 8007544:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007548:	4628      	mov	r0, r5
 800754a:	4798      	blx	r3
 800754c:	2000      	movs	r0, #0
 800754e:	e7e0      	b.n	8007512 <_raise_r+0x12>

08007550 <raise>:
 8007550:	4b02      	ldr	r3, [pc, #8]	; (800755c <raise+0xc>)
 8007552:	4601      	mov	r1, r0
 8007554:	6818      	ldr	r0, [r3, #0]
 8007556:	f7ff bfd3 	b.w	8007500 <_raise_r>
 800755a:	bf00      	nop
 800755c:	20000064 	.word	0x20000064

08007560 <_kill_r>:
 8007560:	b538      	push	{r3, r4, r5, lr}
 8007562:	4d07      	ldr	r5, [pc, #28]	; (8007580 <_kill_r+0x20>)
 8007564:	2300      	movs	r3, #0
 8007566:	4604      	mov	r4, r0
 8007568:	4608      	mov	r0, r1
 800756a:	4611      	mov	r1, r2
 800756c:	602b      	str	r3, [r5, #0]
 800756e:	f7fa fb45 	bl	8001bfc <_kill>
 8007572:	1c43      	adds	r3, r0, #1
 8007574:	d102      	bne.n	800757c <_kill_r+0x1c>
 8007576:	682b      	ldr	r3, [r5, #0]
 8007578:	b103      	cbz	r3, 800757c <_kill_r+0x1c>
 800757a:	6023      	str	r3, [r4, #0]
 800757c:	bd38      	pop	{r3, r4, r5, pc}
 800757e:	bf00      	nop
 8007580:	20000638 	.word	0x20000638

08007584 <_getpid_r>:
 8007584:	f7fa bb32 	b.w	8001bec <_getpid>

08007588 <__swhatbuf_r>:
 8007588:	b570      	push	{r4, r5, r6, lr}
 800758a:	460c      	mov	r4, r1
 800758c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007590:	2900      	cmp	r1, #0
 8007592:	b096      	sub	sp, #88	; 0x58
 8007594:	4615      	mov	r5, r2
 8007596:	461e      	mov	r6, r3
 8007598:	da0d      	bge.n	80075b6 <__swhatbuf_r+0x2e>
 800759a:	89a3      	ldrh	r3, [r4, #12]
 800759c:	f013 0f80 	tst.w	r3, #128	; 0x80
 80075a0:	f04f 0100 	mov.w	r1, #0
 80075a4:	bf0c      	ite	eq
 80075a6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80075aa:	2340      	movne	r3, #64	; 0x40
 80075ac:	2000      	movs	r0, #0
 80075ae:	6031      	str	r1, [r6, #0]
 80075b0:	602b      	str	r3, [r5, #0]
 80075b2:	b016      	add	sp, #88	; 0x58
 80075b4:	bd70      	pop	{r4, r5, r6, pc}
 80075b6:	466a      	mov	r2, sp
 80075b8:	f000 f848 	bl	800764c <_fstat_r>
 80075bc:	2800      	cmp	r0, #0
 80075be:	dbec      	blt.n	800759a <__swhatbuf_r+0x12>
 80075c0:	9901      	ldr	r1, [sp, #4]
 80075c2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80075c6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80075ca:	4259      	negs	r1, r3
 80075cc:	4159      	adcs	r1, r3
 80075ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075d2:	e7eb      	b.n	80075ac <__swhatbuf_r+0x24>

080075d4 <__smakebuf_r>:
 80075d4:	898b      	ldrh	r3, [r1, #12]
 80075d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80075d8:	079d      	lsls	r5, r3, #30
 80075da:	4606      	mov	r6, r0
 80075dc:	460c      	mov	r4, r1
 80075de:	d507      	bpl.n	80075f0 <__smakebuf_r+0x1c>
 80075e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80075e4:	6023      	str	r3, [r4, #0]
 80075e6:	6123      	str	r3, [r4, #16]
 80075e8:	2301      	movs	r3, #1
 80075ea:	6163      	str	r3, [r4, #20]
 80075ec:	b002      	add	sp, #8
 80075ee:	bd70      	pop	{r4, r5, r6, pc}
 80075f0:	ab01      	add	r3, sp, #4
 80075f2:	466a      	mov	r2, sp
 80075f4:	f7ff ffc8 	bl	8007588 <__swhatbuf_r>
 80075f8:	9900      	ldr	r1, [sp, #0]
 80075fa:	4605      	mov	r5, r0
 80075fc:	4630      	mov	r0, r6
 80075fe:	f7fe febd 	bl	800637c <_malloc_r>
 8007602:	b948      	cbnz	r0, 8007618 <__smakebuf_r+0x44>
 8007604:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007608:	059a      	lsls	r2, r3, #22
 800760a:	d4ef      	bmi.n	80075ec <__smakebuf_r+0x18>
 800760c:	f023 0303 	bic.w	r3, r3, #3
 8007610:	f043 0302 	orr.w	r3, r3, #2
 8007614:	81a3      	strh	r3, [r4, #12]
 8007616:	e7e3      	b.n	80075e0 <__smakebuf_r+0xc>
 8007618:	89a3      	ldrh	r3, [r4, #12]
 800761a:	6020      	str	r0, [r4, #0]
 800761c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007620:	81a3      	strh	r3, [r4, #12]
 8007622:	9b00      	ldr	r3, [sp, #0]
 8007624:	6163      	str	r3, [r4, #20]
 8007626:	9b01      	ldr	r3, [sp, #4]
 8007628:	6120      	str	r0, [r4, #16]
 800762a:	b15b      	cbz	r3, 8007644 <__smakebuf_r+0x70>
 800762c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007630:	4630      	mov	r0, r6
 8007632:	f000 f81d 	bl	8007670 <_isatty_r>
 8007636:	b128      	cbz	r0, 8007644 <__smakebuf_r+0x70>
 8007638:	89a3      	ldrh	r3, [r4, #12]
 800763a:	f023 0303 	bic.w	r3, r3, #3
 800763e:	f043 0301 	orr.w	r3, r3, #1
 8007642:	81a3      	strh	r3, [r4, #12]
 8007644:	89a3      	ldrh	r3, [r4, #12]
 8007646:	431d      	orrs	r5, r3
 8007648:	81a5      	strh	r5, [r4, #12]
 800764a:	e7cf      	b.n	80075ec <__smakebuf_r+0x18>

0800764c <_fstat_r>:
 800764c:	b538      	push	{r3, r4, r5, lr}
 800764e:	4d07      	ldr	r5, [pc, #28]	; (800766c <_fstat_r+0x20>)
 8007650:	2300      	movs	r3, #0
 8007652:	4604      	mov	r4, r0
 8007654:	4608      	mov	r0, r1
 8007656:	4611      	mov	r1, r2
 8007658:	602b      	str	r3, [r5, #0]
 800765a:	f7fa fb2e 	bl	8001cba <_fstat>
 800765e:	1c43      	adds	r3, r0, #1
 8007660:	d102      	bne.n	8007668 <_fstat_r+0x1c>
 8007662:	682b      	ldr	r3, [r5, #0]
 8007664:	b103      	cbz	r3, 8007668 <_fstat_r+0x1c>
 8007666:	6023      	str	r3, [r4, #0]
 8007668:	bd38      	pop	{r3, r4, r5, pc}
 800766a:	bf00      	nop
 800766c:	20000638 	.word	0x20000638

08007670 <_isatty_r>:
 8007670:	b538      	push	{r3, r4, r5, lr}
 8007672:	4d06      	ldr	r5, [pc, #24]	; (800768c <_isatty_r+0x1c>)
 8007674:	2300      	movs	r3, #0
 8007676:	4604      	mov	r4, r0
 8007678:	4608      	mov	r0, r1
 800767a:	602b      	str	r3, [r5, #0]
 800767c:	f7fa fb2d 	bl	8001cda <_isatty>
 8007680:	1c43      	adds	r3, r0, #1
 8007682:	d102      	bne.n	800768a <_isatty_r+0x1a>
 8007684:	682b      	ldr	r3, [r5, #0]
 8007686:	b103      	cbz	r3, 800768a <_isatty_r+0x1a>
 8007688:	6023      	str	r3, [r4, #0]
 800768a:	bd38      	pop	{r3, r4, r5, pc}
 800768c:	20000638 	.word	0x20000638

08007690 <_init>:
 8007690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007692:	bf00      	nop
 8007694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007696:	bc08      	pop	{r3}
 8007698:	469e      	mov	lr, r3
 800769a:	4770      	bx	lr

0800769c <_fini>:
 800769c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800769e:	bf00      	nop
 80076a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076a2:	bc08      	pop	{r3}
 80076a4:	469e      	mov	lr, r3
 80076a6:	4770      	bx	lr
